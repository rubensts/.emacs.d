#+TITLE:     My Emacs Configuration
#+AUTHOR:    Rubens.TS
#+EMAIL:     rubensts@gmail.com
#+DATE:      2017-05-03
#+LANGUAGE:  en
#+OPTIONS: author:nil date:nil toc:2 title:nil e:nil
#+LaTeX_HEADER: \pagenumbering{gobble}
#+LaTeX_HEADER: \usepackage[T1]{fontenc}
#+LaTeX_HEADER: \usepackage{fontspec}
#+LaTeX_HEADER: \setmonofont[Scale=0.7]{DejaVu Sans Mono}
#+LaTeX_HEADER: \usepackage{mathpazo}
#+LaTeX_HEADER: \usepackage{geometry}
#+LaTeX_HEADER: \geometry{a4paper, margin=20mm}
#+LaTeX_HEADER: \usepackage{minted}
#+LaTeX_HEADER: \setminted{breaklines}

#+ATTR_LATEX: :width 5cm :align center :float t
#+ATTR_HTML: :width 110px
[[./img/emacs_icon.png]][fn:1]

[[id:50f37a2f-42cc-4628-b7fa-30fb85c0ffbc][About]] | [[Packages Setup]] | [[Built-in Capabilities]]

* About
:PROPERTIES:
:ID:       50f37a2f-42cc-4628-b7fa-30fb85c0ffbc
:END:

*ATTENTION:* This is a work in progress

*ATTENTION:* This configuration has been tested on Emacs 25.

** Emacs Configuration using Org-Babel

This repository contains the setup I use to customize Emacs. It is implemented
trying to follow the concept of [[http://orgmode.org/worg/org-contrib/babel/intro.html#literate-programming][Literate Programming]] through the use of [[http://orgmode.org/][Org-mode]]
and [[http://orgmode.org/worg/org-contrib/babel/][Org-Babel]] to manage all the settings in a unique Org mode file.

** Dependencies

This is a list of applications that need to be installed previously in order to
enjoy all the goodies of this configuration. Of course, you can install only the
ones you will really use and/or adapt it to the ones you prefer.

- [[https://github.com/BurntSushi/ripgrep][ripgrep]] for fast searching
- [[https://git-scm.com/][git]] for version control, but if you are here you already know what is it ;)
- [[https://notmuchmail.org/][notmuch]] for email (also a tool to fetch mail like [[http://isync.sourceforge.net/][mbsync]] or [[http://www.offlineimap.org/][OfflineImap]])
- [[https://www.gnupg.org/][GnuPG]] for security, always
- [[https://www.passwordstore.org/][pass]] to manage your passwords
- [[https://www.latex-project.org/][LaTeX]] and [[http://pygments.org/][Pygments]] to PDF export with syntax highlighting
- [[https://mupdf.com/][MuPDF]] for DocView, [[https://poppler.freedesktop.org/][poppler]] for pdf-tools
- [[http://pandoc.org/][pandoc]] for [[https://github.com/kawabata/ox-pandoc][ox-pandoc]]
- [[http://proselint.com/][proselint]] a liter for prose
- [[https://zealdocs.org/][Zeal]] (Linux) or [[https://kapeli.com/dash][Dash]] (macOS) for browsing software documentation
  After installing Zeal, you need to download docsets. Go to
  File->Options->Docsets, select the ones you want, and click the Download
  button.
- [[https://www.imagemagick.org/script/index.php][ImageMagick]] or [[http://www.graphicsmagick.org/][GraphicsMagick]]
- [[http://www.gzip.org/][gzip]]

** Source of Ideas

The inspiration for handling the Emacs configuration through [[http://orgmode.org/worg/org-contrib/babel/intro.html#literate-programming][Literate
Programming]] came from [[http://eschulte.github.io/emacs24-starter-kit/][Eric Schulte's emacs24-starter-kit]]. It is a really clever
concept that, among other things, keeps your Emacs configuration tidy and well
organized.

The first time I saw it being handled by a single org-mode file was on [[https://github.com/sachac/.emacs.d/blob/gh-pages/Sacha.org][Sacha
Chua's config.]] Then I came across [[https://github.com/joedicastro/dotfiles/tree/master/emacs/.emacs.d][joe di castro's emacs.d on github]], where he
automatically generates the =~/.emacs.d/init.el= directly from his =readme.org=
file. This is the solution I'm using here.

A list of Emacs Jedis, from whon I took most of the solutions applied here.
Their ~github~ pages have many interesting/clever ideas to inspire you. Also
make sure to check their blogs as well...cool stuff:

- [[https://github.com/sachac/.emacs.d/blob/gh-pages/Sacha.org][Sacha Chua]]
- [[https://github.com/joedicastro/dotfiles/tree/master/emacs][joedicastro]]
- [[https://github.com/lunaryorn/.emacs.d][lunaryorn]]
- [[https://github.com/abo-abo/oremacs][oremacs (abo-abo)]]
- [[https://github.com/angrybacon/dotemacs][angrybacon]]
- [[https://github.com/emacs-tw/awesome-emacs#interface-enhancement][awesome-emacs]]

** If using it on Mac

For installing Emacs on Mac, check these:

- [[http://emacs.stackexchange.com/questions/271/what-is-the-difference-between-aquamacs-and-other-mac-versions-of-emacs][Stackexchange - Difference between Emacs versions on mac]]
- [[http://www.reddit.com/r/emacs/comments/195163/hey_mac_users/][reddit - emacs-mac-port]]

* Built-in Capabilities
** OS compatibility

Check which OS for keeping compatibility.
The functions ~system-is-mac~ and ~system-is-linux~ is called throughout this org
file.

#+BEGIN_SRC emacs-lisp
(defun system-is-mac ()
  (interactive)
  (string-equal system-type "darwin"))

(defun system-is-linux ()
  (interactive)
  (string-equal system-type "gnu/linux"))
#+END_SRC

** Custom file

Save the custom settings to a separated file, instead of inside the ~init.el~
file, avoiding cluttering it.

#+BEGIN_SRC emacs-lisp
(defconst rts-custom-file (locate-user-emacs-file "custom.el")
  "File used to store settings from Customization UI.")

(use-package cus-edit
  :ensure nil
  :init (load rts-custom-file 'no-error 'no-message)
  :config
  (setq custom-file rts-custom-file
        custom-buffer-done-kill nil            ; kill when existing
        custom-buffer-verbose-help nil         ; remove redundant help text
        custom-unlispify-tag-names nil         ; show me the real variable name
        custom-unlispify-menu-entries nil))
#+END_SRC

** Better Defaults

Set better defaults do Emacs. Some of the preferences here were taken from
[[https://github.com/hrs/sensible-defaults.el][sensible-defaults.el]].

#+BEGIN_SRC emacs-lisp
;; Fullscreen
(cond ((system-is-mac) (toggle-frame-fullscreen))
      ((system-is-linux) (add-to-list 'default-frame-alist
                                      '(fullscreen . maximized))))

;; disable menu, tool-bar and scroll-bar
(when (window-system)
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (scroll-bar-mode -1))

(fset 'yes-or-no-p 'y-or-n-p)                  ; ask `y/n?` instead of `yes/no?`

(transient-mark-mode t)                        ; apply changes to highlighted region
(delete-selection-mode t)                      ; overwrite selected text when typing
(blink-cursor-mode -1)                         ; turn of the blinking cursor
;;(fringe-mode '(1 . 1))                       ; thinner window divisions
(global-hl-line-mode 1)                        ; highlight the current line
(global-visual-line-mode t)                    ; break long line of text
(global-prettify-symbols-mode 1)               ; prettify symbols (lambdas, etc)
(global-font-lock-mode t)                      ; always highlight code
(global-auto-revert-mode t)                    ; refresh buffers when files change
(column-number-mode t)                         ; shows column number on the modeline
(save-place-mode 1)                            ; save cursor position for opened files
(show-paren-mode t)                            ; show matching parentheses

(defalias 'list-buffers 'ibuffer)              ; use ibuffer by default

(set-terminal-coding-system  'utf-8)           ; make sure that UTF-8 is used everywhere
(set-keyboard-coding-system  'utf-8)
(set-language-environment    'utf-8)
(set-selection-coding-system 'utf-8)
(setq locale-coding-system   'utf-8)
(prefer-coding-system        'utf-8)
(set-input-method nil)

(validate-setq inhibit-startup-message t       ; don't show startup message
               initial-scratch-message nil     ; clear the scratch buffer
               mouse-yank-at-point t           ; paste from clipboard to where point is on buffer
               echo-keystrokes 0.1             ; shows keystrokes in progress
               use-dialog-box nil              ; don't use dialog when using mouse click
               line-spacing '0.10              ; line height
               default-directory "~/"          ; when opening files search from home directory
               vc-follow-symlinks t            ; when opening files follow symlinks
               sentence-end-double-space nil   ; sentences don't need to have two spaces after periods
               require-final-newline t         ; ensure files end with newline
               confirm-kill-emacs 'y-or-n-p    ; ask for confirmation to close Emacs
               auto-revert-verbose nil         ; turn off auto revert messages in the minibuffer
               size-indication-mode t          ; displays the buffer size in the modeline
               show-paren-delay 0.0            ; set delay to 0 for showing matching parens
               )

(setq apropos-do-all t)                        ; perform more extensive searches than default

(setq-default indicate-empty-lines t)          ; show empty lines at bottom of buffer
(when (not indicate-empty-lines)
  (toggle-indicate-empty-lines))

(setq-default indent-tabs-mode  nil            ; always indent with spaces
              default-tab-width 4
              c-basic-offset 4
              fill-column 80)                  ; set default line length

;; silence the beep sound, and shows the alarm bell visually on the modeline
(setq ring-bell-function
      (lambda ()
        (invert-face 'mode-line)
        (run-with-timer 0.1 nil
                        'invert-face 'mode-line)))

;; browser settings
(setq browse-url-browser-function 'browse-url-generic
      browse-url-generic-program "firefox")

;; hooks
(add-hook 'before-save-hook 'delete-trailing-whitespace)  ; delete trailing whitespace when buffer is saved
(add-hook 'prog-mode-hook 'subword-mode)                  ; treat CamelCaseSubWords as separate words
(add-hook 'after-save-hook
          'executable-make-buffer-file-executable-if-script-p)  ; when file starts with `#!` make it executable
#+END_SRC

** Calendar
*** Location
Set the calendar to current location.

#+BEGIN_SRC emacs-lisp
(setq calendar-week-start-day  1
      calendar-latitude 43.8
      calendar-longitude 11.0
      calendar-location-name "Prato, Italy")
#+END_SRC

*** Holidays
Let Emacs know about holidays of the location.

#+BEGIN_SRC emacs-lisp
(setq holiday-general-holidays
      '((holiday-fixed 1 1 "Capodanno")
        (holiday-fixed 5 1 "1 Maggio")
        (holiday-fixed 4 25 "Liberazione")
        (holiday-fixed 6 2 "Festa Repubblica")
        ))

(setq holiday-christian-holidays
      '((holiday-fixed 12 8 "Immacolata Concezione")
        (holiday-fixed 12 25 "Natale")
        (holiday-fixed 12 26 "Santo Stefano")
        (holiday-fixed 1 6 "Epifania")
        (holiday-easter-etc -52 "Giovedì grasso")
        (holiday-easter-etc -47 "Martedì grasso")
        (holiday-easter-etc  -2 "Venerdì Santo")
        (holiday-easter-etc   0 "Pasqua")
        (holiday-easter-etc  +1 "Lunedì Pasqua")
        (holiday-fixed 8 15 "Assunzione di Maria")
        (holiday-fixed 11 1 "Ognissanti")
        ))
#+END_SRC

** History

Maintain a history of past actions and a reasonable number of lists.

#+BEGIN_SRC emacs-lisp
(setq-default history-length 1000)
;;(setq savehist-file (concat
;;                     tmp-directory "history")
(setq-default history-delete-duplicates t
              savehist-save-minibuffer-history 1
              savehist-additional-variables '(kill-ring
                                              search-ring
                                              regexp-search-ring))
(savehist-mode t)
#+END_SRC

** Scrolling

#+BEGIN_SRC emacs-lisp
(setq scroll-margin 0
      scroll-conservatively 100000
      scroll-preserve-screen-position 1
      mouse-wheel-scroll-amount '(1 ((shift) . 1))
      mouse-wheel-progressive-speed nil
      mouse-wheel-follow-mouse 't)
#+END_SRC

** Useful functions

These functions are useful. Activate them.

#+BEGIN_SRC emacs-lisp
(put 'downcase-region 'disabled nil)
(put 'upcase-region 'disabled nil)
(put 'narrow-to-region 'disabled nil)
(put 'narrow-to-page 'disabled nil)
#+END_SRC

** Custom functions
*** Customizing the customize
[[http://oremacs.com/2015/01/17/setting-up-ediff/][Oremacs source]] - This function is used in some point of this ~init.el~ file for
setting custom variables. Basically it is a ~setq~ that is aware of the
custom-set property of a variable.

#+BEGIN_SRC emacs-lisp
  (defmacro csetq (variable value)
    `(funcall (or (get ',variable 'custom-set)
                  'set-default)
              ',variable ,value))
#+END_SRC

*** Split window and move

This improves the default Emacs behavior of split windows. The cursor
automatically moves to the new splited window.

#+BEGIN_SRC emacs-lisp
  (defun split-below-and-move ()
    (interactive)
    (split-window-below)
    (other-window 1))

  (defun split-right-and-move ()
    (interactive)
    (split-window-right)
    (other-window 1))

  (bind-keys ("C-x 2" . split-below-and-move)
             ("C-x 3" . split-right-and-move))
#+END_SRC

*** Kill the current buffer

Change the key-binding to kill the current buffer instead of asking which one to
kill. Very good tip taken from [[http://pragmaticemacs.com/emacs/dont-kill-buffer-kill-this-buffer-instead/][Pragmaticemacs]].

#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-x k") 'kill-this-buffer)
#+END_SRC

*** Org header IDs

#+BEGIN_SRC emacs-lisp
  (defun my/copy-id-to-clipboard()
    "Copy the ID property value to killring,
  if no ID is there then create a new unique ID.
  This function works only in org-mode buffers.

  The purpose of this function is to easily construct id:-links to
  org-mode items. If its assigned to a key it saves you marking the
  text and copying to the killring."
         (interactive)
         (when (eq major-mode 'org-mode) ; do this only in org-mode buffers
       (setq mytmpid (funcall 'org-id-get-create))
       (kill-new mytmpid)
       (message "Copied %s to killring (clipboard)" mytmpid)
         ))

  (global-set-key (kbd "<f5>") 'my/copy-id-to-clipboard)
#+END_SRC

*** Comment region or line

Copied from [[https://github.com/hrs/sensible-defaults.el][sensible-defaults.el]].

#+BEGIN_SRC emacs-lisp
(defun sensible-defaults/comment-or-uncomment-region-or-line ()
  "Comments or uncomments the region or the current line if
there's no active region."
  (interactive)
  (let (beg end)
    (if (region-active-p)
        (setq beg (region-beginning) end (region-end))
      (setq beg (line-beginning-position) end (line-end-position)))
    (comment-or-uncomment-region beg end)))

(global-set-key (kbd "M-;")
                'sensible-defaults/comment-or-uncomment-region-or-line)
#+END_SRC

*** Create parent directories when saving file

Copied from [[https://github.com/hrs/sensible-defaults.el][sensible-defaults.el]].

#+BEGIN_SRC emacs-lisp
(defun sensible-defaults/offer-to-create-parent-directories-on-save ()
  "When saving a file in a directory that doesn't exist, offer
to (recursively) create the file's parent directories."
  (add-hook 'before-save-hook
            (lambda ()
              (when buffer-file-name
                (let ((dir (file-name-directory buffer-file-name)))
                  (when (and (not (file-exists-p dir))
                             (y-or-n-p (format "Directory %s does not exist. Create it?" dir)))
                    (make-directory dir t)))))))
#+END_SRC

* Keybindings

I'm start managing my keybindings through General.

#+BEGIN_SRC emacs-lisp
(use-package general
  :demand t
  :after evil
  :config
  (general-define-key
   :states '(normal visual insert emacs)
   :prefix "SPC"
   :non-normal-prefix "C-SPC"

   ;; simple command
   ;;"'"   '(iterm-focus :which-key "iterm")
   ;;"?"   '(iterm-goto-filedir-or-home :which-key "iterm - goto dir")
   ;;"/"   'counsel-ag
   "SPC" '(avy-goto-word-or-subword-1 :which-key "go to char")
   "iu" 'insert-char
   "ne" 'flycheck-next-error
   "pe" 'flycheck-previous-error
   "qq" 'save-buffers-kill-emacs
   "zp" 'zeal-at-point
   "cy" 'clipboard-kill-ring-save
   ;;"cp" 'clipboard-yank

   ;; buffers
   "TAB" '(switch-to-other-buffer :which-key "prev buffer")
   "b" '(:ignore t :which-key "Buffers")
   "bb" 'switch-to-buffer
   "bd" 'kill-this-buffer
   "by" 'copy-whole-buffer

   ;; windows
   "w1" 'delete-other-windows
   "w2" 'split-below-and-move
   "w3" 'split-right-and-move
   "wk" 'windmove-left
   "wj" 'windmove-right

   ;; eyebrowse - workspaces
   "0" 'eyebrowse-switch-to-window-config-0
   "1" 'eyebrowse-switch-to-window-config-1
   "2" 'eyebrowse-switch-to-window-config-2
   "3" 'eyebrowse-switch-to-window-config-3
   "4" 'eyebrowse-switch-to-window-config-4
   "5" 'eyebrowse-switch-to-window-config-5
   "6" 'eyebrowse-switch-to-window-config-6
   "7" 'eyebrowse-switch-to-window-config-7
   "8" 'eyebrowse-switch-to-window-config-8
   "9" 'eyebrowse-switch-to-window-config-9

   ;; files
   "f" '(:ignore t :which-key "Files")
   "ff" 'find-file
   "fl" 'load-file
   "fs" 'save-buffer

   ;; modes
   "m" '(:ignore t :which-key "Modes")
   "ml" 'linum-mode
   "mw" 'whitespace-mode

   ;; applications
   "a" '(:ignore t :which-key "Applications")
   "ad" 'dired-jump
   "am" 'notmuch

   ;; git
   "g" '(:ignore t :which-key "GIT")
   "gs" 'magit-status

   ;; spelling
   "s" '(:ignore t :which-key "Spelling")
   "sb" 'flyspell-buffer
   "sd" 'switch-dictionary
   "sn" 'flyspell-goto-next-error
   "sp" 'flyspell-popup-correct
   "sw" 'flyspell-auto-correct-word
   "sz" 'flyspell-lazy-check-buffer

   ;; evil-nerd-commenter
   ;; "ci" 'evilnc-comment-or-uncomment-lines
   ;; "cl" 'evilnc-quick-comment-or-uncomment-to-the-line
   ;; "cc" 'evilnc-copy-and-comment-lines
   ;; "cp" 'evilnc-comment-or-uncomment-paragraphs
   ;; "cr" 'comment-or-uncomment-region
   ;; "cv" 'evilnc-toggle-invert-comment-line-by-line
   ;; "."  'evilnc-copy-and-comment-operator
   )

  (general-define-key :keymaps 'dired-mode-map
                      :prefix ","
                      "&" 'dired-do-async-shell-command
                      "s" 'dired-get-size
                      "_" 'xah-dired-rename-space-to-underscore
                      "-" 'xah-dired-rename-space-to-hyphen)

  (general-define-key :keymaps 'org-mode-map
                      :states '(normal visual)
                      :prefix ","
                      "c" 'org-capture
                      "d" 'org-clock-display
                      "i" 'org-clock-in
                      "o" 'org-clock-out)
)
#+END_SRC

* Main packages

To automatized package installation I've started using ~use-package~, which gives a
concise and powerful way to organize Emacs configuration avoiding the terrible
"config bankruptcy".

** evil

Why use vim modal editing on Emacs?

Simple: the editing paradigm of Vim is the best way, by far, of editing text.
Emacs is the best for everything else ;)

Evil configuration taken from https://ilikewhenit.works/blog/6

#+BEGIN_SRC emacs-lisp
(use-package evil
  :demand t
  :config
  (evil-mode 1)
  (with-eval-after-load 'evil-maps
    ;;(define-key evil-motion-state-map (kbd "SPC") nil)
    (define-key evil-motion-state-map (kbd "RET") nil)
    (define-key evil-motion-state-map (kbd "TAB") nil))

  (validate-setq evil-emacs-state-cursor '("red" box)
                 evil-motion-state-cursor '("orange" box)
                 evil-normal-state-cursor '("green" box)
                 evil-visual-state-cursor '("orange" box)
                 evil-insert-state-cursor '("red" bar)
                 evil-replace-state-cursor '("red" bar)
                 evil-operator-state-cursor '("red" hollow))

  (add-hook 'after-init-hook
            (lambda ()
              (evil-put-property 'evil-state-properties 'normal   :tag " NORMAL ")
              (evil-put-property 'evil-state-properties 'insert   :tag " INSERT ")
              (evil-put-property 'evil-state-properties 'visual   :tag " VISUAL ")
              (evil-put-property 'evil-state-properties 'motion   :tag " MOTION ")
              (evil-put-property 'evil-state-properties 'emacs    :tag " EMACS ")
              (evil-put-property 'evil-state-properties 'replace  :tag " REPLACE ")
              (evil-put-property 'evil-state-properties 'operator :tag " OPERATOR ")))
  )

(use-package evil-surround
  :after evil
  :config
  (global-evil-surround-mode))

(use-package evil-indent-plus
  :after evil
  :config
  (evil-indent-plus-default-bindings))

(use-package evil-commentary
  :after evil
  :config
  (evil-commentary-mode))

(use-package evil-snipe
  :delight evil-snipe-local-mode nil evil-snipe
  :after evil
  :demand t
  :init
  (setq evil-snipe-scope 'whole-buffer
        evil-snipe-enable-highlight t
        evil-snipe-enable-incremental-highlight t
        evil-snipe-auto-disable-substitute t
        evil-snipe-show-prompt nil
        evil-snipe-smart-case t)
  :config
  (progn
    (evil-snipe-override-mode 1)
    (evil-snipe-mode 1)))

(use-package evil-anzu
  :after evil)

(use-package evil-matchit
  :after evil
  :config
  (global-evil-matchit-mode 1))

(use-package evil-numbers
  :after evil)
#+END_SRC

** org

[[http://orgmode.org/][Org mode]] is for keeping notes, maintaining TODO lists, planning projects, and
authoring documents with a fast and effective plain-text system...bu not only :)

Actually, org-mode is the solely reason why many people recently have decided to
try Emacs, then they are hooked ;)

| Key         | Command                   | Description                |
|-------------+---------------------------+----------------------------|
| C-c C-x C-l | =org-toggle-latex-fragment= | Show latex fragments       |
| C-c C-c     | =org-ctrl-c-ctrl-c=         | Get rid of latex fragments |

*** general settings

#+BEGIN_SRC emacs-lisp
(use-package org
  :delight org-mode "Org"
  :ensure nil
  :bind  (("C-c a" . org-agenda-list)
          ("C-c c" . org-capture)
          ("C-c l" . org-store-link)
          ;;("C-c f" . org-cycle-agenda-files)
          ;;("C-c s" . org-search-view)
          ("C-c t" . org-todo-list))
  :config
  (validate-setq
   org-tags-column 90                      ; column to which the tags have to be indented
   org-ellipsis "⤵"                        ; ⬎, ⤷, ⤵, ⚡
   org-fontify-whole-heading-line t        ; fontify the whole line for headings
   org-fontify-done-headline t
   org-fontify-quote-and-verse-blocks t
   org-startup-indented t
   org-hide-emphasis-markers t             ; hide markup elements, e.g. * *, / /, _ _
   org-cycle-include-plain-lists t
   org-list-allow-alphabetical t
   org-latex-create-formula-image-program 'imagemagick   ; preview latex fragments

   ;; Code blocks to play nicelly on org-babel
   org-edit-src-content-indentation 0      ; number of whitespaces added to the code block indentation (after #begin)
   org-src-tab-acts-natively t             ; TAB acts natively as it was in the language major mode
   org-src-preserve-indentation t          ; preserve indentation when exporting blocks
   org-src-fontify-natively t              ; highlights code-blocks natively
   org-src-window-setup 'current-window    ; open code-blocks in the current window
   org-confirm-babel-evaluate nil          ; don't ask for confirmation when compiling code-blocks

   ;; Files location
   org-directory "~/org"
   org-default-notes-file (concat org-directory "/notes.org")
   org-agenda-files (list "~/org/todo.org"
                          "~/org/clockin.org"))

  ;; TODO workflow states
  org-todo-keywords
  '("☛ TODO(t)" "⚑ WAIT(w@)" "|" "✔ DONE(d)" "✘ CANCEL(c@)")

  ;; TODO fontification
  org-todo-keyword-faces
  '(("☛ TODO"   . (:foreground "#ff4500" :weight bold))
    ("✔ DONE"   . (:foreground "#00ff7f" :weight bold))
    ("⚑ WAIT"   . (:foreground "#ffff00" :weight bold))
    ("✘ CANCEL" . (:foreground "#00bfff" :weight bold)))
  )
#+END_SRC

*** org-clock

#+BEGIN_SRC emacs-lisp
(use-package org-clock
  :ensure org-plus-contrib
  :demand t
  :config
  (org-clock-persistence-insinuate)           ; resume clocking task when emacs is restarted
  (validate-setq
   org-clock-persist t                        ; save all clock history when exiting Emacs, load it on startup
   org-clock-persist-query-resume nil         ; do not prompt to resume an active clock
   org-clock-history-length 10                ; show lot of clocking history from where choose items
   org-clock-in-resume t                      ; resume clocking task on clock-in if the clock is open
   org-clock-into-drawer "CLOCKING"           ; clocking goes into specfic drawer
   org-clock-report-include-clocking-task t)) ; include current clocking task in clock reports
#+END_SRC

*** org-capture-templates

#+BEGIN_SRC emacs-lisp
  (use-package org-protocol
    :ensure org-plus-contrib
    :demand t
    :config
    ;; Define capture templates
    (setq org-capture-templates
          '(("w" "Web bookmarks" entry
             (file+headline (concat org-directory "/www.org") "Bookmarks")
             "* %?%c %^g\n:PROPERTIES:\n:CREATED: %U\n:END:\n%i\n"
             :empty-lines 1
             :immediate-finish)

            ("t" "Tasks" entry
             (file+headline (concat org-directory "/tasks.org") "Tasks")
             "* ☛ TODO %^{Task} %^g\n:PROPERTIES:\n:CREATED: %U\n:END:\n%?%i"
             :empty-lines 1)

            ("n" "Notes" entry
             (file+headline (concat org-directory "/notes.org") "Notes")
             "* %^{Header} %^G\n %u\n %?")

            ("j" "Journal" entry
             (file+datetree (concat org-directory "/journal.org"))
             "* %U %^{Title}\n %?%i\n %a")

            ("a" "Articles" entry
             (file+headline (concat org-directory "/articles.org") "Articles")
             "* %^{Title} %^g\n:PROPERTIES:\n:CREATED: %U\n:END:\n%?%i\n"
             :empty-lines 1
             :immediate-finish)

            ("r" "Redmine" entry
             (file+datetree (concat org-directory "/clockin.org"))
             "* [[https://redmine.2ndquadrant.it/issues/%^{Ticket}][%^{Description}]] :redmine:%^g\n%?"
             :clock-in t
             :clock-keep t
             :empty-lines 1)

            ("s" "RT - Support" entry
             (file+datetree (concat org-directory "/clockin.org"))
             "* [[https://support.2ndquadrant.com/rt/Ticket/Display.html?id=%^{Ticket}][%^{Description}]] :support:%^g\n%?"
             :clock-in t
             :clock-keep t
             :empty-lines 1)

            ("b" "RT - RDBA" entry
             (file+datetree (concat org-directory "/clockin.org"))
             "* [[https://support.2ndquadrant.com/rt/Ticket/Display.html?id=%^{Ticket}][%^{Description}]] :rdba:%^g\n%?"
             :clock-in t
             :clock-keep t
             :empty-lines 1)
            )))
#+END_SRC

*** org-bullets

#+BEGIN_SRC emacs-lisp
  (use-package org-bullets
    :demand t
    :after org-plug-contrib
    :config
    ;;(setq org-bullets-bullet-list '("☯" "☰" "☱" "☲" "☳" "☴" "☵" "☶" "☷"))
    ;;(setq org-bullets-bullet-list '("♣" "♥" "♠" "♦" "♧" "♡" "♤" "♢"))
    (validate-setq org-bullets-bullet-list '("☯" "☉" "∞" "◉" "⊚" "☀" "☾" "☥"))
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode t)))

    ;; make available "org-bullet-face" such that I can control the font size individually
    (validate-setq org-bullets-face-name (quote org-bullet-face))
    (custom-set-faces '(org-bullet-face
                        ((t (:foreground "burlywood"
                                         :weight normal
                                         :height 1.6))))
                      ))
#+END_SRC

*** org-sticky-header

[[https://github.com/alphapapa/org-sticky-header][org-sticky-header]] shows off-screen Org heading at top of window.

#+BEGIN_SRC emacs-lisp
(use-package org-sticky-header
  :after org
  :demand t
  :config
  (setq-default org-sticky-header-full-path 'full
                org-sticky-header-outline-path-separator " / "))
#+END_SRC

*** ox.el

#+BEGIN_SRC emacs-lisp
(use-package ox
  :ensure org-plus-contrib
  :config
  (validate-setq org-export-with-smart-quotes t))
#+END_SRC

*** ox-pandoc

I’m using ox-pandoc to export org files to all formats Pandoc works with. It
only exports org files, in opposite of pandoc-mode, which exports from any
source format. The problem is that ox-pandoc needs considerably less
configuration and as I usually write everything in org-mode, no need to worry.
https://github.com/kawabata/ox-pandoc
http://www.rousette.org.uk/blog/archives/org-mode-and-pandoc/ Keeping a lab book
with org-mode http://informatica.boccaperta.com/m-x-emacs-ox-pandoc/

#+BEGIN_SRC emacs-lisp
(use-package ox-pandoc
  :after org-plus-contrib
  :demand t
  :config
  (validate-setq org-pandoc-options '((standalone . t))            ; default options for all output formats
                 org-pandoc-options-for-docx '((standalone . nil)) ; cancel above settings only for 'docx' format

                 org-pandoc-options-for-beamer-pdf '((latex-engine . "lualatex"))
                 org-pandoc-options-for-latex-pdf  '((latex-engine . "lualatex"))
                 ;;org-pandoc-options-for-latex-pdf '((latex-engine . "xelatex")
                 ;;                                   (template . "~/.pandoc/templates/memoir2.latex" ))
                 ;;org-pandoc-options-for-latex '((latex-engine . "xelatex")
                 ;;                               (template . "~/.pandoc/templates/memoir2.latex" ))

                 ;; Use external css for html5
                 ;; (let ((stylesheet (expand-file-name
                 ;;                    (locate-user-emacs-file "etc/pandoc.css"))))
                 ;;   (setq org-pandoc-options-for-html5
                 ;;         `((css . ,(concat "file://" stylesheet)))))
                 )
  )
#+END_SRC

*** org-babel

Babel is Org-mode’s ability to execute source code within Org-mode documents.

#+BEGIN_SRC emacs-lisp
(use-package ob
  :ensure org-plus-contrib
  :config
  (org-babel-do-load-languages
   (quote org-babel-load-languages)
   (quote ((calc . t)
           (clojure . t)
           (ditaa . t)
           (dot . t)
           (emacs-lisp . t)
           (gnuplot . t)
           (latex . t)
           (ledger . t)
           (octave . t)
           (org . t)
           (makefile . t)
           (plantuml . t)
           (python . t)
           (R . t)
           (ruby . t)
           (sh . t)
           (sqlite . t)
           (sql . t)
           ))))
#+END_SRC

** hydra
*** Main configuration

#+BEGIN_SRC emacs-lisp
(use-package hydra
  :config
  (setq lv-use-separator t)
  (set-face-attribute 'hydra-face-blue nil
                      :foreground "deep sky blue"
                      :weight 'bold))
#+END_SRC

*** hydra-zoom -> text size

#+BEGIN_SRC emacs-lisp
(defhydra hydra-zoom (global-map "<f2>")
  "zoom"
  ("g" text-scale-increase "in")
  ("l" text-scale-decrease "out")
  ("r" (text-scale-set 0) "reset")
  ("0" (text-scale-set 0) :bind nil :exit t)
  ("1" (text-scale-set 0) nil :bind nil :exit t))
#+END_SRC

** ivy
[[https://github.com/abo-abo/swiper][Ivy]] is a generic completion frontend for Emacs.

[[https://github.com/abo-abo/swiper][Swiper]] shows an overview during regex searching. It uses the /ivy/ back end for
the overview.

| Keybinding | Functions            | Result                               |
|------------+----------------------+--------------------------------------|
| =C-M-i=    | ivy-display-function | displays the function candidate list |

*** ivy

#+BEGIN_SRC emacs-lisp
(use-package swiper
  :delight ivy-mode nil ivy
  :demand t
  :bind (("C-c C-r"  . ivy-resume)
         ("C-s"      . swiper)
         :map ivy-minibuffer-map
         ("<return>" . ivy-alt-done)
         ("C-M-h"    . ivy-previous-line-and-call)
         ("C-:"      . ivy-dired)
         ("C-c o"    . ivy-occur)
         :map read-expression-map
         ("C-r"      . counsel-expression-history)
         )
  :config
  (ivy-mode 1)
  (validate-setq ivy-use-virtual-buffers t         ; list `recentf' and bookmarks as well
                 ivy-height 10
                 ivy-count-format "(%d/%d) "       ; counter
                 ivy-extra-directories nil         ; Do not show "./" and "../"
                 ivy-virtual-abbreviate 'full      ; Show full file path
                 ivy-re-builders-alist '((t . ivy--regex-plus))
                 ivy-use-ignore-default 'always    ; ignore buffers set in `ivy-ignore-buffers'
                 ivy-ignore-buffers                ; ignore some buffers in `ivy-switch-buffer'
                 '("company-statistics-cache.el" ".elfeed/index")
                 swiper-action-recenter t          ; always recenter when leaving swiper
                 )

  (defun ivy-dired ()
    (interactive)
    (if ivy--directory
        (ivy-quit-and-run
         (dired ivy--directory)
         (when (re-search-forward
                (regexp-quote
                 (substring ivy--current 0 -1)) nil t)
           (goto-char (match-beginning 0))))
      (user-error
       "Not completing files currently")))

  ;; Customize faces per mode
  (validate-setq ivy-switch-buffer-faces-alist
                 '((emacs-lisp-mode . swiper-match-face-1)
                   (dired-mode . ivy-subdir)
                   (org-mode . org-level-4)))
  )

;; Speed up my workflow with prearranged windows
;; (setq ivy-views '(("boccaperta + ba-server [–]"
;;                    (vert
;;                     (sexp (bookmark-jump "boccaperta"))
;;                     (sexp (bookmark-jump "ba-server"))))
;;                   ("desktop + ba-server [–]"
;;                    (vert
;;                     (sexp (bookmark-jump "desktop"))
;;                     (sexp (bookmark-jump "ba-server"))))))

;; Hydra bindings for ivy buffer
(use-package ivy-hydra
  :after ivy)

;; smex order selections accordingly to the most used ones
(use-package smex :after swiper)
#+END_SRC

*** counsel

#+BEGIN_SRC emacs-lisp
(use-package counsel
  :delight counsel-mode nil counsel
  :after swiper
  :bind (("M-x"     . counsel-M-x)
         ("C-x C-f" . counsel-find-file)
         ("<f1> f"  . counsel-describe-function)
         ("<f1> v"  . counsel-describe-variable)
         ("<f1> l"  . counsel-load-library)
         ;;("<f2> i"  . counsel-info-lookup-symbol)
         ;;("<f2> u"  . counsel-unicode-char)
         ("C-r"     . counsel-grep-or-swiper)
         ("C-c g"   . counsel-git)
         ("C-c j"   . counsel-git-grep)
         ("C-c k"   . counsel-rg)
         ("C-x l"   . counsel-locate)
         ("C-c r"   . counsel-linux-app)
         ("C-x i"   . counsel-imenu)
         ("M-y"     . counsel-yank-pop))
  :config
  (validate-setq  counsel-mode-override-describe-bindings t
                  counsel-find-file-at-point t
                  counsel-find-file-ignore-regexp
                  (concat
                   "\\(?:\\`[#.]\\)"              ; file names beginning with # or .
                   "\\|\\(?:\\`.+?[#~]\\'\\)"     ; file names ending with # or ~
                   )))
#+END_SRC

** projectile

[[https://github.com/bbatsov/projectile][Projectile]] is a project interaction library for Emacs. Its goal is to provide a
nice set of features operating on a project level without introducing external
dependencies (when feasible). For instance - finding project files has a
portable implementation written in pure Emacs Lisp without the use of GNU find
(but for performance sake an indexing mechanism backed by external commands
exists as well).

[[https://github.com/nex3/perspective-el][Perspective]] provides tagged workspaces in Emacs, similar to workspaces in
windows managers such as Awesome and XMonad (and somewhat similar to multiple
desktops in Gnome or Spaces in OS X).

Commands are all prefixed by ~C-x x~

| Key        | Command             | What it does                                                    |
|------------+---------------------+-----------------------------------------------------------------|
| s          | persp-switch        | Query a perspective to switch or create                         |
| k          | persp-remove-buffer | Query a buffer to remove from current perspective               |
| c          | persp-kill          | Query a perspective to kill                                     |
| r          | persp-rename        | Rename current perspective                                      |
| a          | persp-add-buffer    | Query an open buffer to add to current perspective              |
| A          | persp-set-buffer    | Add buffer to current perspective and remove it from all others |
| i          | persp-import        | Import a given perspective from another frame.                  |
| n, <right> | persp-next          | Switch to next perspective                                      |
| p, <left>  | persp-prev          | Switch to previous perspective                                  |

#+BEGIN_SRC emacs-lisp
(use-package projectile
  :config
  (validate-setq projectile-enable-caching t
                 projectile-completion-system 'ivy
                 projectile-switch-project-action 'projectile-dired
                 projectile-mode-line '(:eval (format
                                               " :%s:" (projectile-project-name))))
  (projectile-global-mode))

(use-package perspective
  :demand t
  :config
  (persp-mode))

(use-package persp-projectile
  :config
  (define-key projectile-mode-map (kbd "s-s")
    'projectile-persp-switch-project))

(use-package counsel-projectile
  :config
  (counsel-projectile-on))

(use-package ibuffer-projectile)
#+END_SRC

** magit

#+BEGIN_SRC emacs-lisp
(use-package magit
  :config
  (setq magit-completing-read-function 'ivy-completing-read
        magit-display-buffer-function 'magit-display-buffer-fullframe-status-topleft-v1))
#+END_SRC

* Base packages
** ace-window

#+BEGIN_SRC emacs-lisp
(use-package ace-window)
#+END_SRC

** alert

#+BEGIN_SRC emacs-lisp
(use-package alert
  :demand t)
#+END_SRC

** anzu
anzu provides a minor mode which displays current match and total matches
information in the mode-line in various search modes.

#+BEGIN_SRC emacs-lisp
(use-package anzu
  :delight anzu-mode " Ⓩ"
  :bind (("M-%" . anzu-query-replace)
         ("C-M-%" . anzu-query-replace-regexp))
  :config
  (global-anzu-mode +1)
  (setq-default anzu-cons-mode-line-p nil
                anzu-replace-to-string-separator "  "))
#+END_SRC

** async

Simple library for asynchronous processing in Emacs

#+BEGIN_SRC emacs-lisp
(use-package async
  :demand t
  :config
  (async-bytecomp-package-mode t))
#+END_SRC

** avy
avy is a GNU Emacs package for jumping to visible text using a char-based
decision tree. See also ace-jump-mode and vim-easymotion - avy uses the same
idea.

#+BEGIN_SRC emacs-lisp
(use-package avy
  :bind (("C-:" . avy-goto-char)
         ("C-'" . avy-goto-char-2)
         ("M-g f" . avy-goto-line)
         ("M-g w" . avy-goto-word-1)
         ("M-g e" . avy-goto-word-0))
  :config
  (setq avy-background t
        avy-all-windows t
        avy-style 'at-full
        avy-case-fold-search nil)
  (set-face-attribute 'avy-lead-face nil
                      :foreground "gold"
                      :weight 'bold
                      :background nil)
  (set-face-attribute 'avy-lead-face-0 nil
                      :foreground "deep sky blue"
                      :weight 'bold
                      :background nil))
#+END_SRC

** beacon
Never lose your cursor again. Whenever the window scrolls a light will shine on
top of your cursor so you know where it is.

#+BEGIN_SRC emacs-lisp
(use-package beacon
  :delight beacon-mode nil beacon
  :demand t
  :config
  (beacon-mode t)
  (setq beacon-push-mark 35
        beacon-color "#666600"))
#+END_SRC

** bookmarks
Bookmarks to files and directories

#+BEGIN_SRC emacs-lisp
(use-package bookmark
  :config
  (setq bookmark-completion-ignore-case nil)
  (bookmark-maybe-load-default-file))
#+END_SRC

** company

Company is a text completion framework for Emacs. The name stands for “complete
anything”. It uses pluggable back-ends and front-ends to retrieve and display
completion candidates.

It comes with several back-ends such as Elisp, Clang, Semantic, Eclim, Ropemacs,
Ispell, CMake, BBDB, Yasnippet, dabbrev, etags, gtags, files, keywords and a few
others.

The CAPF back-end provides a bridge to the standard
completion-at-point-functions facility, and thus works with any major mode that
defines a proper completion function.

#+BEGIN_SRC emacs-lisp
(use-package company
  :delight company-mode " Ⓐ"
  :bind (("C-c /" . company-files))                      ; force complete file names on "C-c /" key
  :config
  (add-hook 'after-init-hook 'global-company-mode)
  (setq company-tooltip-limit 20                       ; bigger popup window
        company-tooltip-align-annotations 't           ; align annotations to the right tooltip border
        company-idle-delay .3                          ; decrease delay before autocompletion popup shows
        company-begin-commands '(self-insert-command)) ; start autocompletion only after typing
  )

(use-package company-statistics
  :after company
  :config
  ;;(setq company-statistics-file
  ;;  (concat tmp-directory "company-statistics-cache.el"))
  (add-hook 'after-init-hook 'company-statistics-mode))

(use-package slime-company
  :after company
  :config
  (slime-setup '(slime-fancy slime-company)))

(use-package company-ansible
  :after company
  :config
  (add-to-list 'company-backends 'company-ansible))

(use-package company-math
  :after company
  :config
  (add-to-list 'company-backends '((company-math-symbols-unicode)
                                   (company-math-symbols-latex)
                                   (company-latex-commands)))
  (setq company-tooltip-align-annotations t))
#+END_SRC

** crux

[[https://github.com/bbatsov/crux][crux]] is a Collection of Ridiculously Useful eXtensions for Emacs. crux bundles a
few useful interactive commands to enhance your overall Emacs experience.

#+BEGIN_SRC emacs-lisp
(use-package crux
  :demand t
  :bind (("C-a"   . crux-move-beginning-of-line)
         ("C-c o" . crux-open-with)))
#+END_SRC

** diff-hl (FIXME)

[[https://github.com/dgutov/diff-hl][diff-hl-mode]] highlights uncommitted changes on the left side of the window,
allows you to jump between and revert them selectively.

*Keybindings*

| *function*             | *Keybinding* |
|------------------------+--------------|
| diff-hl-diff-goto-hunk | C-x v =      |
| diff-hl-revert-hunk    | C-x v n      |
| diff-hl-previous-hunk  | C-x v [      |
| diff-hl-next-hunk      | C-x v ]      |

#+BEGIN_SRC emacs-lisp
(use-package diff-hl
  :disabled t
  :config
  (global-diff-hl-mode)
  (diff-hl-flydiff-mode)
  (add-hook 'dired-mode-hook 'diff-hl-dired-mode)
  (add-hook 'magit-post-refresh-hook 'diff-hl-magit-post-refresh))
#+END_SRC

** easy-kill

[[https://github.com/leoliu/easy-kill][Provide commands]] ~easy-kill~ and ~easy-mark~ to let users kill or mark things
easily.

| *Key* | *Command* | *Action*                                   |
|-------+-----------+--------------------------------------------|
| M-w w |           | save word at point                         |
| M-w s |           | save sexp at point                         |
| M-w l |           | save list at point (enclosing sexp)        |
| M-w d |           | save defun at point                        |
| M-w D |           | save current defun name                    |
| M-w f |           | save file at point                         |
| M-w b |           | save buffer-file-name or default-directory |
|       |           |                                            |

The following keys modify the selection:

| *Key* | *Command* | *Action*                                                                                                    |
|-------+-----------+-------------------------------------------------------------------------------------------------------------|
| @     |           | append selection to previous kill and exit. For example, M-w d @ will append current function to last kill. |
| C-w   |           | kill selection and exit                                                                                     |
| +, -  |           | and 1..9: expand/shrink selection                                                                           |
| 0     |           | shrink the selection to the initial size i.e. before any expansion                                          |
| C-SPC |           | turn selection into an active region                                                                        |
| C-g   |           | abort                                                                                                       |
| ?     |           | help                                                                                                        |

#+BEGIN_SRC emacs-lisp
(use-package easy-kill
  :bind (([remap kill-ring-save] . easy-kill)
         ([remap mark-sexp] . easy-mark)))
#+END_SRC

** ediff (FIXME)

The default ~ediff-mode~ isn't quite optimized. The following settings are taken
from [[http://oremacs.com/2015/01/17/setting-up-ediff/][Oremacs]].

Just a note about the ~--text~ in the ~ediff-diff-options~: it will force the
GNU utility ~diff~, which is called by ~ediff~, to treat the input files as text
files. This is necessary as the utility ~diff~ doesn't understand unicode, and
sees unicode encoded files as binary files ([[http://stackoverflow.com/questions/10503937/emacs-ediff-foreign-character-sets-and-text-file-encodings][stackoverflow]]).

#+BEGIN_SRC emacs-lisp
(use-package ediff
  :ensure nil
  :config
  (csetq ediff-window-setup-function 'ediff-setup-windows-plain)
  (csetq ediff-split-window-function 'split-window-horizontally)
  (csetq ediff-diff-options "-w --text")

  (defun ora-ediff-prepare-buffer ()
    (when (memq major-mode '(org-mode emacs-lisp-mode))
      (outline-show-all)))

  (add-hook 'ediff-prepare-buffer-hook 'ora-ediff-prepare-buffer)

  (defun ora-ediff-jk ()
    (define-key ediff-mode-map "j" 'ediff-next-difference)
    (define-key ediff-mode-map "k" 'ediff-previous-difference))

  (add-hook 'ediff-keymap-setup-hook #'ora-ediff-jk)

  ;;;###autoload
  (defun ora-ediff-hook ())

  ;;;###autoload
  (defun ora-diff-hook ())

  (mapc
   (lambda (k)
     (define-key diff-mode-map k
       `(lambda () (interactive)
          (if (region-active-p)
              (replace-regexp "^." ,k nil
                              (region-beginning)
                              (region-end))
            (insert ,k)))))
   (list " " "-" "+"))
  )
#+END_SRC

** eyebrowse

#+BEGIN_SRC emacs-lisp
(use-package eyebrowse
  :demand t
  :config
  (eyebrowse-mode t))
#+END_SRC

** expand-region

[[https://github.com/magnars/expand-region.el][Expand region]] increases the selected region by semantic units. Just keep
pressing the key until it selects what you want.

#+BEGIN_SRC emacs-lisp
(use-package expand-region)
#+END_SRC

** fill-column-indicator

Toggle the vertical column that indicates the fill threshold.

#+BEGIN_SRC emacs-lisp
(use-package fill-column-indicator
  :disabled t
  :config
  (validate-setq fci-rule-width 1
                 fci-rule-color "#5d478b"
                 fci-rule-column 80)
  (define-globalized-minor-mode global-fci-mode fci-mode
    (lambda ()
      (fci-mode 1)))
  (global-fci-mode 1))
#+END_SRC

** fixmee

Fixmee-mode tracks fixme notices in code comments, highlights them, ranks them
by urgency, and lets you navigate to them quickly.

It requires [[https://github.com/rolandwalker/button-lock][button-lock.el]], which is installed by ~wiki-nav~.

*Patterns* - The following fixme patterns are supported by default:

@@@
XXX         ; only this one is case-sensitive
todo
fixme

*Key bindings*

| Keystrokes | 	Function                                             |
|------------+----------------------------------------------------------|
| C-c f      | fixmee-goto-nextmost-urgent                              |
| C-c F      | fixmee-goto-prevmost-urgent                              |
| C-c v      | fixmee-view-listing                                      |
| M-n        | fixmee-goto-next-by-position ; only when the point is    |
| M-p        | fixmee-goto-previous-by-position ; inside a fixme notice |

#+BEGIN_SRC emacs-lisp
(use-package wiki-nav
  :delight button-lock-mode nil button-lock
  :config
  (global-wiki-nav-mode 1))

(use-package fixmee
  :delight fixmee-mode nil fixmee
  :after wiki-nav
  :config
  (global-fixmee-mode 1))
#+END_SRC

** flx
 Fuzzy matching for Emacs ... a la Sublime Text. It is needed for fuzzy matching
 in swiper + avy.

#+BEGIN_SRC emacs-lisp
(use-package flx)
#+END_SRC

** flycheck

#+BEGIN_SRC emacs-lisp
(use-package flycheck
  :init (global-flycheck-mode)
  :config
  (setq flycheck-mode-line
        '(:eval
          (pcase flycheck-last-status-change
            (`not-checked nil)
            (`no-checker (propertize " -" 'face 'warning))
            (`running (propertize " ✷" 'face 'success))
            (`errored (propertize " ☠" 'face 'error))
            (`finished
             (let* ((error-counts (flycheck-count-errors flycheck-current-errors))
                    (no-errors (cdr (assq 'error error-counts)))
                    (no-warnings (cdr (assq 'warning error-counts)))
                    (face (cond (no-errors 'error)
                                (no-warnings 'warning)
                                (t 'success))))
               (propertize (format " %s/%s" (or no-errors 0) (or no-warnings 0))
                           'face face)))
            (`interrupted " -")
            (`suspicious '(propertize " ?" 'face 'warning)))))
  )
#+END_SRC

*** Linting prose

[[http://proselint.com/][Proselint]] checks the text for common errors. This creates a flycheck checker
that runs proselint in texty buffers and displays the errors.

#+BEGIN_SRC emacs-lisp
(flycheck-define-checker proselint
                         "A linter for prose."
                         :command ("proselint" source-inplace)
                         :error-patterns
                         ((warning line-start (file-name) ":" line ":" column ": "
                                   (id (one-or-more (not (any " "))))
                                   (message (one-or-more not-newline)
                                            (zero-or-more "\n" (any " ") (one-or-more not-newline)))
                                   line-end))
                         :modes (text-mode markdown-mode gfm-mode org-mode))

(add-to-list 'flycheck-checkers 'proselint)
#+END_SRC

** graphviz-dot-mode

[[https://github.com/ppareit/graphviz-dot-mode][graphviz-dot-mode]] is a mode for the DOT language, used by =graphviz=.

#+BEGIN_SRC emacs-lisp
(use-package graphviz-dot-mode)
#+END_SRC

** neotree

#+BEGIN_SRC emacs-lisp
(use-package neotree
  :bind (("<f6>" . neotree-toggle))
  :config
  (validate-setq neo-theme (if window-system 'icons 'arrow)))
#+END_SRC

** page-break-lines

Better looking break lines.

#+BEGIN_SRC emacs-lisp
(use-package page-break-lines
  :delight page-break-lines-mode nil page-break-lines
  :init (global-page-break-lines-mode))
#+END_SRC

** paradox
Project for modernizing Emacs’ Package Menu. With package ratings, usage
statistics, customizability, and more.

#+BEGIN_SRC emacs-lisp
(use-package paradox
  :config
  (setq-default paradox-column-width-package 27
                paradox-column-width-version 13
                paradox-execute-asynchronously t
                paradox-github-token t
                paradox-hide-wiki-packages t)
  (set-face-attribute 'paradox-homepage-button-face nil :italic nil)
  (remove-hook 'paradox--report-buffer-print 'paradox-after-execute-functions))
#+END_SRC

** pass

#+BEGIN_SRC emacs-lisp
(use-package pass)
#+END_SRC

** pcache

[[https://github.com/sigma/pcache][pcache]] provides a persistent way of caching data, in a hashtable-like structure.
It relies on `eieio-persistent' in the backend, so that any object that can be
serialized by EIEIO can be stored with pcache.

[[https://github.com/rolandwalker/persistent-soft][persistent-soft]] is a wrapper around pcache.el, providing "soft" fetch and store
routines which never throw an error, but instead return nil on failure.

#+BEGIN_SRC emacs-lisp
(use-package pcache
  :demand t)

(use-package persistent-soft
  :demand t
  :after pcache)
#+END_SRC

** pdf-tools

#+BEGIN_SRC emacs-lisp
(use-package pdf-tools
  :config
  (pdf-tools-install)
  (setq-default pdf-view-display-size 'fit-page)
  (bind-keys :map pdf-view-mode-map
             ("<s-spc>" .  pdf-view-scroll-down-or-next-page)
             ("g"  . pdf-view-first-page)
             ("G"  . pdf-view-last-page)
             ("l"  . image-forward-hscroll)
             ("h"  . image-backward-hscroll)
             ("j"  . pdf-view-next-page)
             ("k"  . pdf-view-previous-page)
             ("e"  . pdf-view-goto-page)
             ("u"  . pdf-view-revert-buffer)
             ("al" . pdf-annot-list-annotations)
             ("ad" . pdf-annot-delete)
             ("aa" . pdf-annot-attachment-dired)
             ("am" . pdf-annot-add-markup-annotation)
             ("at" . pdf-annot-add-text-annotation)
             ("y"  . pdf-view-kill-ring-save)
             ("i"  . pdf-misc-display-metadata)
             ("s"  . pdf-occur)
             ("b"  . pdf-view-set-slice-from-bounding-box)
             ("r"  . pdf-view-reset-slice)))

(use-package org-pdfview
  :after pdf-tools)
#+END_SRC

** persistent-scratch

[[https://github.com/Fanael/persistent-scratch][persistent-scratch]] preserves the state of scratch buffers accross Emacs sessions
by saving the state to and restoring it from a file.

#+BEGIN_SRC emacs-lisp
(use-package persistent-scratch
  :config
  (persistent-scratch-setup-default))
#+END_SRC

** recentf

Recentf is a minor mode that builds a list of recently opened files. This list
is automatically saved across Emacs sessions. You can access the list through a
menu. Here it's set to work together with ivy-switch-buffer.

[[https://github.com/abo-abo/swiper/releases][source 1]] - [[https://www.masteringemacs.org/article/find-files-faster-recent-files-package][source 2]] - [[http://emacsredux.com/blog/2013/04/05/recently-visited-files/][source 3]]

#+BEGIN_SRC emacs-lisp
(use-package recentf
  :config
  (recentf-mode t)
  (validate-setq recentf-max-saved-items 10
                 recentf-exclude '("COMMIT_MSG"
                                   "COMMIT_EDITMSG"
                                   "github.*txt$"
                                   ".*png$")))
#+END_SRC

** ripgrep

Use ripgrep in Emacs.

#+BEGIN_SRC emacs-lisp
(use-package rg)
#+END_SRC

** uniquify

Nicer naming of buffers for files with identical names. [[https://github.com/purcell/emacs.d/blob/master/lisp/init-uniquify.el][source]]

#+BEGIN_SRC emacs-lisp
(use-package uniquify
  :ensure nil
  :config
  (setq uniquify-buffer-name-style 'reverse
        uniquify-separator " • "
        uniquify-after-kill-buffer-p t       ; rename after killing uniquified
        uniquify-ignore-buffers-re "^\\*"))  ; don't muck with special buffers
#+END_SRC

** undo-tree

=C-x u= to ~undo-tree-visualize~
C-/ undo
S-C-/ redo

#+BEGIN_SRC emacs-lisp
(use-package undo-tree
  :delight undo-tree-mode nil undo-tree
  :init
  (global-undo-tree-mode))
#+END_SRC

** volatile-highlights

It provides minor mode volatile-highlights-mode, which brings visual feedback
to some operations (eg. pasting, etc) by highlighting portions relating to the
operations.

#+BEGIN_SRC emacs-lisp
(use-package volatile-highlights
  :config
  (volatile-highlights-mode t))
#+END_SRC

** window-numbering

Numbered window shortcuts for Emacs
Enable window-numbering-mode and use M-1 through M-0 to navigate.

The defun *window-numbering-install-mode-line* set below is to make
window-numbering work together with spaceline, overriding its own modeline
display function.

#+BEGIN_SRC emacs-lisp
(use-package window-numbering
  :init
  (window-numbering-mode)
  :config
  (defun window-numbering-install-mode-line (&optional position)
    "Do nothing."))
#+END_SRC

** wgrep

[[https://github.com/mhayashi1120/Emacs-wgrep][wgrep]] is a writable grep buffer and apply the changes to files

You can edit the text in the grep buffer after typing ~C-c C-p~. After that the
changed text is highlighted. The following keybindings are defined:

| Key      | Action                                              |
|----------+-----------------------------------------------------|
| C-c C-e: | Apply the changes to file buffers.                  |
| C-c C-u: | All changes are unmarked and ignored.               |
| C-c C-d: | Mark as delete to current line (including newline). |
| C-c C-r: | Remove the changes in the regiond                   |
| C-c C-p: | Toggle read-only area.                              |
| C-c C-k: | Discard all changes and exit.                       |
| C-x C-q: | Exit wgrep mode.                                    |

#+BEGIN_SRC emacs-lisp
(use-package wgrep
  :config
  (progn
    (with-eval-after-load 'grep
      (bind-key "C-x C-q" #'wgrep-change-to-wgrep-mode grep-mode-map))

    (with-eval-after-load 'wgrep
      (bind-key "C-c C-c" #'wgrep-finish-edit grep-mode-map))))
#+END_SRC

** which-key

Displays the key bindings following your currently entered incomplete command (a
prefix) in a popup.

#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :delight which-key-mode nil which-key
    :init (which-key-mode)
    :config (setq which-key-idle-delay 0.5
                  which-key-key-replacement-alist
                  '(("<\\([[:alnum:]-]+\\)>" . "\\1")
                    ("up"                  . "↑")
                    ("right"               . "→")
                    ("down"                . "↓")
                    ("left"                . "←")
                    ("DEL"                 . "⌫")
                    ("deletechar"          . "⌦")
                    ("RET"                 . "⏎"))))
#+END_SRC

* Tools
** Dired - Directory Editing and Navigation
:PROPERTIES:
:CUSTOM_ID: dired
:END:

The best file-manager you can find ;). The keybinding below are to be used
inside a dired buffer.

Good dired tips can be found on [[http://ergoemacs.org/emacs/emacs_dired_tips.html][Xah Lee's blog]].

*** Keybindings

| *Key*     | *Command*                              | *Description*                                   |
|---------+--------------------------------------+-----------------------------------------------|
| ~^~       | =dired-up-directory=                   | go to parent directory                        |
| ~n~       | =dired-next-line=                      | go next line                                  |
| ~p~       | =dired-previous-line=                  | go prevous line                               |
| ~m~       | =dired-mark=                           | mark files/dir                                |
| ~u~       | =dired-unmark=                         | unmark files/dir                              |
| ~U~       | =dired-unmark-all-marks=               | unmark all marked                             |
| ~% m~     | =dired-mark-files-regexp=              | mark by pattern (regex)                       |
| ~!~       | =dired-do-shell-command=               | run shell command                             |
| ~&~       | =dired-do-async-shell-command=         | run shell commands asynchronously             |
| ~C~       | =dired-do-copy=                        | Copy file                                     |
| ~R~       | =dired-do-rename=                      | Rename/move file                              |
| ~D~       | =dired-do-delete=                      | Delete file or directory                      |
| ~c~       | =dired-do-compress-to=                 | compress marked files/dir. Details in [[http://oremacs.com/2015/10/23/dired-compress/][oremacs]] |
| ~Z~       | =dired-do-compress=                    | compress/decompress marked files              |
| ~z~       | =diredp-compress-this-file=            | compress/decompress file on cursor line       |
| ~/~       | =dired-narrow=                         | filter files                                  |
| ~a~       | =dired-find-alternate-file=            | open directory in the current buffer          |
| ~o~       | =dired-find-file-other-windows=        | open file on another window                   |
| ~F~       | =dired-do-find-marked-files=           | open all marked files                         |
| ~*.~      | =diredp-mark/unmark-extension=         | mark files by extension                       |
| ~+~       | =dired-create-directory=               | create a new directory                        |
| ~P~       | =peep-dired=                           | preview file at point                         |
| ~S~       | =dired-quick-sort=                     | sort files by name, type, size                |
| ~_~       | =xah-dired-rename-space-to-underscore= | rename file from space to underscore          |
| ~-~       | =xah-dired-rename-space-to-hyphen=     | rename file from space to hyphen              |
| ~g~       | =revert-buffer=                        | refresh dir listing                           |
| ~C-x C-p~ | =dired-toggle-read-only=               | make dired buffer writable                    |
| ~C-c C-c~ |                                      | apply the modifications on writable buffer    |
| ~C-c ESC~ |                                      | discard the modifications                     |
| ~C-u s~   | =dired-sort-toggle-or-edit=            | change `ls` switches on the fly               |

*** Main configuration

#+BEGIN_SRC emacs-lisp
(use-package dired
  :ensure nil
  :config
  (validate-setq
   ;;ls-lisp-dirs-first t
   dired-listing-switches
   "-lhFG1v --group-directories-first"  ; add ls switches

   dired-ls-F-marks-symlinks t           ; -F marks links with @
   dired-dwim-target t                   ; when in a split windows, use other pane as target
   dired-recursive-copies 'always        ; copy dirs recursively
   dired-recursive-deletes 'top          ; ask before deleting dirs recursively
   delete-by-moving-to-trash t           ; don't delete files outright
   dired-auto-revert-buffer t            ; revert buffers on revisiting
   )

  (setq wdired-allow-to-change-permissions t)  ; allow editing file permissions

  (add-hook 'dired-mode-hook #'toggle-truncate-lines)   ; handle long file names
  (add-hook 'dired-mode-hook 'auto-revert-mode)         ; auto refresh dired when file changes
  )

;; Built into Emacs, it provides chgrp, chown, chmod and other functionalities
(use-package dired-aux :ensure nil)
#+END_SRC

*** dired-x

#+BEGIN_SRC emacs-lisp
(use-package dired-x
  :ensure nil
  :demand t
  :bind ("C-x C-j" . dired-jump)
  :config
  (validate-setq
   dired-clean-up-buffers-too t)          ; kill buffer of files/dir that are deleted in dired

  (add-hook 'dired-mode-hook (lambda () (dired-omit-mode)))
  (add-to-list 'dired-omit-extensions ".DS_Store"))
#+END_SRC

*** dired-plus

#+BEGIN_SRC emacs-lisp
(use-package dired+
  :demand t
  :config
  (validate-setq
   diredp-hide-details-initially-flag t
   diredp-hide-details-propagate-flag t)

  (diredp-toggle-find-file-reuse-dir 1)        ; use single buffer for all dired navigation
  (diredp-make-find-file-keys-reuse-dirs)

  ;; assign h and l to be used on dired mode (evil keys)
  (eval-after-load 'dired
    '(evil-define-key 'normal dired-mode-map
       (kbd "h") 'diredp-up-directory-reuse-dir-buffer
       (kbd "l") 'diredp-find-file-reuse-dir-buffer))

  (customize-set-variable 'diredp-hide-details-initially-flag nil) ; keep showing info
  )
#+END_SRC

*** dired-async

Use async in everything in dired.

#+BEGIN_SRC emacs-lisp
(use-package dired-async
  :after async
  :ensure nil
  :demand t
  :config
  (dired-async-mode t)
  (autoload 'dired-async-mode "dired-async.el" nil t))
#+END_SRC

*** dired-quick-sort

[[https://gitlab.com/xuhdev/dired-quick-sort][dired-quick-sort]] provides persistent quick sorting of Dired buffers in various
ways with hydra.

#+BEGIN_SRC emacs-lisp
(use-package dired-quick-sort
  :demand t
  :config
  (dired-quick-sort-setup))
#+END_SRC

*** dired-hacks

[[https://github.com/Fuco1/dired-hacks][dired-hacks]] is a collection of useful dired additions.

**** dired-narrow

Dired narrowing allows filtering dired results dynamically with a filter. Very
cool.

#+BEGIN_SRC emacs-lisp
(use-package dired-narrow
  :bind (:map dired-mode-map
              ("/" . dired-narrow)))
#+END_SRC

**** dired-rainbow

#+BEGIN_SRC emacs-lisp
(use-package dired-rainbow
  :demand t)
#+END_SRC

*** peep-dired

[[https://github.com/asok/peep-dired][peep-dired]] is a convienent way to look up file contents in other window while
browsing directory in dired.

#+BEGIN_SRC emacs-lisp
(use-package peep-dired
  :bind (:map dired-mode-map
              ("P" . peep-dired))
  :config
  (validate-setq peep-dired-ignored-extensions '("mkv" "iso" "mp4")))
#+END_SRC

*** Icons in Dired buffers (and other buffers)

#+BEGIN_SRC emacs-lisp
(use-package all-the-icons-dired
  :after all-the-icons
  :init
  (add-hook 'dired-mode-hook 'all-the-icons-dired-mode))
#+END_SRC

*** Rename file from space to hyphen/underscore

Here's a command that rename files by replacing space to underscore _ or hyphen -.

In dired, just press a key, then the file under cursor (or marked files) will be
renamed with all space replaced to underscore.

#+BEGIN_SRC emacs-lisp
(defun xah-dired-rename-space-to-underscore ()
  "In dired, rename current or marked files by replacing space to underscore _.
If not in `dired', do nothing.
URL `http://ergoemacs.org/emacs/elisp_dired_rename_space_to_underscore.html'
Version 2017-01-02"
  (interactive)
  (require 'dired-aux)
  (if (equal major-mode 'dired-mode)
      (progn
        (mapc (lambda (x)
                (when (string-match " " x )
                  (dired-rename-file x (replace-regexp-in-string " " "_" x) nil)))
              (dired-get-marked-files ))
        (revert-buffer))
    (user-error "Not in dired.")))

(defun xah-dired-rename-space-to-hyphen ()
  "In dired, rename current or marked files by replacing space to hyphen -.
If not in `dired', do nothing.
URL `http://ergoemacs.org/emacs/elisp_dired_rename_space_to_underscore.html'
Version 2016-12-22"
  (interactive)
  (require 'dired-aux)
  (if (equal major-mode 'dired-mode)
      (progn
        (mapc (lambda (x)
                (when (string-match " " x )
                  (dired-rename-file x (replace-regexp-in-string " " "_" x) nil)))
              (dired-get-marked-files ))
        (revert-buffer))
    (user-error "Not in dired")))
#+END_SRC

*** Calculate size of directory

The title says it all. It is originally from the [[https://www.emacswiki.org/emacs/DiredGetFileSize][Wiki]] but I found it [[https://oremacs.com/2015/01/12/dired-file-size/][here]].

#+BEGIN_SRC emacs-lisp
(defun dired-get-size ()
  (interactive)
  (let ((files (dired-get-marked-files)))
    (with-temp-buffer
      (apply 'call-process "/usr/bin/du" nil t nil "-sch" files)
      (message
       "Size of all marked files: %s"
       (progn
         (re-search-backward "\\(^[ 0-9.,]+[A-Za-z]+\\).*total$")
         (match-string 1))))))
#+END_SRC

** IRC (Internet Relay Chat)
IRC is a great way to hang out with other Emacs geeks. I use ERC for that and
the configuration here is adapted from [[https://github.com/bbatsov/prelude/blob/master/modules/prelude-erc.el][Prelude]].

#+BEGIN_SRC emacs-lisp
(use-package erc
  :config
  (progn
    (erc-track-mode t)                      ; track activities on chats
    (erc-truncate-mode +1)                  ; truncate long irc buffers
    (erc-spelling-mode 1)                   ; enable spell checking

    (setq erc-interpret-mirc-color t        ; interpret mIRC-style color commands in IRC chats
          erc-kill-buffer-on-part t         ; kill buffer for channels after /part
          erc-kill-queries-on-quit t        ; kill buffer for private queries after quitting the server
          erc-kill-server-buffer-on-quit t  ; kill buffer for server messages after quitting the server
          erc-query-display 'buffer         ; open query buffers in the current window
          erc-save-buffer-on-part t         ; logging

          ;; autoaway setup
          erc-auto-discard-away t
          erc-autoaway-idle-seconds 600
          erc-autoaway-use-emacs-idle t

          erc-server-coding-system '(utf-8 . utf-8) ; utf-8 always and forever

          erc-track-exclude-types '("JOIN" "NICK" "PART" "QUIT" "MODE"
                                    "324" "329" "332" "333" "353" "477") ; exclude these from tracking
          erc-hide-list '("JOIN" "PART" "QUIT" "NICK")  ; doesn't show any of these
          )

  ;; logging
  ;; (setq erc-log-channels-directory "~/.erc/logs/")

  ;; (if (not (file-exists-p erc-log-channels-directory))
  ;;     (mkdir erc-log-channels-directory t))

  (defvar erc-notify-nick-alist nil
    "Alist of nicks and the last time they tried to trigger a
  notification")

  (defvar erc-notify-timeout 10
    "Number of seconds that must elapse between notifications from
  the same person.")

  (defun erc-notify-allowed-p (nick &optional delay)
    "Return non-nil if a notification should be made for NICK.
  If DELAY is specified, it will be the minimum time in seconds
  that can occur between two notifications.  The default is
  `erc-notify-timeout'."
    (unless delay (setq delay erc-notify-timeout))
    (let ((cur-time (time-to-seconds (current-time)))
          (cur-assoc (assoc nick erc-notify-nick-alist))
          (last-time nil))
      (if cur-assoc
          (progn
            (setq last-time (cdr cur-assoc))
            (setcdr cur-assoc cur-time)
            (> (abs (- cur-time last-time)) delay))
        (push (cons nick cur-time) erc-notify-nick-alist)
        t)))

  (defun start-irc ()
    "Connect to IRC."
    (interactive)
    (when (y-or-n-p "Do you want to start IRC? ")
      (erc :server "irc.freenode.net"
           :port 6667
           :nick rubens)))

  ;; (defun erc-start-or-switch ()
  ;;   "Connect to ERC, or switch to last active buffer"
  ;;   (interactive)
  ;;   (if (get-buffer "irc.freenode.net:6667")  ; ERC already active?
  ;;       (erc-track-switch-buffer 1)           ; yes: switch to last active

  ;;     (when (y-or-n-p "Start ERC? ")          ; no: maybe start ERC
  ;;       (erc :server "irc.freenode.net"
  ;;            :port 6667
  ;;            :nick "rsouza"))))

  (defun filter-server-buffers ()
    (delq nil
          (mapcar
           (lambda (x) (and (erc-server-buffer-p x) x))
           (buffer-list))))

  (defun stop-irc ()
    "Disconnects from all irc servers"
    (interactive)
    (dolist (buffer (filter-server-buffers))
      (message "Server buffer: %s" (buffer-name buffer))
      (with-current-buffer buffer
        (erc-quit-server "Asta la vista"))))

  (setq erc-autojoin-channels-alist '(("freenode.net"
                                       "#org-mode"
                                       "#hacklabto"
                                       "#emacs"
                                       "#itpug-soci")))

  (require 'erc-log)
  (require 'erc-notify)
  (require 'erc-spelling)
  (require 'erc-autoaway)
  ))
#+END_SRC

** Spell and grammar checking

Emacs can help you writing better...I know, I know, this is relative, but the
tools here will try to help you with the language, at least ;)

Reading these articles will better explain the idea: [[https://joelkuiper.eu/spellcheck_emacs][Joel Kuiper's spellcheck emacs]]
and [[http://matt.might.net/articles/shell-scripts-for-passive-voice-weasel-words-duplicates/][Matt Might's weasel words]].

*** flyspell

It activates Spell Checking by default. Also uses hunspell instead of ispell as
corrector.

| *Key binding*                | *Command* | *Result*                        |
|----------------------------+---------+-------------------------------|
| flyspell-popup-correct     | =C-;=     | spell-check the word on point |
| flyspell-goto-next-error   | =C-,=     | got to the next error         |
| flyspell-auto-correct-word | =C-M-i=   | auto-correct the word         |
| flyspell-buffer            | =S s b=   | check the whole buffer        |
| flyspell-lazy-check-buffer | =S s z=   | check the whole buffer faster |
| switch-dictionary          | =S s d=   | switch dictionaries (GB-IT)   |

**** hunspell setup

1. Install Hunspell from your distribution package manager or use [[http://hunspell.sourceforge.net/][Hunspell page]]
2. Download the language dictionary extension from [[http://extensions.libreoffice.org/extension-center][Libreoffice]] or  [[http://extensions.openoffice.org/en/project/english-dictionaries-apache-openoffice][Openoffice]]
3. It will download the file ~<language>.oxt~. Rename it to ~<language>.zip~ and unzip
   it into a temporary folder.
4. Copy the ~<language>.dic~ and ~<language>.aff~ files from there to a folder where you save
   dictionary files, usually to =~/usr/local/share/hunspell/= or =~/usr/share/hunspell/=
5. Add that path to shell env variable ~DICPATH~: =setenv DICPATH $MYLOCAL/share/hunspell=
6. Restart emacs so that when hunspell is run by ispell/flyspell, that env variable is effective.

Hunspell will search for a dictionary called ~en_US~ in the path specified by =$DICPATH=.

#+BEGIN_SRC emacs-lisp
(use-package flyspell
  :delight flyspell-mode " Ⓕ"
  :demand t
  :config
  (progn
    (validate-setq ispell-program-name "hunspell"
                   ispell-dictionary "en_GB"
                   ispell-dictionary-alist '(("en_GB"
                                              "[[:alpha:]]"
                                              "[^[:alpha:]]"
                                              "[']" nil ("-d" "en_GB") nil utf-8)
                                             '("it_IT"
                                               "[[:alpha:]]"
                                               "[^[:alpha:]]"
                                               "[']" nil ("-d" "it_IT") nil utf-8)
                                             )))

  (validate-setq flyspell-issue-welcome-flag nil      ; turn off flyspell welcome message
                 flyspell-issue-message-flag nil)     ; turn off flyspell messages when checking words

  (add-hook 'prog-mode-hook     'flyspell-prog-mode)  ; spell check in program comments
  (add-hook 'org-mode-hook      'flyspell-mode)       ; spell check in md/plain text/org-mode
  (add-hook 'text-mode-hook     'flyspell-mode)
  (add-hook 'markdown-mode-hook 'flyspell-mode))
#+END_SRC

**** Switch dictionaries

Switch between the most used dictionaries in my case.

#+BEGIN_SRC emacs-lisp
(defun switch-dictionary ()
  (interactive)
  (let* ((dic ispell-current-dictionary)
         (change (if (string= dic "en_GB") "it_IT" "en_GB")))
    (ispell-change-dictionary change)
    (message "Dictionary switched from %s to %s" dic change)))

(global-set-key (kbd "<f8>") 'switch-dictionary)
#+END_SRC

**** flyspell-lazy

Flyspell usually slows down the responsiveness when writing texts. [[https://github.com/rolandwalker/flyspell-lazy][flyspell-lazy]]
is used to improve *Flyspell* responsiveness using idle timers.

#+BEGIN_SRC emacs-lisp
(use-package flyspell-lazy
  :demand t
  :after flyspell
  :config
  (flyspell-lazy-mode 1))
#+END_SRC

**** flyspell-popup

[[https://github.com/xuchunyang/flyspell-popup][Flyspell-popup]] is used to correct words with Flyspell in popup menus.

#+BEGIN_SRC emacs-lisp
(use-package flyspell-popup
  :after flyspell
  :bind (:map flyspell-mode-map
              ("C-;" . flyspell-popup-correct)))
#+END_SRC

*** languagetool

[[https://www.languagetool.org/][LanguageTool]] is an Open Source proof­reading program for English, French,
German, Polish, and more than 20 other languages.

#+BEGIN_SRC emacs-lisp
(use-package langtool
  :bind (("C-x 4 w" . langtool-check)                   ; check buffer and show warnings
         ("C-x 4 W" . langtool-check-done)              ; finish checking and remove markers
         ("C-x 4 l" . langtool-switch-default-language) ; swicth languages
         ("C-x 4 n" . langtool-goto-next-error)         ; go to the next error
         ("C-x 4 4" . langtool-show-message-at-point)   ; show the warning at point
         ("C-x 4 c" . langtool-correct-buffer)          ; correct markers
         )
  :config
  (validate-setq langtool-language-tool-jar "/usr/share/java/languagetool/languagetool-commandline.jar"
                 langtool-java-bin "/usr/bin/java"
                 langtool-mother-tongue "en")

  (setq langtool-disabled-rules '("WHITESPACE_RULE"
                                  "EN_UNPAIRED_BRACKETS"
                                  "COMMA_PARENTHESIS_WHITESPACE"
                                  "EN_QUOTES"))

  ;; show suggestions in a popup
  (defun langtool-autoshow-detail-popup (overlays)
    (when (require 'popup nil t)
      ;; Do not interrupt current popup
      (unless (or popup-instances
                  ;; suppress popup after type `C-g` .
                  (memq last-command '(keyboard-quit)))
        (let ((msg (langtool-details-error-message overlays)))
          (popup-tip msg)))))

  (validate-setq langtool-autoshow-message-function
                 'langtool-autoshow-detail-popup))
#+END_SRC

*** writegood

[[https://github.com/bnbeckwith/writegood-mode][Writegood]] is a minor mode to aid in finding common writing problems. It
highlights text based on a set of weasel-words, passive-voice and duplicate
words. [[http://matt.might.net/articles/shell-scripts-for-passive-voice-weasel-words-duplicates/][Matt Might’s weaselwords scripts]] inspired this mode.

#+BEGIN_SRC emacs-lisp
(use-package writegood-mode
  :disabled t
  :config
  (progn
    (add-hook 'org-mode-hook      'writegood-mode)
    (add-hook 'text-mode-hook     'writegood-mode)
    (add-hook 'markdown-mode-hook 'writegood-mode)))
#+END_SRC

* Programming
** indentation

- [[https://github.com/Malabarba/aggressive-indent-mode][agressive-indent-mode]] keeps the code always indented.
- [[https://github.com/DarthFennec/highlight-indent-guides][highligh-indent-guides]] minor mode to highlight indentation. I prefer it over
  [[https://github.com/zk-phi/indent-guide][indent-guide]] (too slow when I tested it)

#+BEGIN_SRC emacs-lisp
(use-package aggressive-indent
  :demand t
  :config
  (global-aggressive-indent-mode 1)
  (add-to-list 'aggressive-indent-excluded-modes 'html-mode)
  )

;; Leaving disabled for now. It does
(use-package highlight-indent-guides
  :disabled t
  :config
  (add-hook 'prog-mode-hook 'highlight-indent-guides-mode)
  (setq highlight-indent-guides-method 'column)
  ;;(set-face-background 'highlight-indent-guides-odd-face "#3f3f39")
  ;;(set-face-background 'highlight-indent-guides-even-face "#32322d")
  )
#+END_SRC

** parenthesis and delimiters

- [[https://github.com/Fuco1/smartparens][smartparens]] is a minor mode that deals with parens pairs and tries to be smart
  about it. There are good tips [[https://ebzzry.github.io/emacs-pairs.html][here]].

- [[https://github.com/Fanael/rainbow-delimiters][rainbow-delimiters]] puts different colours on parenthesis depending on their depth.

#+BEGIN_SRC emacs-lisp
(use-package smartparens-config
  :delight smartparens-strict-mode " Ⓢ" smartparens
  :ensure smartparens
  :config
  (show-smartparens-global-mode t))

(add-hook 'prog-mode-hook 'turn-on-smartparens-strict-mode)
(add-hook 'markdown-mode-hook 'turn-on-smartparens-strict-mode)

(use-package rainbow-delimiters
  :delight rainbow-mode
  :demand t
  :config
  (add-hook 'prog-mode-hook #'rainbow-delimiters-mode))
#+END_SRC

** searching documentation

These are 2 options for searching software documentation from within Emacs: [[https://zealdocs.org/][Zeal]]
(if you are on Linux) or [[https://kapeli.com/dash][Dash]] (if on macOS).

*Remember*: Install the docsets after installing Zeal or Dash

#+BEGIN_SRC emacs-lisp
(cond ((system-is-linux)
       (use-package zeal-at-point
         :config
         (add-to-list 'zeal-at-point-mode-alist '(python-mode . "python"))
         (add-to-list 'zeal-at-point-mode-alist '(sql-mode . "postgresql"))
         ))

      ((system-is-mac)
        (use-package dash-at-point
         :config
         (add-to-list 'zeal-at-point-mode-alist '(python-mode . "python"))
         (add-to-list 'zeal-at-point-mode-alist '(sql-mode . "postgresql"))
       )))
#+END_SRC

** ascii-doc

[[http://www.methods.co.nz/asciidoc/][AsciiDoc]] is a text document format for writing short documents, articles, books
and UNIX man pages. AsciiDoc files can be translated to HTML and DocBook
markups.

[[https://github.com/sensorflo/adoc-mode][adoc-mode]] is an Emacs major mode for editing AsciiDoc files. It emphasizes on
the idea that the document is highlighted so it pretty much looks like the final
output. What must be bold is bold, what must be italic is italic etc. Meta
characters are naturally still visible, but in a faint way, so they can be
easily ignored.

#+BEGIN_SRC emacs-lisp
(use-package adoc-mode
  :config
  (autoload 'adoc-mode "adoc-mode" nil t))
#+END_SRC

** jinja2

#+BEGIN_SRC emacs-lisp
(use-package jinja2-mode
  :mode "\\.j2\\'")
#+END_SRC

** json-mode

Installs json-mode and make its reformat keybinding match the global default.

#+BEGIN_SRC emacs-lisp
(use-package json-mode
  :commands json-mode
  :config
  (bind-keys :map json-mode-map
             ("C-c <tab>" . json-mode-beautify)))
#+END_SRC

** markdown

#+BEGIN_SRC emacs-lisp
(use-package markdown-mode)
#+END_SRC

** slime

#+BEGIN_SRC emacs-lisp
(use-package slime
  :config
  (setq inferior-lisp-program "sbcl")
  (load (expand-file-name "~/quicklisp/slime-helper.el")))

(use-package elisp-slime-nav
  :delight elisp-slime-nav-mode nil elisp-slime-nav
  :after slime
  :config
  (dolist (hook '(emacs-lisp-mode-hook ielm-mode-hook))
    (add-hook hook 'turn-on-elisp-slime-nav-mode)))
#+END_SRC

** SQL
Emacs has SQLi mode buitin, which work pretty well to connect to databases. Here
I am configuring it for PostgreSQL, of course.

[[https://github.com/Trevoke/sqlup-mode.el][sqlup-mode]] is a minor mode to upcase SQL keyword and functions.

#+BEGIN_SRC emacs-lisp
;; Make SQLi default to PostgreSQL syntax highlighting
;; https://blogs.gentoo.org/titanofold/2011/05/17/postgresql-syntax-highlighting-in-emacs/
(eval-after-load "sql"
  '(progn (sql-set-product 'postgres)))

;; Set default config for login
;; https://truongtx.me/2014/08/23/setup-emacs-as-an-sql-database-client/
(setq sql-postgres-login-params
      '((user :default "postgres")
        (database :default "postgres")
        (server :default "localhost")
        (port :default 5432)))

;; Truncate lines to better visualize many columns tables
(add-hook 'sql-interactive-mode-hook
          (lambda ()
            (toggle-truncate-lines t)))

(use-package sqlup-mode
  :bind (("C-c u" . sqlup-capitalize-keywords-in-region))
  :config
  (add-hook 'sql-mode-hook 'sqlup-mode)                ; capitalize keywords in SQL mode
  (add-hook 'sql-interactive-mode-hook 'sqlup-mode))   ; and in an interactive session (e.g. psql)

(use-package sql-indent
  :config
  (add-hook 'sql-mode-hook 'sqlind-setup))
#+END_SRC

** yaml

#+BEGIN_SRC emacs-lisp
(use-package yaml-mode)
#+END_SRC

* Devops
** eshell

[[https://github.com/dakrone/eos/blob/master/eos-shell.org][source]]

My frustration with shells makes me enjoy Emacs Shell, but there are some
significant differences to address. To this end, I [[http://www.howardism.org/Technical/Emacs/eshell-fun.html][documented most features]].

The ~keychain-environmet~ is to be used together with [[http://www.funtoo.org/Keychain][keychain]]. It loads the
file "$HOME/.keychain/$HOSTNAME-sh" and parses it for the SSH_AUTH_SOCK and
SSH_AUTH_PID variables.

#+BEGIN_SRC emacs-lisp
(use-package keychain-environment
  :config
  (keychain-refresh-environment))

(setenv "PAGER" "cat")
(setq eshell-scroll-to-bottom-on-input t)

;; Define a keybinding to get to your eshell quickly.
(global-set-key (kbd "C-c e") 'eshell)

;; Visual commands are commands which require a proper terminal.
;; eshell will run them in a term buffer when you invoke them.
(setq eshell-visual-commands
      '("less" "tmux" "htop" "top" "bash" "zsh" "fish"))
(setq eshell-visual-subcommands
      '(("git" "log" "l" "diff" "show")))

(setq eshell-cmpl-cycle-completions t)  ;TAB for suggestion

(add-hook 'eshell-mode-hook
          (lambda ()
            (setq-local show-trailing-whitespace nil)
            (semantic-mode -1)
            (hl-line-mode -1)
            (global-hl-line-mode -1)))

;; Define a pretty prompt.
(use-package eshell-git-prompt
  :config
  (eshell-git-prompt-use-theme 'powerline))

;; Like Plan-9 shell
(use-package em-smart
  :ensure nil
  :init
  (add-hook 'eshell-mode-hook 'eshell-smart-initialize)
  :config
  (setq eshell-where-to-jump 'begin
        eshell-review-quick-commands nil
        eshell-smart-space-goes-to-end t))
#+END_SRC

*** eshell history with counsel

Navigate eshell history using counsel. Keybinding to `C-c C-l` - [[http://informatica.boccaperta.com/m-x-emacs-history-di-eshell-con-counsel/][Boccaperta]]

FIXME: There's a bug on Eshell that forces the key-binding to be include using
the `add-hook` below (not nice!). As soon as the bug is fixed, add the
key-binding using `bind` from use-package:

:bind (:map eshell-mode-map
            ("C-c C-l" . mu-counsel-esh-history))

 #+BEGIN_SRC emacs-lisp
(defun mu-counsel-esh-history ()
  "Browse Eshell history."
  (interactive)
  (setq ivy-completion-beg (point))
  (setq ivy-completion-end (point))
  (ivy-read "Symbol name: "
            (delete-dups
             (ring-elements eshell-history-ring))
            :action #'ivy-completion-in-region-action))

(add-hook 'eshell-mode-hook
          #'(lambda ()
              (bind-key "C-c C-l" #'mu-counsel-esh-history
                        eshell-mode-map)))
 #+END_SRC

** tramp

#+BEGIN_SRC emacs-lisp
(setq tramp-default-method "ssh")
#+END_SRC

** ansible

#+BEGIN_SRC emacs-lisp
(use-package ansible
  :init
  (add-hook 'yaml-mode-hook '(lambda () (ansible 1))))

(use-package ansible-doc
  :after ansible
  :init
  (add-hook 'yaml-mode-hook #'ansible-doc-mode))
#+END_SRC

** puppet

#+BEGIN_SRC emacs-lisp
(use-package puppet-mode)
#+END_SRC

** vagrant

#+BEGIN_SRC emacs-lisp
(use-package vagrant)

(use-package vagrant-tramp
  :after vagrant
  :config
  (eval-after-load 'tramp '(vagrant-tramp-enable)))
#+END_SRC

* Appearance
** Themes

Here is a list of some themes I like. Just enable it on the configuration below;
don't forget the disable the one that is active.

- [[https://github.com/jordonbiondo/ample-theme][ample-themes]]
- [[https://github.com/waymondo/apropospriate-theme][apropospriate-theme]]
- [[https://github.com/hlissner/emacs-doom-theme][doom-theme]]
- [[https://github.com/fniessen/emacs-leuven-theme][leuven-theme]]
- [[https://github.com/cpaulik/emacs-material-theme][material-theme]]
- [[https://github.com/oneKelvinSmith/monokai-emacs][monokai-theme]]
- [[https://github.com/purcell/color-theme-sanityinc-tomorrow][sanityinc-tomorrow]]
- [[https://github.com/bbatsov/solarized-emacs][solarized-theme]]
- [[https://github.com/nashamri/spacemacs-theme][spacemacs-theme]]
- [[https://github.com/bbatsov/zenburn-emacs][zenburn-theme]]
- [[https://petton.fr/git/nico/zerodark-theme][zerodark-theme]]

Some themes, as solarized and material, change the pitch size of org-headers,
leaving them a little too big for my taste, so I adjust them. I'm adjusting the
~material-theme~ here. If you want to makes changes to the ~solarized-theme~
instead, check [[https://github.com/bbatsov/solarized-emacs#theme-specific-settings][here]].

#+BEGIN_SRC emacs-lisp
(use-package material-theme
  :demand t
  :init
  (load-theme 'material t)
  :config
  (custom-theme-set-faces
   'material
   `(org-level-1 ((t (:inherit outline-1
                               :background ,"#455A64"
                               :weight bold
                               :box (:style released-button)
                               :height 1.1))))
   `(org-level-2 ((t (:inherit outline-2
                               :background ,"#35575b"
                               :box (:style released-button)
                               :height 1.0))))
   `(org-level-3 ((t (:inherit outline-3 :height 1.0))))
   `(org-level-4 ((t (:inherit outline-4 :height 1.0))))
   `(org-level-5 ((t (:inherit outline-5 ))))
   `(org-level-6 ((t (:inherit outline-6 ))))
   `(org-level-7 ((t (:inherit outline-7 ))))
   `(org-level-8 ((t (:inherit outline-8 ))))
   `(org-level-9 ((t (:inherit outline-9 ))))
   ))
 #+END_SRC

** Fonts

#+BEGIN_SRC emacs-lisp
(cond ((system-is-linux)
       (set-face-attribute 'default nil
                           ;;:family "Iosevka"
                           :family "Source Code Pro"
                           :height 90))
      ((system-is-mac)
       (set-face-attribute 'default nil
                           :family "Source Code Pro"
                           :height 100)))

;; Set a smaller font for the mode line
(set-face-attribute 'mode-line nil
                    :family "Source Code Pro"
                    :height 90)

;; Set a font with great support for Unicode Symbols to fallback in those case
;; where certain Unicode glyphs are missing in the current font.
;; Test range: 🐷 ❤ ⊄ ∫ 𝛼 α 🜚 Ⓚ
(set-fontset-font "fontset-default" nil
                  (font-spec :size 100 :name "Fontawesome"))
                  ;;(font-spec :size 20 :name "Symbola"))

;; Insert fontawesome icons.
(use-package fontawesome)
#+END_SRC

** Modeline
*** all-the-icons

[[https://github.com/domtronn/all-the-icons.el][all-the-icons]] is a utility package to collect various Icon Fonts and propertize
them within Emacs.

#+BEGIN_SRC emacs-lisp
(use-package all-the-icons :demand t)
#+END_SRC

*** delight

Delight enables you to easily customise how major and minor modes appear in the
ModeLine.

It is similar in purpose to DiminishedModes but it accounts for major modes as
well as minor modes, and also incorporates the necessary ‘eval-after-load’ call
for minor modes, which makes the configuration simpler.

#+BEGIN_SRC emacs-lisp
(use-package delight
  :ensure nil
  :config
  (delight '((org-indent-mode nil org-indent)
             (hs-minor-mode " ⓗ" hideshow)
             (outline-minor-mode " Ⓞ" outline)
             (outline-mode " Ⓞ" :major)
             (git-gutter-mode " Ⓖ" git-gutter)
             (emacs-lisp-mode "Elisp" :major)
             (lisp-interaction-mode "LispI" :major)
             (ess-noweb-mode " Ⓝ" ess)
             (ess-noweb-font-lock-mode nil ess)
             (reftex-mode " Ⓡ" reftex)
             (visual-line-mode " Ⓦ" simple)
             (abbrev-mode " ⓐ" abbrev)
             ;;(org-indent-mode nil org-indent)
             (auto-revert-mode nil autorevert)
             ;;(server-buffer-clients . " ⓒ")
             )))
#+END_SRC

*** spaceline

#+BEGIN_SRC emacs-lisp
(use-package spaceline
  :demand t
  :config
  (setq powerline-default-separator 'wave
        spaceline-window-numbers-unicode t
        spaceline-workspace-numbers-unicode t))

(use-package spaceline-config
  :demand t
  :ensure nil
  :config
  (spaceline-spacemacs-theme))
#+END_SRC
