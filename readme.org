#+TITLE:    My Emacs Configuration
#+AUTHOR:   Rubens.TS
#+DATE:     2018-03-22
#+EMAIL:    rubensts@gmail.com
#+LANGUAGE: en
#+PROPERTY: header-args :results silent :comments link :tangle ./init.el
#+OPTIONS: author:nil date:nil toc:2 title:nil e:nil

* About

*ATTENTION:* This is a work in progress...and which dotemacs isn't? ;)

This repository contains the setup I use to customize Emacs. It is implemented trying to
follow the concept of [[http://orgmode.org/worg/org-contrib/babel/intro.html#literate-programming][Literate Programming]] through the use of [[http://orgmode.org/][Org-mode]] and [[http://orgmode.org/worg/org-contrib/babel/][Org-Babel]] to
manage all the settings in a unique Org-mode file.

* Contents                                                              :toc:
- [[#about][About]]
- [[#details][Details]]
  - [[#dependencies][Dependencies]]
  - [[#source-of-ideas][Source of Ideas]]
  - [[#installation][Installation]]
- [[#initial-setup][Initial Setup]]
  - [[#lexical-binding][Lexical binding]]
  - [[#disable-packageel][Disable package.el]]
  - [[#repositories][Repositories]]
  - [[#garbage-collector][Garbage collector]]
  - [[#package-management][Package management]]
  - [[#server][Server]]
  - [[#packages][Packages]]
- [[#core][Core]]
  - [[#generate-initel][Generate init.el]]
  - [[#built-in-capabilities][Built-in Capabilities]]
- [[#keybindings][Keybindings]]
  - [[#generalel][general.el]]
  - [[#hydra][hydra]]
  - [[#which-key][which-key]]
- [[#main-packages][Main packages]]
  - [[#org][org]]
  - [[#ivy][ivy]]
  - [[#projectile][projectile]]
- [[#base-packages][Base packages]]
  - [[#alert][alert]]
  - [[#anzu][anzu]]
  - [[#async][async]]
  - [[#bookmarks][bookmarks]]
  - [[#easy-kill][easy-kill]]
  - [[#ediff][ediff]]
  - [[#esup][esup]]
  - [[#fill-column-indicator][fill-column-indicator]]
  - [[#fixmee][fixmee]]
  - [[#flx][flx]]
  - [[#flycheck][flycheck]]
  - [[#graphviz-dot-mode][graphviz-dot-mode]]
  - [[#page-break-lines][page-break-lines]]
  - [[#paradox][paradox]]
  - [[#pass][pass]]
  - [[#pcache][pcache]]
  - [[#recentf][recentf]]
  - [[#restart-emacs][restart-emacs]]
  - [[#ripgrep][ripgrep]]
  - [[#uniquify][uniquify]]
  - [[#undo-tree][undo-tree]]
  - [[#volatile-highlights][volatile-highlights]]
  - [[#wgrep][wgrep]]
- [[#window-management][Window Management]]
  - [[#eyebrowse][eyebrowse]]
  - [[#perspective][perspective]]
  - [[#shackle][shackle]]
- [[#navigation][Navigation]]
  - [[#ace-link][ace-link]]
  - [[#ace-window][ace-window]]
  - [[#avy][avy]]
- [[#version-control][Version Control]]
  - [[#magit][magit]]
  - [[#git-gutter][git-gutter]]
  - [[#git-timemachine][git-timemachine]]
- [[#programming][Programming]]
  - [[#general-settings][General settings]]
  - [[#company][company]]
  - [[#language-server-protocol][language server protocol]]
  - [[#snippets][snippets]]
  - [[#text-notation][text notation]]
  - [[#languages][languages]]
- [[#devops][Devops]]
  - [[#eshell][eshell]]
  - [[#tramp][tramp]]
  - [[#ansible][ansible]]
  - [[#docker][docker]]
  - [[#puppet][puppet]]
  - [[#vagrant][vagrant]]
  - [[#ztree][ztree]]
- [[#tools][Tools]]
  - [[#dired---directory-editing-and-navigation][dired - Directory Editing and Navigation]]
  - [[#define-word][define-word]]
  - [[#powerthesaurus][powerthesaurus]]
  - [[#irc-internet-relay-chat][IRC (Internet Relay Chat)]]
  - [[#spell-and-grammar-checking][Spell and grammar checking]]
  - [[#pdf-tools][pdf-tools]]
- [[#appearance][Appearance]]
  - [[#themes][Themes]]
  - [[#modeline][Modeline]]
  - [[#fonts][Fonts]]
- [[#enhancements][Enhancements]]
  - [[#beacon][beacon]]
  - [[#crux][crux]]
  - [[#expand-region][expand-region]]
  - [[#multiple-cursors][multiple-cursors]]
  - [[#zop-to-char][zop-to-char]]

* Details
** Dependencies

This is a list of applications that need to be installed previously in order to
enjoy all the goodies of this configuration. Of course, you can install only the
ones you will really use and/or adapt it to the ones you prefer.

- [[https://git-scm.com/][git]] for version control, but if you are here you already know what is it ;)
- [[https://github.com/BurntSushi/ripgrep][ripgrep]] for fast searching
- [[https://notmuchmail.org/][notmuch]] for email (also a tool to fetch mail like [[http://isync.sourceforge.net/][mbsync]] or [[http://www.offlineimap.org/][OfflineImap]])
- [[https://www.gnupg.org/][GnuPG]] for security, always
- [[https://www.passwordstore.org/][password-store]] to manage your passwords
- [[https://www.latex-project.org/][LaTeX]] and [[http://pygments.org/][Pygments]] to PDF export with syntax highlighting
- [[https://mupdf.com/][MuPDF]] for DocView, [[https://poppler.freedesktop.org/][poppler]] for pdf-tools
- [[http://pandoc.org/][pandoc]] for [[https://github.com/kawabata/ox-pandoc][ox-pandoc]]
- [[http://proselint.com/][proselint]] a liter for prose
- [[http://www.gzip.org/][gzip]]
- [[https://www.imagemagick.org/script/index.php][ImageMagick]] or [[http://www.graphicsmagick.org/][GraphicsMagick]]

** Source of Ideas

The inspiration for handling the Emacs configuration through [[http://orgmode.org/worg/org-contrib/babel/intro.html#literate-programming][Literate Programming]] came
from [[http://eschulte.github.io/emacs24-starter-kit/][Eric Schulte's emacs24-starter-kit]]. It is a really clever concept that, among other
things, keeps your Emacs configuration tidy and well organized.

The first time I saw it being handled by a single org-mode file was on [[https://github.com/sachac/.emacs.d/blob/gh-pages/Sacha.org][Sacha Chua's
config.]] Then I came across [[https://github.com/joedicastro/dotfiles/tree/master/emacs/.emacs.d][joe di castro's emacs.d on github]], where he automatically
generates the =~/.emacs.d/init.el= directly from his =readme.org= file. This is the solution
I'm using here.

A list of Emacs Jedis, from whon I took most of the solutions applied here. Their ~github~
pages have many interesting/clever ideas to inspire you. Also make sure to check their
blogs as well...cool stuff ;)

- [[https://github.com/sachac/.emacs.d/blob/gh-pages/Sacha.org][Sacha Chua]]
- [[https://github.com/joedicastro/dotfiles/tree/master/emacs][joedicastro]]
- [[https://github.com/abo-abo/oremacs][oremacs (abo-abo)]]
- [[https://github.com/angrybacon/dotemacs][angrybacon]]
- [[https://github.com/emacs-tw/awesome-emacs#interface-enhancement][awesome-emacs]]

** Installation

I don't recommend you to use this Emacs configuration before reading it and understanding
what it does. Actually, this advice is serves for anything you find on the Interwebs ;)

In case you want to try it out, first rename your current =~/.emacs.d= directory, so you can
keep it safe for when you want to get back to it:

#+BEGIN_SRC sh :tangle no
$ mv ~/.emacs.d ~/.emacs.d.disabled
#+END_SRC

Then clone this repository. It will create a new =~/.emacs.d= directory:

#+BEGIN_SRC sh :tangle no
$ git clone https://github.com/rubensts/.emacs.d.git
#+END_SRC

Code blocks on org mode can be tangled with =C-c C-v t=. This is not necessary in this
=readme.org= file as the tangling is done automatically when this file (=readme.org)= is
saved.

*** If using it on MacOS

For installing Emacs on MacOS, check these:

- [[http://emacs.stackexchange.com/questions/271/what-is-the-difference-between-aquamacs-and-other-mac-versions-of-emacs][Difference between Emacs versions on mac]]
- [[https://emacs.stackexchange.com/questions/37240/how-install-emacs-26-mac][Emacs 26 on macOS]]

* Initial Setup
** Lexical binding

In accordance with the [[https://github.com/bbatsov/emacs-lisp-style-guide#source-code-layout--organization][emacs-lisp-style-guide]].

#+begin_src emacs-lisp :comments no :cond-case no :padline no
;;; -*- lexical-binding: t -*-
#+end_src

** Disable package.el

Prevent =package.el= from modifying this file if the rest of the init fails.

#+begin_src emacs-lisp
;;(setq package-enable-at-startup nil)
;;(require 'package)
#+end_src

** Repositories

Sets the ELPA repositories from where the packages are fetched. Also, by default
=package-initialize= is called after =init.el=, but it has to be called here because some
packages listed depend on it.

#+begin_src emacs-lisp
(setq package-archives '(("org"   . "https://orgmode.org/elpa/")
                         ("melpa" . "https://melpa.org/packages/")
                         ("gnu"   . "https://elpa.gnu.org/packages/")))
(package-initialize)
#+end_src

** Garbage collector

To improve Emacs' startup time, increase the garbage-collector memory threshold to 400MB
(default is 800KB). Also set =file-name-handler-alist= to nil to avoid some filenames checks
that are not necessary during the startup.

#+begin_src emacs-lisp
;;(let ((my/file-name-handler-alist file-name-handler-alist))
;;
;;  (setq gc-cons-threshold (* 400 1024 1024)
;;        file-name-handler-alist nil)
;;
;;  ;; make sure to reset the variables after init.
;;  (add-hook 'after-init-hook
;;            (lambda ()
;;              (setq gc-cons-threshold (* 20 1024 1024)
;;                    file-name-handler-alist my/file-name-handler-alist))))
#+end_src

Also, when the minibuffer is opened, the garbage-collector is temporarily increased to a
point that will prevent it to happen, immediatelly getting back to normal after the
minibuffer is closed. Great tip from [[https://bling.github.io/blog/2016/01/18/why-are-you-changing-gc-cons-threshold/][Bailey Ling blog]].

#+begin_src emacs-lisp
;;(defun my-minibuffer-setup-hook ()
;;  (setq gc-cons-threshold most-positive-fixnum))
;;
;;(defun my-minibuffer-exit-hook ()
;;  (setq gc-cons-threshold (* 20 1024 1024)))
;;
;;(add-hook 'minibuffer-setup-hook #'my-minibuffer-setup-hook)
;;(add-hook 'minibuffer-exit-hook #'my-minibuffer-exit-hook)
#+end_src

** Package management

To manage packages and their configuration in a neat way. It gives a concise and powerful
way to organize Emacs configuration avoiding the terrible [[https://www.emacswiki.org/emacs/DotEmacsBankruptcy][.emacs bankruptcy]].

In this configuration it is set to work together with [[https://github.com/raxod502/straight.el][straight]].

Also, ~use-package~ supports [[https://www.emacswiki.org/emacs/key-chord.el][key-chord]] bindings declarations through the *:chords* keyword.

#+BEGIN_SRC emacs-lisp
  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))

  (eval-when-compile
    (require 'use-package)
    (setq-default use-package-always-ensure t))

  (use-package use-package-chords
    :config (key-chord-mode 1))
#+END_SRC

** Server

Initialize Emacs server in case it is not already running.

This makes startup time irrelevant. Start emacs once, connect with emacsclient every other
time. See [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Emacs-Server.html#Emacs-Server][Using Emacs as a Server]].

#+begin_src emacs-lisp
(use-package server
  :config
  (unless (server-running-p)
    (server-start)))
#+end_src

** Packages

Packages required initially.

#+BEGIN_SRC emacs-lisp
;; keeps ~/.emacs.d clean
(use-package no-littering
  :config
  (setq auto-save-file-name-transforms
        `((".*" ,(no-littering-expand-var-file-name "auto-save/") t)))
  (setq custom-file (no-littering-expand-etc-file-name "custom.el")))

(use-package s)  ; required library
(use-package f)  ; required library
(use-package bind-key)   ; to use :bind (and variants) with use-package
(use-package validate)
#+END_SRC

* Core
** Generate init.el

The code block below is the responsible for creating the hook that will tangle a new
=~/.emacs.d/init.el= every time that this =readme.org= is saved. This also means that
alterations on the configuration have to be done in =readme.org=. Any changes made in
=~/.emacs.d/init.el= will be overwritten when =readme.org= is saved.

#+BEGIN_SRC emacs-lisp
(defun my/tangle-init ()
  "Tangles readme.org and byte compiles ~/.emacs.d/"
  (interactive)
  (when (equal (buffer-name)
               (concat "readme.org"))
    (org-babel-tangle)
    ;; byte compile the .emacs.d directory
    ;;(byte-recompile-directory (expand-file-name user-emacs-directory) 0)
    ))

(add-hook 'after-save-hook 'my/tangle-init)
;;(add-hook 'kill-emacs-hook 'my/tangle-init)
#+END_SRC

** Built-in Capabilities
*** OS compatibility

 Check which OS is hosting Emacs for keeping compatibility.

 #+BEGIN_SRC emacs-lisp
 (defun system-is-mac ()
   (interactive)
   (string-equal system-type "darwin"))

 (defun system-is-linux ()
   (interactive)
   (string-equal system-type "gnu/linux"))
 #+END_SRC

*** Custom file

Save the custom settings to a separated file, instead of inside the ~init.el~
file, avoiding cluttering it.

#+BEGIN_SRC emacs-lisp :tangle no
(defconst rts-custom-file (locate-user-emacs-file "custom.el")
  "File used to store settings from Customization UI.")

(use-package cus-edit+
  :init (load rts-custom-file 'no-error 'no-message)
  :config
  (setq custom-file rts-custom-file
        custom-buffer-done-kill nil            ; kill when existing
        custom-buffer-verbose-help nil         ; remove redundant help text
        custom-unlispify-tag-names nil         ; show me the real variable name
        custom-unlispify-menu-entries nil))
#+END_SRC

*** Better defaults

 Set better defaults do Emacs. Some of the preferences here were taken from
 [[https://github.com/hrs/sensible-defaults.el][sensible-defaults.el]].

#+BEGIN_SRC emacs-lisp
;; Fullscreen
(cond ((system-is-mac) (toggle-frame-fullscreen))
      ((system-is-linux) (add-to-list 'default-frame-alist
                                        '(fullscreen . maximized))))

;; better defaults
;;(menu-bar-mode -1)
;;(when (fboundp 'tool-bar-mode)
;;  (tool-bar-mode -1))
;;(when (fboundp 'scroll-bar-mode)
;;  (scroll-bar-mode -1))
;;(when (fboundp 'horizontal-scroll-bar-mode)
;;  (horizontal-scroll-bar-mode -1))
;;
;;(global-set-key (kbd "M-/") 'hippie-expand)
;;(global-set-key (kbd "C-x C-b") 'ibuffer)

(fset 'yes-or-no-p 'y-or-n-p)                  ; ask `y/n?` instead of `yes/no?`
(transient-mark-mode t)                        ; apply changes to highlighted region
(delete-selection-mode t)                      ; overwrite selected text when typing
(blink-cursor-mode -1)                         ; turn off the blinking cursor
(global-font-lock-mode t)                      ; always highlight code
(global-auto-revert-mode t)                    ; refresh buffers when files change
(global-hl-line-mode 1)                        ; highlight the current line
(global-visual-line-mode t)                    ; break long line of text
(global-prettify-symbols-mode 1)               ; prettify symbols (lambdas, etc)
(column-number-mode t)                         ; shows column number on the modeline
(save-place-mode t)                            ; save cursor position for opened files
(show-paren-mode t)                            ; show matching parentheses
(winner-mode 1)                                ; allow to get back to previous window configuration

(defalias 'list-buffers 'ibuffer)              ; use ibuffer by default

(set-terminal-coding-system  'utf-8)           ; make sure that UTF-8 is used everywhere
(set-keyboard-coding-system  'utf-8)
;;(set-language-environment    'utf-8)
(set-language-environment   "UTF-8")
(set-default-coding-systems  'utf-8)
(set-selection-coding-system 'utf-8)
(setq locale-coding-system   'utf-8)
(prefer-coding-system        'utf-8)
(set-input-method nil)

(validate-setq load-prefer-newer t             ; avoid using outdated compiled files
               inhibit-default-init t          ; don't call default.el (default settings) after init.el
               inhibit-startup-message t       ; don't show startup message
               initial-major-mode 'org-mode    ; set scratch buffer automatically to org-mode
               initial-scratch-message nil     ; clear the inital message on the scratch buffer

               mouse-yank-at-point t           ; paste from clipboard to where point is on buffer
               echo-keystrokes 0.1             ; shows keystrokes in progress
               use-dialog-box nil              ; don't use dialog when using mouse click
               line-spacing '0.10              ; line height
               ;;auto-revert-verbose nil         ; turn off auto revert messages in the minibuffer
               default-directory "~/"          ; start searching from home directory when opening files
               vc-follow-symlinks t            ; when opening a file, always follow symlinks
               sentence-end-double-space nil   ; a sentence shouldn't have two spaces after period
               require-final-newline t         ; ensure files end with newline
               confirm-kill-emacs 'y-or-n-p    ; ask for confirmation to close Emacs
               auto-revert-verbose nil         ; turn off auto revert messages in the minibuffer
               ;;size-indication-mode t          ; displays the buffer size in the modeline
               show-paren-delay 0.0            ; set delay to 0 for showing matching parens
               auto-window-vscroll nil         ; reduce lag when using next-line
               save-interprogram-paste-before-kill t)

(setq apropos-do-all t)                        ; perform more extensive searches than default
(setq-default indicate-empty-lines t)          ; show empty lines at bottom of buffer
(setq-default ffap-machine-p-known 'reject)    ; stop pinging the host at point when C-x C-f a file

(setq-default indent-tabs-mode nil             ; always indent with spaces
              default-tab-width 2
              c-basic-offset 4
              fill-column 90)                  ; set default line length

;;; hooks
(add-hook 'before-save-hook 'delete-trailing-whitespace)  ; delete trailing whitespace when buffer is saved
(add-hook 'prog-mode-hook 'subword-mode)                  ; treat CamelCaseSubWords as separate words

;; when saving a file that starts with `#!', make it executable
(add-hook 'after-save-hook
          'executable-make-buffer-file-executable-if-script-p)
#+END_SRC

*** MacOS specifics

[[https://github.com/purcell/exec-path-from-shell][exec-path-from-shell]] is a GNU Emacs library that ensures environment variables inside
Emacs look the same as in the user's shell.

The function ~my/swap-meta-and-super~ was taken from [[https://github.com/bbatsov/prelude/blob/master/core/prelude-osx.el][Prelude]].

#+BEGIN_SRC emacs-lisp
(use-package exec-path-from-shell
  :if (and (eq system-type 'darwin) (display-graphic-p))
  :config
  (progn
    (when (string-match-p "/zsh$" (getenv "SHELL"))
      (validate-setq exec-path-from-shell-arguments '("-l")))
    (exec-path-from-shell-initialize)))

(when (system-is-mac)
  (setq ns-function-modifier      'hyper ; set fn key to hyper key  (fn = hyper)
        ns-right-command-modifier 'hyper ; set right command key to hyper (control = hyper)
        ns-command-modifier       'meta  ; set command key to meta  (command = meta)
        ns-option-modifier        'super ; set option key to super  (option = super)
        ns-pop-up-frames nil)       ; open file on current buffer when double-clicking it on Mac Finder

  (defun my/swap-meta-and-super ()
    "Swap the mapping of Meta and Super.
Very useful for people using their Mac with a
Windows external keyboard from time to time."
    (interactive)
    (if (eq mac-command-modifier 'super)
        (progn
          (setq mac-command-modifier 'meta)
          (setq mac-option-modifier 'super)
          (message "Command is now bound to META and Option is bound to SUPER."))
      (progn
        (setq mac-command-modifier 'super)
        (setq mac-option-modifier 'meta)
        (message "Command is now bound to SUPER and Option is bound to META."))))
  )
#+END_SRC

*** Calendar
**** Location
Set the calendar to current location.

#+BEGIN_SRC emacs-lisp
(setq calendar-week-start-day  1
      calendar-latitude 43.8
      calendar-longitude 11.0
      calendar-location-name "Prato, Italy")
#+END_SRC

**** Holidays
Let Emacs know about holidays of the location.

#+BEGIN_SRC emacs-lisp
(setq holiday-general-holidays
      '((holiday-fixed 1 1 "Capodanno")
        (holiday-fixed 5 1 "1 Maggio")
        (holiday-fixed 4 25 "Liberazione")
        (holiday-fixed 6 2 "Festa Repubblica")
        ))

(setq holiday-christian-holidays
      '((holiday-fixed 12 8 "Immacolata Concezione")
        (holiday-fixed 12 25 "Natale")
        (holiday-fixed 12 26 "Santo Stefano")
        (holiday-fixed 1 6 "Epifania")
        (holiday-easter-etc -52 "Giovedì grasso")
        (holiday-easter-etc -47 "Martedì grasso")
        (holiday-easter-etc  -2 "Venerdì Santo")
        (holiday-easter-etc   0 "Pasqua")
        (holiday-easter-etc  +1 "Lunedì Pasqua")
        (holiday-fixed 8 15 "Assunzione di Maria")
        (holiday-fixed 11 1 "Ognissanti")
        ))
#+END_SRC

*** History

Maintain a history of past actions and a reasonable number of lists.

#+BEGIN_SRC emacs-lisp
(setq-default history-length 1000
              history-delete-duplicates t
              savehist-save-minibuffer-history 1
              savehist-additional-variables '(kill-ring
                                              search-ring
                                              regexp-search-ring))
(savehist-mode t)
#+END_SRC

*** Scrolling

#+BEGIN_SRC emacs-lisp
(setq scroll-margin 0
      scroll-conservatively 100000
      scroll-preserve-screen-position 1
      mouse-wheel-scroll-amount '(1 ((shift) . 1))
      mouse-wheel-progressive-speed nil
      mouse-wheel-follow-mouse 't)
#+END_SRC

*** Useful functions

These functions are useful. Activate them.

#+BEGIN_SRC emacs-lisp
(put 'downcase-region 'disabled nil)
(put 'upcase-region 'disabled nil)
(put 'narrow-to-region 'disabled nil)
(put 'narrow-to-page 'disabled nil)
#+END_SRC

*** Custom functions
**** Split window and move

This improves the default Emacs behavior of split windows. The cursor
automatically moves to the new splited window.

#+BEGIN_SRC emacs-lisp
  (defun split-below-and-move ()
    (interactive)
    (split-window-below)
    (other-window 1))

  (defun split-right-and-move ()
    (interactive)
    (split-window-right)
    (other-window 1))

  (bind-keys ("C-x 2" . split-below-and-move)
             ("C-x 3" . split-right-and-move))
#+END_SRC

**** Kill the current buffer

Change the key-binding to kill the current buffer instead of asking which one to
kill. Very good tip taken from [[http://pragmaticemacs.com/emacs/dont-kill-buffer-kill-this-buffer-instead/][Pragmaticemacs]].

#+BEGIN_SRC emacs-lisp
(defun my/kill-this-buffer ()
  "Kill the current buffer."
  (interactive)
  (kill-buffer (current-buffer)))

(global-set-key (kbd "C-x k") 'my/kill-this-buffer)
#+END_SRC

**** Improved kill-word

The default behaviour of the ~kill-word~ function is to delete characters from the current
cursor position to the end of the word. I prefer if it would behave similarly to Vim's
=ciw=, so let's create a function to accomplish just that, after all, this is Emacs! ;)

Found this function, as ~copy-word~ and ~copy-line~ on [[https://github.com/daedreth/UncleDavesEmacs#improved-kill-word][Uncle Daves' .emacs]].

#+begin_src emacs-lisp
(defun my/kill-word ()
  "Kill the entire word your cursor is in. Equivalent to 'ciw' in vim."
  (interactive)
  (forward-char 1)
  (backward-word)
  (kill-word 1))

(global-set-key (kbd "H-d w") 'my/kill-word)
#+end_src

**** Improved copy-word

And again, the same as above but we make sure to not delete the source word.

#+begin_src emacs-lisp
(defun my/copy-word ()
  "Copy the whole word your cursor is in."
  (interactive)
  (save-excursion (forward-char 1)
                  (backward-word)
                  (kill-word 1)
                  (yank)))

(global-set-key (kbd "H-c w") 'my/copy-word)
#+end_src

**** Copy a line

Regardless of where your cursor is, this quickly copies a line.

#+begin_src emacs-lisp
(defun my/copy-line ()
  "Copies a line regardless the cursor position."
  (interactive)
  (save-excursion (kill-new
                   (buffer-substring
                    (point-at-bol)
                    (point-at-eol)))))

(global-set-key (kbd "H-c l") 'my/copy-line)
#+end_src

**** Org header IDs

#+BEGIN_SRC emacs-lisp
  (defun my/copy-id-to-clipboard()
    "Copy the ID property value to killring,
  if no ID is there then create a new unique ID.
  This function works only in org-mode buffers.

  The purpose of this function is to easily construct id:-links to
  org-mode items. If its assigned to a key it saves you marking the
  text and copying to the killring."
         (interactive)
         (when (eq major-mode 'org-mode) ; do this only in org-mode buffers
       (setq mytmpid (funcall 'org-id-get-create))
       (kill-new mytmpid)
       (message "Copied %s to killring (clipboard)" mytmpid)
         ))

  (global-set-key (kbd "<f5>") 'my/copy-id-to-clipboard)
#+END_SRC

**** Create parent directories when saving file

Copied from [[https://github.com/hrs/sensible-defaults.el][sensible-defaults.el]].

#+BEGIN_SRC emacs-lisp
(defun sensible-defaults/offer-to-create-parent-directories-on-save ()
  "When saving a file in a directory that doesn't exist, offer
to (recursively) create the file's parent directories."
  (add-hook 'before-save-hook
            (lambda ()
              (when buffer-file-name
                (let ((dir (file-name-directory buffer-file-name)))
                  (when (and (not (file-exists-p dir))
                             (y-or-n-p (format "Directory %s does not exist. Create it?" dir)))
                    (make-directory dir t)))))))
#+END_SRC

* Keybindings
** general.el

[[https://github.com/noctuid/general.el][general.el]] is the best solution for managing key definitions on Emacs.

#+BEGIN_SRC emacs-lisp
  (use-package general
    :config
    (general-define-key
     :prefix "H-SPC"
     ;; applications
     "a" '(:ignore t :which-key "Applications")
     "ad" 'dired-jump
     "am" 'notmuch
     "ag" 'magit-status

     ;; buffers
     "b" '(:ignore t :which-key "Buffers")
     "bb" 'switch-to-buffer
     "bd" 'kill-this-buffer
     "by" 'copy-whole-buffer

     ;; ;; files
     "f" '(:ignore t :which-key "Files")
     "ff" 'find-file
     "fl" 'load-file
     "fs" 'save-buffer

  ;; edit text
     "e" '(:ignore t :which-key "Edit")
     "em" 'hydra-mc/body

     ;; ;; spelling
     "s" '(:ignore t :which-key "Spelling")
     "sb" 'flyspell-buffer
     "sd" 'switch-dictionary
     "sn" 'flyspell-goto-next-error
     "sp" 'flyspell-popup-correct
     "sw" 'flyspell-auto-correct-word
     "sz" 'flyspell-lazy-check-buffer

     ;; modes
     "m" '(:ignore t :which-key "Modes")
     "ml" 'global-display-line-numbers-mode
     "mw" 'whitespace-mode)

    (general-define-key
     :keymaps 'dired-mode-map
     :prefix ","
     "&" 'dired-do-async-shell-command
     "s" 'dired-get-size
     "_" 'xah-dired-rename-space-to-underscore
     "-" 'xah-dired-rename-space-to-hyphen))
#+END_SRC

#+BEGIN_SRC emacs-lisp :tangle no
   "/"   'counsel-ag
   "iu"  'insert-char
   "ne"  'flycheck-next-error
   "pe"  'flycheck-previous-error
   "qq"  'save-buffers-kill-emacs
   "cy"  'clipboard-kill-ring-save
   ;;"cp" 'clipboard-yank
   "k" 'my/swap-meta-and-super

   ;; evil-nerd-commenter
   "ci" 'evilnc-comment-or-uncomment-lines
   "cl" 'evilnc-quick-comment-or-uncomment-to-the-line
   "cc" 'evilnc-copy-and-comment-lines
   "cp" 'evilnc-comment-or-uncomment-paragraphs
   "cr" 'comment-or-uncomment-region
   "cv" 'evilnc-toggle-invert-comment-line-by-line
   "."  'evilnc-copy-and-comment-operator
#+END_SRC

** [[https://github.com/abo-abo/hydra][hydra]]

#+begin_quote
This is a package for GNU Emacs that can be used to tie related commands into a family of
short bindings with a common prefix - a Hydra.
#+end_quote

*** Package

#+BEGIN_SRC emacs-lisp
(use-package hydra
  :bind (("<f2>" . hydra-zoom/body))
  ;;:chords (("ww" . hydra-window/body)
  ;;         ("jz" . hydra-zoom/body))
  :config
  (setq lv-use-separator t)
  (set-face-attribute 'hydra-face-blue nil
                      :foreground "deep sky blue"
                      :weight 'bold))
#+END_SRC

*** text-size -> hydra-zoom

#+BEGIN_SRC emacs-lisp
(defhydra hydra-zoom (:color red
                             :columns nil)
  "zoom"
  ("=" text-scale-increase "in")
  ("-" text-scale-decrease "out")
  ("0" (text-scale-adjust 0) "reset")
  ("q" nil "quit" :color blue))
#+END_SRC

*** window management -> hydra-window

#+BEGIN_SRC emacs-lisp
(defhydra hydra-window (:color red
                               :columns nil)
  "window"
  ("h" windmove-left nil)
  ("j" windmove-down nil)
  ("k" windmove-up nil)
  ("l" windmove-right nil)
  ("2" split-below-and-move "vert")
  ("3" split-right-and-move "horz")
  ("t" transpose-frame "'" :exit t)
  ("a" ace-window "ace")
  ("s" ace-swap-window "swap")
  ("d" ace-delete-window "del")
  ("o" ace-maximize-window "ace-one" :exit t)
  ("b" ivy-switch-buffer "buf")
  ("m" headlong-bookmark-jump "bmk")
  ("q" nil "cancel")
  ("z" aw-switch-buffer-in-window "bufwin")
  ("u" (progn
         (winner-undo)
         (setq this-command 'winner-undo)) "undo"))
#+END_SRC

*** hydra-git

#+begin_src emacs-lisp
;; create a hydra for git and bind it to SPC g
(defhydra hydra-git (:color red
                            :columns nil)
  "A hydra for git!"
  ("g" magit-status "magit" :color blue)
  ("j" git-gutter:next-hunk "next")
  ("k" git-gutter:previous-hunk "previous")
  ("d" git-gutter:popup-hunk "diff")
  ("s" git-gutter:stage-hunk "stage")
  ("r" git-gutter:revert-hunk "revert")
  ("m" git-gutter:mark-hunk "mark")
  ("q" nil "cancel" :color blue))
#+end_src

** [[https://github.com/justbur/emacs-which-key][which-key]]

Displays the key bindings following your currently entered incomplete command (a prefix)
in a popup.

#+BEGIN_SRC emacs-lisp
(use-package which-key
  :init
  (which-key-mode)
  :config
  (validate-setq which-key-idle-delay 0.5
                 which-key-compute-remaps t ; show correct descriptions for remapped keys
                 which-key-allow-multiple-replacements t)

  (validate-setq which-key-replacement-alist
                 ;; Replacements for how part or whole of FUNCTION is replaced when which-key
                 ;; displays
                 ;; KEY → FUNCTION
                 '(((nil . "Prefix Command") . (nil . "prefix"))
                   ((nil . "which-key-show-next-page") . (nil . "next pg"))
                   ((nil . "/body\\'") . (nil . "")) ; Remove display the "/body" portion of hydra fn names
                   ((nil . "\\`hydra-") . (nil . "+h/"))
                   ((nil . "\\`org-babel-") . (nil . "ob/"))
                   ((nil . "\\`artist-select-op-") . (nil . "")) ; Make artist-mode function names less verbose
                   ((nil . "\\`artist-select-") . (nil . "sel-"))
                   ((nil . "\\`artist-toggle-") . (nil . "toggle-"))
                   ((nil . "\\`engine/search-") . (nil . "🔎 "))

                   ;; Replacements for how KEY is replaced when which-key displays
                   ;;   KEY → FUNCTION
                   ;; Eg: After "C-c", display "right → winner-redo" as "▶ → winner-redo"
                   (("<left>"    . nil) . ("◀" . nil)) ; ←
                   (("<right>"   . nil) . ("▶" . nil)) ; →
                   (("<up>"      . nil) . ("▲" . nil)) ; ↑
                   (("<down>"    . nil) . ("▼" . nil)) ; ↓
                   (("\\`DEL\\'" . nil) . ("⌫" . nil)) ; backspace key
                   (("<next>"    . nil) . ("PgDn" . nil))
                   (("<prior>"   . nil) . ("PgUp" . nil))
                   (("RET"       . nil) . ("⏎" . nil))
                   (("deletechar" . nil) . ("⌦" . nil))))

  ;; Change what string to display for a given *complete* key binding
  ;; Eg: After "C-x", display "8 → +unicode" instead of "8 → +prefix"
  (which-key-add-key-based-replacements
    "C-x 8"   "unicode"
    "C-x a"   "abbrev/expand"
    "C-x r"   "rectangle/register/bookmark"
    "C-x v"   "VC"
    "C-c /" "engine-mode-map"
    "C-c C-v" "org-babel"))
#+END_SRC

* Main packages
** [[http://orgmode.org/][org]]

For keeping notes, maintaining TODO lists, planning projects, and authoring documents with
a fast and effective plain-text system...bu not only :)

Actually, org-mode is the solely reason why many people have decided to try Emacs, then,
when they finally realize, they are hooked already ;)

The tip for the ~org-babel~ keybindings was seen at [[https://www.wisdomandwonder.com/article/10581/maybe-the-four-most-important-key-bindings-for-high-speed-org-mode-literate-programming][wisdomandwonder]].

| Key         | Command                   | Description                |
|-------------+---------------------------+----------------------------|
| C-c C-x C-l | =org-toggle-latex-fragment= | Show latex fragments       |
| C-c C-c     | =org-ctrl-c-ctrl-c=         | Get rid of latex fragments |

*** Defaults

#+BEGIN_SRC emacs-lisp
(use-package org
  :general  (("C-c a" 'org-agenda-list)
             ("C-c c" 'org-capture)
             ("C-c l" 'org-store-link)
             ;;("C-c f" . org-cycle-agenda-files)
             ;;("C-c s" . org-search-view)
             ("C-c t" 'org-todo-list)
             ("s-j"   'org-babel-next-src-block)
             ("s-k"   'org-babel-previous-src-block)
             ("s-l"   'org-edit-src-code)
             (org-src-mode-map
             "s-l" 'org-edit-src-exit)
             (org-mode-map
              "c" 'org-capture
              "d" 'org-clock-display
              "i" 'org-clock-in
              "o" 'org-clock-out))
  :config
  (validate-setq
   ;;org-tags-column 90                  ; column to which the tags have to be indented
   org-ellipsis "  "                   ; ⬎, ⤷, ⤵, ⚡,  
   org-fontify-whole-heading-line t     ; fontify the whole line for headings
   org-fontify-done-headline t
   org-fontify-quote-and-verse-blocks t
   org-startup-indented t
   org-cycle-include-plain-lists t
   org-list-allow-alphabetical t
   org-preview-latex-default-process 'imagemagick ; preview latex fragments

   ;; Code blocks to play nicelly on org-babel
   org-edit-src-content-indentation 0 ; number of whitespaces added to the code block indentation
   org-src-tab-acts-natively t    ; TAB acts natively as it was in the language major mode
   org-src-preserve-indentation t ; preserve indentation when exporting blocks
   org-src-fontify-natively t     ; highlights code-blocks natively
   org-src-window-setup 'current-window ; open code-blocks in the current window
   org-confirm-babel-evaluate nil  ; don't ask for confirmation when compiling code-blocks

   ;; Files location
   ;;org-directory "~/org"
   org-default-notes-file "notes.org"
   org-agenda-files (list "~/org/todo.org"
                          "~/org/clockin.org"))

  ;; Refile
  ;; https://blog.aaronbieber.com/2017/03/19/organizing-notes-with-refile.html
  (setq org-refile-targets '(("www.org" :maxlevel . 2)))
  (setq org-refile-use-outline-path t)          ; Show full paths for refiling
  (setq org-outline-path-complete-in-steps nil) ; Refile in a single go
  (setq org-refile-allow-creating-parent-nodes 'confirm)

  ;; enter “<el” and hit tab creates a template for elisp insertion
  (add-to-list 'org-structure-template-alist
               '("el" . "src emacs-lisp"))

  ;; TODO workflow states
  org-todo-keywords
  '("☛ TODO(t)" "⚑ WAIT(w@)" "|" "✔ DONE(d)" "✘ CANCEL(c@)")

  ;; TODO fontification
  org-todo-keyword-faces
  '(("☛ TODO"   . (:foreground "#ff4500" :weight bold))
    ("✔ DONE"   . (:foreground "#00ff7f" :weight bold))
    ("⚑ WAIT"   . (:foreground "#ffff00" :weight bold))
    ("✘ CANCEL" . (:foreground "#00bfff" :weight bold)))
  )
#+END_SRC

*** org-babel

Babel is Org-mode’s ability to execute source code within Org-mode documents.

#+BEGIN_SRC emacs-lisp
(use-package ob
  :ensure nil
  :config
  (org-babel-do-load-languages
   (quote org-babel-load-languages)
   (quote ((calc . t)
           (clojure . t)
           (ditaa . t)
           (dot . t)
           (emacs-lisp . t)
           (gnuplot . t)
           (latex . t)
           (ledger . t)
           (octave . t)
           (org . t)
           (makefile . t)
           (plantuml . t)
           (python . t)
           (R . t)
           (ruby . t)
           (shell . t)
           (sqlite . t)
           (sql . t)
           ))))
#+END_SRC

*** org-clock

#+BEGIN_SRC emacs-lisp
(use-package org-clock
  :ensure nil
  :config
  (org-clock-persistence-insinuate)           ; resume clocking task when emacs is restarted
  (validate-setq
   org-clock-persist t                        ; save all clock history when exiting Emacs, load it on startup
   org-clock-persist-query-resume nil         ; do not prompt to resume an active clock
   org-clock-history-length 10                ; show lot of clocking history from where choose items
   org-clock-in-resume t                      ; resume clocking task on clock-in if the clock is open
   org-clock-clocked-in-display nil           ; don't show current task in the modeline
   org-clock-into-drawer "CLOCKING"           ; clocking goes into specfic drawer
   org-clock-report-include-clocking-task t)) ; include current clocking task in clock reports
#+END_SRC

*** counsel-org-clock

#+BEGIN_QUOTE
[[https://github.com/akirak/counsel-org-clock][counsel-org-clock]] provides commands for displaying org clock entries via [[https://github.com/abo-abo/swiper][Counsel (Ivy)]]
interface.
#+END_QUOTE

Other actions can be selected through =M-o=.

#+begin_src emacs-lisp :tangle no
(use-package counsel-org-clock
  :straight (counsel-org-clock :type git
                               :host github
                               :repo "akirak/counsel-org-clock"))
#+end_src

*** org-capture-templates

The ~Protocol Quote (p)~ and ~Protocol Link (L)~ templates work through the use of the [[http://orgmode.org/worg/org-contrib/org-protocol.html][org
protocol]] handler [[https://github.com/sprig/org-capture-extension][found here]], which is a Chrome/Firefox addon.

Specifically, the ~Protocol Quote~ is activated when a text is selected in the site,
capturing the text selected (quote). The ~Protocol Link~ works when no text is selected,
capturing only the site address.

Here is a list of the special %-escapes or placeholders used on [[http://orgmode.org/manual/Template-expansion.html#Template-expansion][org templates]].

#+BEGIN_SRC emacs-lisp
(use-package org-capture
  :ensure nil
  :config
  (setq org-capture-templates
        '(("p" "Protocol Quote" entry
           (file+headline "www.org" "Bookmarks")
           "* %?[[%:link][%:description]]\n:PROPERTIES:\n:CREATED: %U\n:END:\n\n#+BEGIN_QUOTE\n%i\n#+END_QUOTE\n"
           :empty-lines 1
           :immediate-finish
           )

          ("L" "Protocol Link" entry
           (file+headline "www.org" "Bookmarks")
           "* %?[[%:link][%:description]]\n:PROPERTIES:\n:CREATED: %U\n:END:\n"
           :empty-lines 1
           :immediate-finish
           )

          ("t" "Tasks" entry
           (file+headline "tasks.org" "Tasks")
           "* ☛ TODO %^{Task} %^g\n:PROPERTIES:\n:CREATED: %U\n:END:\n%?%i"
           :empty-lines 1)

          ("n" "Notes" entry
           (file+headline "notes.org" "Notes")
           "* %^{Header} %^G\n %u\n %?")

          ("j" "Journal" entry
           (file+datetree "journal.org")
           "* %U %^{Title}\n %?%i\n %a")

          ("a" "Articles" entry
           (file+headline "articles.org" "Articles")
           "* %^{Title} %^g\n:PROPERTIES:\n:CREATED: %U\n:END:\n%?%i\n"
           :empty-lines 1
           :immediate-finish)
          )))
#+END_SRC

*** org-bullets

#+BEGIN_SRC emacs-lisp
(use-package org-bullets
  :hook (org-mode . (lambda () (org-bullets-mode t)))
  :config
  ;;(setq org-bullets-bullet-list '("☯" "☰" "☱" "☲" "☳" "☴" "☵" "☶" "☷"))
  ;;(setq org-bullets-bullet-list '("♣" "♥" "♠" "♦" "♧" "♡" "♤" "♢"))
  ;;(validate-setq org-bullets-bullet-list '("☯" "☉" "∞" "◉" "⊚" "☀" "☾" "☥"))
  (validate-setq org-bullets-bullet-list '("◉" "☉" "⊚" "○" "∞"))

  ;; make available "org-bullet-face" such that I can control the font size individually
  (validate-setq org-bullets-face-name (quote org-bullet-face))
  ;; (custom-set-faces '(org-bullet-face
  ;;                     ((t (:foreground "burlywood"
  ;;                                      :weight normal
  ;;                                      :height 1.6)))))
  )
#+END_SRC

*** ox.el

#+BEGIN_SRC emacs-lisp
(use-package ox
  :ensure nil
  :config
  (validate-setq org-export-with-smart-quotes t
                 org-export-allow-bind-keywords t
                 org-latex-listings 'minted
                 org-latex-packages-alist '(("" "color" t)
                                            ("" "minted" t)
                                            ("" "parskip" t)
                                            ("" "tikz" t)))

  (when (system-is-mac)
    (validate-setq org-ditaa-jar-path "/usr/local/bin/ditaa"))

  (setq org-latex-pdf-process
        '("pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
          "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
          "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"))
  )
#+END_SRC

*** ox-pandoc

I’m using ox-pandoc to export org files to all formats Pandoc works with. It
only exports org files, in opposite of pandoc-mode, which exports from any
source format. The problem is that ox-pandoc needs considerably less
configuration and as I usually write everything in org-mode, no need to worry.
https://github.com/kawabata/ox-pandoc
http://www.rousette.org.uk/blog/archives/org-mode-and-pandoc/ Keeping a lab book
with org-mode http://informatica.boccaperta.com/m-x-emacs-ox-pandoc/

#+BEGIN_SRC emacs-lisp
(use-package ox-pandoc
  ;;  :after org-plus-contrib
  :config
  (validate-setq org-pandoc-options '((standalone . t)
                                      (mathjax . t)
                                      (highlight-style . "pygments"))
                 org-pandoc-options-for-docx '((standalone . nil))
                 org-pandoc-options-for-beamer-pdf '((pdf-engine . "lualatex"))
                 org-pandoc-options-for-latex-pdf  '((pdf-engine . "lualatex"))
                 ;;org-pandoc-options-for-latex-pdf '((latex-engine . "xelatex")
                 ;;                                   (template . "~/.pandoc/templates/memoir2.latex" ))

                 ;; Use external css for html5
                 ;; (let ((stylesheet (expand-file-name
                 ;;                    (locate-user-emacs-file "etc/pandoc.css"))))
                 ;;   (setq org-pandoc-options-for-html5
                 ;;         `((css . ,(concat "file://" stylesheet)))))
                 ))
#+END_SRC

*** [[https://github.com/snosov1/toc-org][toc-org]]

#+begin_quote
toc-org is an Emacs utility to have an up-to-date table of contents in the org files
without exporting (useful primarily for readme files on GitHub)
#+end_quote

#+begin_src emacs-lisp
(use-package toc-org
  :hook (org-mode . toc-org-enable))
#+end_src

*** org-brain

#+begin_src emacs-lisp
(use-package org-brain
  :config
  (push '("b" "Brain" plain (function org-brain-goto-end)
          "* %i%?" :empty-lines 1)
        org-capture-templates)
  (setq org-brain-visualize-default-choices 'all)
  (setq org-brain-title-max-length 12))
#+end_src

** [[https://github.com/abo-abo/swiper][ivy]]
*** ivy

Ivy is a generic completion frontend for Emacs.

#+BEGIN_SRC emacs-lisp
(use-package ivy
  :bind (("C-c C-r"  . ivy-resume)
         :map ivy-minibuffer-map
         ("<return>" . ivy-alt-done)
         ("C-M-h"    . ivy-previous-line-and-call)
         ("C-:"      . ivy-dired)
         ("C-c o"    . ivy-occur)
         ("C-j"      . ivy-next-line)
         ("C-k"      . ivy-previous-line)
         ("C-l"      . ivy-alt-done)
         :map read-expression-map
         ("C-r"      . counsel-expression-history))
  :chords (("bb" . ivy-switch-buffer))
  :config
  (ivy-mode 1)
  (validate-setq ivy-use-virtual-buffers t         ; list `recentf' and bookmarks as well
                 ivy-height 15
                 ivy-count-format "(%d/%d) "       ; counter
                 ivy-extra-directories nil         ; Do not show "./" and "../"
                 ivy-virtual-abbreviate 'full      ; Show full file path
                 ivy-re-builders-alist '((t . ivy--regex-ignore-order))
                 ivy-use-ignore-default 'always    ; ignore buffers set in `ivy-ignore-buffers'
                 ivy-ignore-buffers                ; ignore some buffers in `ivy-switch-buffer'
                 '("company-statistics-cache.el" ".elfeed/index"))

  (defun ivy-dired ()
    (interactive)
    (if ivy--directory
        (ivy-quit-and-run
         (dired ivy--directory)
         (when (re-search-forward
                (regexp-quote
                 (substring ivy--current 0 -1)) nil t)
           (goto-char (match-beginning 0))))
      (user-error
       "Not completing files currently")))

  ;; Customize faces per mode
  ;;(validate-setq ivy-switch-buffer-faces-alist
  ;;               '((emacs-lisp-mode . swiper-match-face-1)
  ;;                 (dired-mode . ivy-subdir)
  ;;                 (org-mode . org-level-4)))
  )

;; Speed up my workflow with prearranged windows
;; (setq ivy-views '(("boccaperta + ba-server [–]"
;;                    (vert
;;                     (sexp (bookmark-jump "boccaperta"))
;;                     (sexp (bookmark-jump "ba-server"))))
;;                   ("desktop + ba-server [–]"
;;                    (vert
;;                     (sexp (bookmark-jump "desktop"))
;;                     (sexp (bookmark-jump "ba-server"))))))

;; Hydra bindings for ivy buffer
(use-package ivy-hydra
  :after ivy)

(use-package all-the-icons-ivy
  :after all-the-icons
  :config
  (all-the-icons-ivy-setup))

;; smex order selections accordingly to the most used ones
(use-package smex)
#+END_SRC

*** counsel

Counsel takes ivy further, providing versions of common Emacs commands that are
customized to make the best use of ivy.

#+BEGIN_SRC emacs-lisp
(use-package counsel
  :bind (("C-h l"   . counsel-load-library)
         ;;("<f2> u"  . counsel-unicode-char)
         ("C-r"     . counsel-grep-or-swiper)
         ("C-c g"   . counsel-git)
         ("C-c j"   . counsel-git-grep)
         ("C-c k"   . counsel-rg)
         ("C-x l"   . counsel-locate)
         ("C-c r"   . counsel-linux-app)
         ("C-x i"   . counsel-imenu))
  :config
  (counsel-mode 1)
  (validate-setq  counsel-mode-override-describe-bindings t
                  counsel-find-file-at-point t
                  counsel-find-file-ignore-regexp
                  (concat
                   "\\(?:\\`[#.]\\)"              ; file names beginning with # or .
                   "\\|\\(?:\\`.+?[#~]\\'\\)"     ; file names ending with # or ~
                   )))

(use-package counsel-projectile
  :after projectile
  :config
  (counsel-projectile-mode))
#+END_SRC

*** swiper

[[https://github.com/abo-abo/swiper][Swiper]] shows an overview during regex searching. It uses the /ivy/ back-end for
the overview.

#+begin_src emacs-lisp
(use-package swiper
  :bind (("C-s" . swiper))
  :config
  ;; always recenter when leaving swiper
  (validate-setq swiper-action-recenter t))
#+end_src

** projectile

It's a project interaction library for Emacs. Its goal is to provide a nice set of
features operating on a project level without introducing external dependencies (when
feasible). For instance - finding project files has a portable implementation written in
pure Emacs Lisp without the use of GNU find (but for performance sake an indexing
mechanism backed by external commands exists as well).

#+BEGIN_SRC emacs-lisp
(use-package projectile
  :config
  (setq projectile-enable-caching t
        projectile-completion-system 'ivy
        projectile-switch-project-action 'projectile-dired
        projectile-mode-line '(:eval (format
                                      " :%s:" (projectile-project-name))))
  (projectile-mode))

(use-package ibuffer-projectile)
#+END_SRC

* Base packages
** alert

A [[https://github.com/jwiegley/alert][Growl-like alerts]] notifier for Emacs. It accepts rules for alerting about almost
anything.

TODO: add rule for email receiving monitoring alerts (Icinga and alikes)

#+BEGIN_SRC emacs-lisp
(use-package alert)
#+END_SRC

** anzu
anzu provides a minor mode which displays current match and total matches
information in the mode-line in various search modes.

#+BEGIN_SRC emacs-lisp
(use-package anzu
  :bind (("M-%" . anzu-query-replace)
         ("C-M-%" . anzu-query-replace-regexp))
  :config
  (validate-setq anzu-cons-mode-line-p nil
                 anzu-replace-to-string-separator "  ")
  (global-anzu-mode +1))
#+END_SRC

** async

Simple library for asynchronous processing in Emacs

#+BEGIN_SRC emacs-lisp
(use-package async
  :config
  (async-bytecomp-package-mode t))
#+END_SRC

** bookmarks
Bookmarks to files and directories

#+BEGIN_SRC emacs-lisp
(use-package bookmark
  :config
  (setq bookmark-completion-ignore-case nil)
  (bookmark-maybe-load-default-file))
#+END_SRC

** easy-kill

[[https://github.com/leoliu/easy-kill][Provide commands]] ~easy-kill~ and ~easy-mark~ to let users kill or mark things easily.

The keybinding is =M-w= to start To show all key shortcuts, call for help with =?=.

#+BEGIN_SRC emacs-lisp
(use-package easy-kill
  :bind (([remap kill-ring-save] . easy-kill)
         ([remap mark-sexp] . easy-mark)))
#+END_SRC

** ediff

The default ~ediff-mode~ isn't quite optimized. The following settings are taken
from [[http://oremacs.com/2015/01/17/setting-up-ediff/][Oremacs]].

Just a note about the ~--text~ in the ~ediff-diff-options~: it will force the
GNU utility ~diff~, which is called by ~ediff~, to treat the input files as text
files. This is necessary as the utility ~diff~ doesn't understand unicode, and
sees unicode encoded files as binary files ([[http://stackoverflow.com/questions/10503937/emacs-ediff-foreign-character-sets-and-text-file-encodings][stackoverflow]]).

#+BEGIN_SRC emacs-lisp
(use-package ediff
  :hook ((ediff-before-setup . my-store-pre-ediff-winconfig)
         (ediff-quit . my-restore-pre-ediff-winconfig))
  :config
  (customize-set-variable 'ediff-window-setup-function 'ediff-setup-windows-plain)
  (customize-set-variable 'ediff-split-window-function 'split-window-horizontally)
  (customize-set-variable 'ediff-highlight-all-diffs 'nil) ; only highlight current diff
  (customize-set-variable 'ediff-diff-options "-w --text")

  ;; restore windows and layout after ending ediff session
  ;; https://emacs.stackexchange.com/questions/7482/restoring-windows-and-layout-after-an-ediff-session
  (defvar my-ediff-last-windows nil)

  (defun my-store-pre-ediff-winconfig ()
    (setq my-ediff-last-windows (current-window-configuration)))

  (defun my-restore-pre-ediff-winconfig ()
    (set-window-configuration my-ediff-last-windows)))
#+END_SRC

** esup

#+BEGIN_SRC emacs-lisp
(use-package esup
  :config
  (setq esup-insignificant-time 0.001))
#+END_SRC

** fill-column-indicator

Toggle the vertical column that indicates the fill threshold.

#+BEGIN_SRC emacs-lisp
(use-package fill-column-indicator
  :disabled t
  :config
  (validate-setq fci-rule-width 1
                 fci-rule-color "#5d478b"
                 fci-rule-column 80)
  (define-globalized-minor-mode global-fci-mode fci-mode
    (lambda ()
      (fci-mode 1)))
  (global-fci-mode 1))
#+END_SRC

** fixmee

Fixmee-mode tracks fixme notices in code comments, highlights them, ranks them
by urgency, and lets you navigate to them quickly.

It requires [[https://github.com/rolandwalker/button-lock][button-lock.el]], which is installed by ~wiki-nav~.

*Patterns* - The following fixme patterns are supported by default:

@@@
XXX         ; only this one is case-sensitive
todo
fixme

*Key bindings*

| Keystrokes | 	Function                                             |
|------------+----------------------------------------------------------|
| C-c f      | fixmee-goto-nextmost-urgent                              |
| C-c F      | fixmee-goto-prevmost-urgent                              |
| C-c v      | fixmee-view-listing                                      |
| M-n        | fixmee-goto-next-by-position ; only when the point is    |
| M-p        | fixmee-goto-previous-by-position ; inside a fixme notice |

#+BEGIN_SRC emacs-lisp
(use-package wiki-nav
  :config
  (global-wiki-nav-mode 1))

(use-package fixmee
  :after wiki-nav
  :config
  (global-fixmee-mode 1))
#+END_SRC

** flx
 Fuzzy matching for Emacs ... a la Sublime Text. It is needed for fuzzy matching
 in swiper + avy.

#+BEGIN_SRC emacs-lisp
(use-package flx)
#+END_SRC

** flycheck

#+BEGIN_SRC emacs-lisp
(use-package flycheck
  :init (global-flycheck-mode)
  :config
  (setq flycheck-mode-line
        '(:eval
          (pcase flycheck-last-status-change
            (`not-checked nil)
            (`no-checker (propertize " -" 'face 'warning))
            (`running (propertize " ✷" 'face 'success))
            (`errored (propertize " ☠" 'face 'error))
            (`finished
             (let* ((error-counts (flycheck-count-errors flycheck-current-errors))
                    (no-errors (cdr (assq 'error error-counts)))
                    (no-warnings (cdr (assq 'warning error-counts)))
                    (face (cond (no-errors 'error)
                                (no-warnings 'warning)
                                (t 'success))))
               (propertize (format " %s/%s" (or no-errors 0) (or no-warnings 0))
                           'face face)))
            (`interrupted " -")
            (`suspicious '(propertize " ?" 'face 'warning)))))
  )
#+END_SRC

*** Linting prose

[[http://proselint.com/][Proselint]] checks the text for common errors. This creates a flycheck checker
that runs proselint in texty buffers and displays the errors.

#+BEGIN_SRC emacs-lisp
(flycheck-define-checker proselint
  "A linter for prose."
  :command ("proselint" source-inplace)
  :error-patterns
  ((warning line-start (file-name) ":" line ":" column ": "
            (id (one-or-more (not (any " "))))
            (message (one-or-more not-newline)
                     (zero-or-more "\n" (any " ") (one-or-more not-newline)))
            line-end))
  :modes (text-mode markdown-mode gfm-mode org-mode))

(add-to-list 'flycheck-checkers 'proselint)
#+END_SRC

** graphviz-dot-mode

[[https://github.com/ppareit/graphviz-dot-mode][graphviz-dot-mode]] is a mode for the DOT language, used by =graphviz=.

#+BEGIN_SRC emacs-lisp
(use-package graphviz-dot-mode)
#+END_SRC

** page-break-lines

Better looking break lines.

#+BEGIN_SRC emacs-lisp
(use-package page-break-lines
  :init (global-page-break-lines-mode))
#+END_SRC

** paradox

Project for modernizing Emacs’ Package Menu. With package ratings, usage statistics,
customizability, and more.

It is disabled now as I've started using [[https://github.com/raxod502/straight.el][straight.el]].

#+BEGIN_SRC emacs-lisp
(use-package paradox
  ;;:disabled t
  :config
  (setq-default paradox-column-width-package 27
                paradox-column-width-version 13
                paradox-execute-asynchronously t
                paradox-github-token t
                paradox-hide-wiki-packages t)
  (set-face-attribute 'paradox-homepage-button-face nil :italic nil)
  (remove-hook 'paradox--report-buffer-print 'paradox-after-execute-functions))
#+END_SRC

** pass

[[https://github.com/NicolasPetton/pass][pass]] is a major mode for [[https://www.passwordstore.org/][password-store]].

#+BEGIN_SRC emacs-lisp
(use-package pass)
#+END_SRC

** pcache

[[https://github.com/sigma/pcache][pcache]] provides a persistent way of caching data, in a hashtable-like structure.
It relies on `eieio-persistent' in the backend, so that any object that can be
serialized by EIEIO can be stored with pcache.

[[https://github.com/rolandwalker/persistent-soft][persistent-soft]] is a wrapper around pcache.el, providing "soft" fetch and store
routines which never throw an error, but instead return nil on failure.

#+BEGIN_SRC emacs-lisp
(use-package pcache)

(use-package persistent-soft
  :after pcache)
#+END_SRC

** recentf

Recentf is a minor mode that builds a list of recently opened files. This list
is automatically saved across Emacs sessions. You can access the list through a
menu. Here it's set to work together with ivy-switch-buffer.

[[https://github.com/abo-abo/swiper/releases][source 1]] - [[https://www.masteringemacs.org/article/find-files-faster-recent-files-package][source 2]] - [[http://emacsredux.com/blog/2013/04/05/recently-visited-files/][source 3]] - [[https://github.com/emacscollective/no-littering#suggested-settings][source 4]]

#+BEGIN_SRC emacs-lisp
(use-package recentf
  :config
  (recentf-mode t)
  (validate-setq recentf-max-saved-items 10)

  (add-to-list 'recentf-exclude no-littering-var-directory)
  (add-to-list 'recentf-exclude no-littering-etc-directory)
  (add-to-list 'recentf-exclude '("COMMIT_MSG"
                                  "COMMIT_EDITMSG"
                                  "github.*txt$"
                                  ".*png$")))
#+END_SRC

** restart-emacs

#+BEGIN_SRC emacs-lisp
(use-package restart-emacs
 ;; :general (d/leader-keys "qr" 'restart-emacs)
)
#+END_SRC

** ripgrep

Use ripgrep in Emacs.

#+BEGIN_SRC emacs-lisp
(use-package rg)
#+END_SRC

** uniquify

Nicer naming of buffers for files with identical names. Check [[https://github.com/purcell/emacs.d/blob/master/lisp/init-uniquify.el][Steve
Purcell's setup]]. Actually, his whole Emacs setup is doubtless worthy
looking.

#+BEGIN_SRC emacs-lisp
(use-package uniquify
  :ensure nil
  :config
  (setq uniquify-buffer-name-style 'reverse
        uniquify-separator " • "
        uniquify-after-kill-buffer-p t       ; rename after killing uniquified
        uniquify-ignore-buffers-re "^\\*"))  ; don't muck with special buffers
#+END_SRC

** undo-tree

=C-x u= to ~undo-tree-visualize~
C-/ undo
S-C-/ redo

#+BEGIN_SRC emacs-lisp
(use-package undo-tree
  :chords (("uu" . undo-tree-visualize))
  :init
  (global-undo-tree-mode))
#+END_SRC

** volatile-highlights

It provides minor mode volatile-highlights-mode, which brings visual feedback
to some operations (eg. pasting, etc) by highlighting portions relating to the
operations.

#+BEGIN_SRC emacs-lisp
(use-package volatile-highlights
  :config
  (volatile-highlights-mode t))
#+END_SRC

** wgrep

[[https://github.com/mhayashi1120/Emacs-wgrep][wgrep]] is a writable grep buffer and apply the changes to files

You can edit the text in the grep buffer after typing ~C-c C-p~. After that the
changed text is highlighted. The following keybindings are defined:

| Key      | Action                                              |
|----------+-----------------------------------------------------|
| C-c C-e: | Apply the changes to file buffers.                  |
| C-c C-u: | All changes are unmarked and ignored.               |
| C-c C-d: | Mark as delete to current line (including newline). |
| C-c C-r: | Remove the changes in the regiond                   |
| C-c C-p: | Toggle read-only area.                              |
| C-c C-k: | Discard all changes and exit.                       |
| C-x C-q: | Exit wgrep mode.                                    |

#+BEGIN_SRC emacs-lisp
(use-package wgrep
  :config
  (progn
    (with-eval-after-load 'grep
      (bind-key "C-x C-q" #'wgrep-change-to-wgrep-mode grep-mode-map))

    (with-eval-after-load 'wgrep
      (bind-key "C-c C-c" #'wgrep-finish-edit grep-mode-map))))
#+END_SRC

* Window Management
** eyebrowse

#+BEGIN_SRC emacs-lisp
(use-package eyebrowse
;; :general (d/leader-keys
;;            "e"  '(:ignore t :wk "eyebrowse")
;;            "es" 'eyebrowse-switch-to-window-config
;;            "el" 'eyebrowse-next-window-config
;;            "eh" 'eyebrowse-prev-window-config
;;            "er" 'eyebrowse-rename-window-config
;;            "ec" 'eyebrowse-close-window-config
;;            "e'" 'eyebrowse-last-window-config
;;            "e0" 'eyebrowse-switch-to-window-config-0 :wk "workspace 0"
;;            "e1" 'eyebrowse-switch-to-window-config-1
;;            "e2" 'eyebrowse-switch-to-window-config-2
;;            "e3" 'eyebrowse-switch-to-window-config-3
;;            "e4" 'eyebrowse-switch-to-window-config-4
;;            "e5" 'eyebrowse-switch-to-window-config-5
;;            "e6" 'eyebrowse-switch-to-window-config-6
;;            "e7" 'eyebrowse-switch-to-window-config-7
;;            "e8" 'eyebrowse-switch-to-window-config-8
;;            "e9" 'eyebrowse-switch-to-window-config-9)
  :config
  (setq eyebrowse-wrap-around t
        eyebrowse-new-workspace t
        eyebrowse-switch-back-and-forth t)

  (eyebrowse-mode t))
#+END_SRC

** [[https://github.com/nex3/perspective-el][perspective]]

It provides tagged workspaces in Emacs, similar to workspaces in windows managers such as
Awesome and XMonad (and somewhat similar to multiple desktops in Gnome or Spaces in OS X).

Commands are all prefixed by ~C-x x~

| Key        | Command             | What it does                                                    |
|------------+---------------------+-----------------------------------------------------------------|
| s          | persp-switch        | Query a perspective to switch or create                         |
| k          | persp-remove-buffer | Query a buffer to remove from current perspective               |
| c          | persp-kill          | Query a perspective to kill                                     |
| r          | persp-rename        | Rename current perspective                                      |
| a          | persp-add-buffer    | Query an open buffer to add to current perspective              |
| A          | persp-set-buffer    | Add buffer to current perspective and remove it from all others |
| i          | persp-import        | Import a given perspective from another frame.                  |
| n, <right> | persp-next          | Switch to next perspective                                      |
| p, <left>  | persp-prev          | Switch to previous perspective                                  |

#+begin_src emacs-lisp
(use-package perspective
  :config
  (persp-mode))

(use-package persp-projectile
  :config
  (define-key projectile-mode-map (kbd "s-s")
    'projectile-persp-switch-project))
#+end_src

** shackle

#+BEGIN_SRC emacs-lisp
(use-package shackle
  :config
  (validate-setq
   shackle-default-alignment 'below
   shackle-default-size 8
   shackle-rules '(("^\\*ftp " :noselect t :autokill t :noesc t)
                   ;; built-in (emacs)
                   ("*ert*" :same t :modeline t)
                   ("*info*" :size 0.5 :select t :autokill t)
                   ("*Backtrace*" :size 20 :noselect t)
                   ("*Warnings*"  :size 8  :noselect t)
                   ("*Messages*"  :size 12 :noselect t)
                   ("*Help*" :size 0.3)
                   ("^\\*.*Shell Command.*\\*$" :regexp t :size 20 :noselect t :autokill t)
                   (apropos-mode :size 0.3 :autokill t :autoclose t)
                   (Buffer-menu-mode :size 20 :autokill t)
                   (comint-mode :noesc t)
                   (grep-mode :size 25 :noselect t :autokill t)
                   (profiler-report-mode :size 0.3 :regexp t :autokill t :modeline minimal)
                   (tabulated-list-mode :noesc t)
                   (special-mode :noselect t :autokill t :autoclose t)
                   ("^\\*"  :regexp t :noselect t :autokill t)
                   ("^ \\*" :regexp t :size 12 :noselect t :autokill t :autoclose t)))

  (shackle-mode))
#+END_SRC

* Navigation
** ace-link

#+BEGIN_SRC emacs-lisp
(use-package ace-link
  :config (ace-link-setup-default))
#+END_SRC

** ace-window

#+BEGIN_SRC emacs-lisp
(use-package ace-window
  :bind ([remap other-window] . ace-window)
  :init
  (setq aw-keys '(?a ?s ?d ?f ?g ?h ?j ?k ?l))
  ;;(setq aw-background nil)
  (setq aw-dispatch-always t)

  ;; customize face of hint character
  (custom-set-faces '(aw-leading-char-face
                      ((t (:inherit ace-jump-face-foreground
                                    :height 3.0))))))
#+END_SRC

** avy
avy is a GNU Emacs package for jumping to visible text using a char-based
decision tree. See also ace-jump-mode and vim-easymotion - avy uses the same
idea.

#+BEGIN_SRC emacs-lisp
(use-package avy
  :chords (("jj" . avy-goto-word-or-subword-1))
  :config
  (setq avy-background t
        avy-all-windows t
        avy-style 'at-full
        avy-case-fold-search nil)

  (set-face-attribute 'avy-lead-face nil
                      :foreground "gold"
                      :weight 'bold
                      :background nil)
  (set-face-attribute 'avy-lead-face-0 nil
                      :foreground "deep sky blue"
                      :weight 'bold
                      :background nil))
#+END_SRC

* Version Control
** [[https://magit.vc][magit]]

A Git Porcelain inside Emacs.

#+BEGIN_SRC emacs-lisp
(use-package magit
  :hook (after-save . magit-after-save-refresh-status) ; refreshes magit status when file is saved
  :config
  (setq magit-completing-read-function 'ivy-completing-read
        magit-display-buffer-function 'magit-display-buffer-fullframe-status-topleft-v1)

  ;; automatically refreshes magit status after file is saved
  ;;(add-hook 'after-save-hook 'magit-after-save-refresh-status)
  )
#+END_SRC

** git-gutter

#+BEGIN_SRC emacs-lisp
(use-package git-gutter
  :init
  (global-git-gutter-mode +1))
#+END_SRC

** git-timemachine

#+begin_src emacs-lisp
(use-package git-timemachine
  :commands git-timemachine)
#+end_src

* Programming
** General settings
*** [[https://github.com/Malabarba/aggressive-indent-mode][aggressive-indent]]

It keeps the code always indented.

#+begin_src emacs-lisp
(use-package aggressive-indent
  :config
  (global-aggressive-indent-mode 1)
  (add-to-list 'aggressive-indent-excluded-modes 'html-mode))
#+end_src

*** [[https://github.com/DarthFennec/highlight-indent-guides][highligh-indent-guides]]

It is a minor mode to highlight indentation.

#+BEGIN_SRC emacs-lisp
(use-package highlight-indent-guides
  :disabled t
  :hook (prog-mode . highlight-indent-guides-mode)
  :config
  (validate-setq highlight-indent-guides-method 'character))
#+END_SRC

*** [[https://github.com/Fuco1/smartparens][smartparens]]

It is a minor mode that deals with parens pairs and tries to be smart about it. There are
good tips [[https://ebzzry.github.io/emacs-pairs.html][here]].

#+begin_src emacs-lisp
(use-package lispy
  :hook (prog-mode . lispy-mode))
#+end_src

*** [[https://github.com/Fanael/rainbow-delimiters][rainbow-delimiters]]

It helps visualizing delimiters, putting different colours on parenthesis depending on
their depth.

#+BEGIN_SRC emacs-lisp
(use-package rainbow-delimiters
  :hook (prog-mode . rainbow-delimiters-mode))
#+END_SRC
** company

[[http://company-mode.github.io/][Company]] is a text completion framework for Emacs. The name stands for “complete anything”.
It uses pluggable back-ends and front-ends to retrieve and display completion candidates.

It comes with several back-ends such as Elisp, Clang, Semantic, Eclim, Ropemacs, Ispell,
CMake, BBDB, Yasnippet, dabbrev, etags, gtags, files, keywords and a few others.

The CAPF back-end provides a bridge to the standard completion-at-point-functions
facility, and thus works with any major mode that defines a proper completion function.

#+BEGIN_SRC emacs-lisp
;; (use-package company
;;   :hook (after-init . global-company-mode)
;;   :bind (("C-c /" . company-files))                    ; force complete file names on "C-c /" key
;;   :config
;;   (setq company-tooltip-limit 20                       ; bigger popup window
;;         company-tooltip-align-annotations 't           ; align annotations to the right tooltip border
;;         company-idle-delay .3                          ; decrease delay before autocompletion popup shows
;;         company-begin-commands '(self-insert-command)) ; start autocompletion only after typing
;;   )

(use-package company
  :preface (message "[INIT] Package: Company")
  :commands company-mode
  :hook (prog-mode . company-mode))

(use-package company-box
  :disabled t
  :hook (company-mode . company-box-mode)
  :config
  (setq company-box-icons-unknown 'fa_question_circle)

  (setq company-box-icons-elisp
        '((fa_tag :face font-lock-function-name-face) ;; Function
          (fa_cog :face font-lock-variable-name-face) ;; Variable
          (fa_cube :face font-lock-constant-face) ;; Feature
          (md_color_lens :face font-lock-doc-face))) ;; Face

  (setq company-box-icons-yasnippet 'fa_bookmark)

  (setq company-box-icons-lsp
        '((1 . fa_text_height) ;; Text
          (2 . (fa_tags :face font-lock-function-name-face)) ;; Method
          (3 . (fa_tag :face font-lock-function-name-face)) ;; Function
          (4 . (fa_tag :face font-lock-function-name-face)) ;; Constructor
          (5 . (fa_cog :foreground "#FF9800")) ;; Field
          (6 . (fa_cog :foreground "#FF9800")) ;; Variable
          (7 . (fa_cube :foreground "#7C4DFF")) ;; Class
          (8 . (fa_cube :foreground "#7C4DFF")) ;; Interface
          (9 . (fa_cube :foreground "#7C4DFF")) ;; Module
          (10 . (fa_cog :foreground "#FF9800")) ;; Property
          (11 . md_settings_system_daydream) ;; Unit
          (12 . (fa_cog :foreground "#FF9800")) ;; Value
          (13 . (md_storage :face font-lock-type-face)) ;; Enum
          (14 . (md_closed_caption :foreground "#009688")) ;; Keyword
          (15 . md_closed_caption) ;; Snippet
          (16 . (md_color_lens :face font-lock-doc-face)) ;; Color
          (17 . fa_file_text_o) ;; File
          (18 . md_refresh) ;; Reference
          (19 . fa_folder_open) ;; Folder
          (20 . (md_closed_caption :foreground "#009688")) ;; EnumMember
          (21 . (fa_square :face font-lock-constant-face)) ;; Constant
          (22 . (fa_cube :face font-lock-type-face)) ;; Struct
          (23 . fa_calendar) ;; Event
          (24 . fa_square_o) ;; Operator
          (25 . fa_arrows)) ;; TypeParameter
        )
  )

(use-package company-statistics
  :after company
  :hook (after-init . company-statistics-mode))

(use-package slime-company
  :after company
  :config
  (slime-setup '(slime-fancy slime-company)))

(use-package company-ansible
  :after company
  :config
  (add-to-list 'company-backends 'company-ansible))
#+END_SRC

** language server protocol

#+BEGIN_SRC emacs-lisp
(use-package lsp-mode
  ;; :hook
  ;; (prog-mode . lsp-mode)
  ;;(lsp-after-open . lsp-enable-imenu)
  :commands (lsp-mode
             lsp-define-stdio-client
             lsp-client-on-notification
             lsp-make-traverser))

(use-package lsp-ui
  :preface  (message "[INIT] Package: LSP UI")
  :after    lsp-mode
  :hook     ((lsp-mode  . lsp-ui-mode)
             (prog-mode . flycheck-mode))
  :commands (lsp-ui-mode
             lsp-ui-peek-find-definistions
             lsp-ui-peek-find-references)
  :config   (setq lsp-ui-doc-enable  t
		  lsp-ui-flychekc-enable t
		  lsp-ui-imenu-enale     nil
		  lsp-ui-peek-enable     t
		  lsp-ui-sideline-enable nil))

(use-package company-lsp
  :preface (message "[INIT] Package: Company LSP")
  :after (lsp-mode company)
  :config
  (push 'company-lsp company-backends))
#+END_SRC

** snippets
*** yasnippet

 [[https://github.com/joaotavora/yasnippet][YASnippet]] is a powerful snippet tool for Emacs.

#+BEGIN_SRC emacs-lisp
(use-package yasnippet-snippets)

(use-package yasnippet
  :config
  (yas-global-mode 1))
#+END_SRC

*** yankpad

[[https://github.com/Kungsgeten/yankpad][yankpad]] is an amazing complement to [[https://github.com/joaotavora/yasnippet][YASnippet]]. It allows having all your snippets in a
single ~org~ file, so you can take advantage of the powerful ~org-mode~ section/subsection
structure. To understand how it works check this [[https://kungsgeten.github.io/yankpad.html][blog post]].

#+BEGIN_SRC emacs-lisp
(use-package yankpad
  :config
  (validate-setq yankpad-file "~/org/yankpad.org"))
#+END_SRC

** text notation
*** ascii-doc

[[http://www.methods.co.nz/asciidoc/][AsciiDoc]] is a text document format for writing short documents, articles, books
and UNIX man pages. AsciiDoc files can be translated to HTML and DocBook
markups.

[[https://github.com/sensorflo/adoc-mode][adoc-mode]] is an Emacs major mode for editing AsciiDoc files. It emphasizes on
the idea that the document is highlighted so it pretty much looks like the final
output. What must be bold is bold, what must be italic is italic etc. Meta
characters are naturally still visible, but in a faint way, so they can be
easily ignored.

#+BEGIN_SRC emacs-lisp
(use-package adoc-mode
  :config
  (autoload 'adoc-mode "adoc-mode" nil t))
#+END_SRC
*** html

#+begin_src emacs-lisp
(use-package simple-httpd
  :disabled t
  :config
  ;;(setq httpd-root "/var/www")
  (httpd-start))

(use-package htmlize)
#+end_src

*** jinja2

#+BEGIN_SRC emacs-lisp
(use-package jinja2-mode
  :mode "\\.j2\\'")
#+END_SRC

*** json-mode

Installs json-mode and make its reformat keybinding match the global default.

#+BEGIN_SRC emacs-lisp
(use-package json-mode
  :commands json-mode
  :config
  (bind-keys :map json-mode-map
             ("C-c <tab>" . json-mode-beautify)))
#+END_SRC

*** markdown

Using also [[https://github.com/skeeto/impatient-mode][impatient-mode]] here, which allows live preview of the Markdown document. It is
developed for previewing HTML, but the functions included here allows the markdown
preview.

To use any of the functions, just =M-x imp-set-user-filter= in the markdown buffer, and
supply =markdown-html= when it asks for the function. Taken from [[http://wikemacs.org/wiki/Markdown#Live_preview_as_you_type][Wikemacs]].

#+BEGIN_SRC emacs-lisp
(use-package markdown-mode)

(use-package impatient-mode
  :disabled t
  :config
  (defun markdown-html (buffer)
    (princ (with-current-buffer buffer
             (format "<!DOCTYPE html><html><title>Impatient Markdown</title><xmp theme=\"united\" style=\"display:none;\"> %s  </xmp><script src=\"http://strapdownjs.com/v/0.2/strapdown.js\"></script></html>"
                     (buffer-substring-no-properties (point-min) (point-max))))
           (current-buffer)))

  (defun markdown-filter (buffer)
    (princ
     (with-temp-buffer
       (let ((tmpname (buffer-name)))
         (set-buffer buffer)
         (set-buffer (markdown tmpname)) ; the function markdown is in `markdown-mode.el'
         (buffer-string)))
     (current-buffer)))
  )

(use-package markdown-toc)
#+END_SRC

*** yaml

#+BEGIN_SRC emacs-lisp
(use-package yaml-mode)
#+END_SRC

** languages
*** python

#+BEGIN_SRC emacs-lisp
;; (use-package lsp-python
;;   :hook (python-mode . lsp-python-enable))

(setq python-indent 2)

(use-package anaconda-mode
  :hook ((python-mode . anaconda-mode)
         (python-mode . anaconda-eldoc-mode))
  :init
  (add-to-list 'auto-mode-alist '("\\.py$" . python-mode))
)

;; (use-package python
;;   :mode ("\\.py\\'" . python-mode)
;;   :hook ((python-mode . lsp-mode)
;; 	 (python-mode . lsp-python-enable)))

(use-package pyenv-mode
  :init
  (add-to-list 'exec-path "~/.pyenv/shims")
  (setenv "WORKON_HOME" "~/.pyenv/versions/")
  :config
  (pyenv-mode)
  :bind
  ("C-x p e" . pyenv-activate-current-project))


(defun projectile-pyenv-mode-set ()
  "Set pyenv version matching project name."
  (let ((project (projectile-project-name)))
    (if (member project (pyenv-mode-versions))
        (pyenv-mode-set project)
      (pyenv-mode-unset))))

(add-hook 'projectile-after-switch-project-hook 'projectile-pyenv-mode-set)

	#+END_SRC

*** rust

#+BEGIN_SRC emacs-lisp
(use-package rust-mode
  :mode "\\.rs\\'"
  :init
  (setq rust-format-on-save t))

(use-package lsp-rust
  :after lsp-mode)
#+END_SRC

*** slime

#+BEGIN_SRC emacs-lisp :tangle no
(use-package slime
  :config
  (load (expand-file-name "~/quicklisp/slime-helper.el"))
  (setq inferior-lisp-program "sbcl"))

(use-package elisp-slime-nav
  :after slime
  :config
  (dolist (hook '(emacs-lisp-mode-hook ielm-mode-hook))
    (add-hook hook 'turn-on-elisp-slime-nav-mode)))
#+END_SRC

*** sql
Emacs has SQLi mode buitin, which work pretty well to connect to databases. Here
I am configuring it for PostgreSQL, of course.

[[https://github.com/Trevoke/sqlup-mode.el][sqlup-mode]] is a minor mode to upcase SQL keyword and functions.

[[https://github.com/alex-hhh/emacs-sql-indent][sql-indent]] is a syntax based indentation for SQL files inside GNU Emacs.

#+BEGIN_SRC emacs-lisp
;; Make SQLi default to PostgreSQL syntax highlighti
;; https://blogs.gentoo.org/titanofold/2011/05/17/postgresql-syntax-highlighting-in-emacs/
(eval-after-load "sql"
  '(progn (sql-set-product 'postgres)))

;; Set default config for login
;; https://truongtx.me/2014/08/23/setup-emacs-as-an-sql-database-client/
(setq sql-postgres-login-params
      '((user :default "postgres")
        (database :default "postgres")
        (server)))

;; Truncate lines to better visualize many columns tables
;; Automatically renames the *SQL* buffer to *SQL user/database*
(add-hook 'sql-interactive-mode-hook
          (lambda ()
            (toggle-truncate-lines t)
            (sql-rename-buffer)))

(use-package sqlup-mode
  :bind (("C-c u" . sqlup-capitalize-keywords-in-region))
  :config
  (add-hook 'sql-mode-hook 'sqlup-mode)                ; capitalize keywords in SQL mode
  (add-hook 'sql-interactive-mode-hook 'sqlup-mode))   ; and in an interactive session (e.g. psql)

(use-package sql-indent
  :config
  (add-hook 'sql-mode-hook 'sqlind-minor-mode))
#+END_SRC

* Devops
** eshell

[[https://github.com/dakrone/eos/blob/master/eos-shell.org][source]]

My frustration with shells makes me enjoy Emacs Shell, but there are some
significant differences to address. To this end, I [[http://www.howardism.org/Technical/Emacs/eshell-fun.html][documented most features]].

#+BEGIN_SRC emacs-lisp
(setenv "LANG" "en_US.UTF-8")
(setenv "PAGER" "cat")
(setq eshell-scroll-to-bottom-on-input t)

;; Define a keybinding to get to your eshell quickly.
(global-set-key (kbd "C-c e") 'eshell)

;; Visual commands are commands which require a proper terminal.
;; eshell will run them in a term buffer when you invoke them.
(setq eshell-visual-commands
      '("less" "tmux" "htop" "top" "bash" "zsh" "fish"))
(setq eshell-visual-subcommands
      '(("git" "log" "l" "diff" "show")))

(setq eshell-cmpl-cycle-completions t)  ;TAB for suggestion

(add-hook 'eshell-mode-hook
          (lambda ()
            (setq-local show-trailing-whitespace nil)
            (semantic-mode -1)
            (hl-line-mode -1)
            (global-hl-line-mode -1)))

;; Define a pretty prompt.
(use-package eshell-git-prompt
  :config
  (eshell-git-prompt-use-theme 'powerline))

(add-hook 'eshell-mode-hook
          (lambda ()
            (define-key eshell-mode-map
              (kbd "<tab>") 'completion-at-point)))


;; Like Plan-9 shell
(use-package em-smart
  :ensure nil
  :init
  (add-hook 'eshell-mode-hook 'eshell-smart-initialize)
  :config
  (setq eshell-where-to-jump 'begin
        eshell-review-quick-commands nil
        eshell-smart-space-goes-to-end t))

(use-package eshell-bookmark
  :hook (eshell-mode . eshell-bookmark-setup))
#+END_SRC

*** better-shell

[[https://github.com/killdash9/better-shell][better-shell]] simplifies shell management and sudo access.

#+BEGIN_SRC emacs-lisp
(use-package better-shell
  :bind (("C-'" . better-shell-shell)
         ("C-;" . better-shell-remote-open)))
#+END_SRC

*** eshell history with counsel

Navigate eshell history using counsel. Keybinding to `C-c C-l` - [[http://informatica.boccaperta.com/m-x-emacs-history-di-eshell-con-counsel/][Boccaperta]]

FIXME: There's a bug on Eshell that forces the key-binding to be include using
the `add-hook` below (not nice!). As soon as the bug is fixed, add the
key-binding using `bind` from use-package:

:bind (:map eshell-mode-map
            ("C-c C-l" . mu-counsel-esh-history))

 #+BEGIN_SRC emacs-lisp
(defun mu-counsel-esh-history ()
  "Browse Eshell history."
  (interactive)
  (setq ivy-completion-beg (point))
  (setq ivy-completion-end (point))
  (ivy-read "Symbol name: "
            (delete-dups
             (ring-elements eshell-history-ring))
            :action #'ivy-completion-in-region-action))

(add-hook 'eshell-mode-hook
          #'(lambda ()
              (bind-key "C-c C-l" #'mu-counsel-esh-history
                        eshell-mode-map)))
 #+END_SRC

** tramp

#+BEGIN_SRC emacs-lisp
(setq tramp-default-method "ssh")
#+END_SRC

** ansible

#+BEGIN_SRC emacs-lisp
(use-package ansible
  :init
  (add-hook 'yaml-mode-hook '(lambda () (ansible 1))))

(use-package ansible-doc
  :after ansible
  :init
  (add-hook 'yaml-mode-hook #'ansible-doc-mode))
#+END_SRC

** docker

#+begin_src emacs-lisp
(use-package dockerfile-mode)

(use-package docker-compose-mode)

(use-package docker-tramp)
#+end_src

** puppet

#+BEGIN_SRC emacs-lisp
(use-package puppet-mode)
#+END_SRC

** vagrant

#+BEGIN_SRC emacs-lisp
(use-package vagrant)

(use-package vagrant-tramp
  :after vagrant
  :config
  (eval-after-load 'tramp '(vagrant-tramp-add-method)))
#+END_SRC

** ztree

#+BEGIN_SRC emacs-lisp
(use-package ztree)
#+END_SRC

* Tools
** dired - Directory Editing and Navigation

The best file-manager you can find ;). The keybinding below are to be used
inside a dired buffer.

Good dired tips can be found on [[http://ergoemacs.org/emacs/emacs_dired_tips.html][Xah Lee's blog]].

*** Keybindings

| *Key*     | *Command*                              | *Description*                                   |
|---------+--------------------------------------+-----------------------------------------------|
| ~^~       | =dired-up-directory=                   | go to parent directory                        |
| ~n~       | =dired-next-line=                      | go next line                                  |
| ~p~       | =dired-previous-line=                  | go prevous line                               |
| ~m~       | =dired-mark=                           | mark files/dir                                |
| ~u~       | =dired-unmark=                         | unmark files/dir                              |
| ~U~       | =dired-unmark-all-marks=               | unmark all marked                             |
| ~% m~     | =dired-mark-files-regexp=              | mark by pattern (regex)                       |
| ~!~       | =dired-do-shell-command=               | run shell command                             |
| ~&~       | =dired-do-async-shell-command=         | run shell commands asynchronously             |
| ~C~       | =dired-do-copy=                        | Copy file                                     |
| ~R~       | =dired-do-rename=                      | Rename/move file                              |
| ~D~       | =dired-do-delete=                      | Delete file or directory                      |
| ~c~       | =dired-do-compress-to=                 | compress marked files/dir. Details in [[http://oremacs.com/2015/10/23/dired-compress/][oremacs]] |
| ~Z~       | =dired-do-compress=                    | compress/decompress marked files              |
| ~z~       | =diredp-compress-this-file=            | compress/decompress file on cursor line       |
| ~/~       | =dired-narrow=                         | filter files                                  |
| ~a~       | =dired-find-alternate-file=            | open directory in the current buffer          |
| ~o~       | =dired-find-file-other-windows=        | open file on another window                   |
| ~F~       | =dired-do-find-marked-files=           | open all marked files                         |
| ~*.~      | =diredp-mark/unmark-extension=         | mark files by extension                       |
| ~+~       | =dired-create-directory=               | create a new directory                        |
| ~P~       | =peep-dired=                           | preview file at point                         |
| ~S~       | =dired-quick-sort=                     | sort files by name, type, size                |
| ~_~       | =xah-dired-rename-space-to-underscore= | rename file from space to underscore          |
| ~-~       | =xah-dired-rename-space-to-hyphen=     | rename file from space to hyphen              |
| ~g~       | =revert-buffer=                        | refresh dir listing                           |
| ~C-x C-p~ | =dired-toggle-read-only=               | make dired buffer writable                    |
| ~C-c C-c~ |                                      | apply the modifications on writable buffer    |
| ~C-c ESC~ |                                      | discard the modifications                     |
| ~C-u s~   | =dired-sort-toggle-or-edit=            | change `ls` switches on the fly               |

*** Main configuration

#+BEGIN_SRC emacs-lisp
(use-package dired
  :ensure nil
  :config
  (validate-setq
   ;;ls-lisp-dirs-first t
   ;; this is only for macOS - FIXME
   insert-directory-program "gls"
   dired-use-ls-dired t
   dired-listing-switches
   "-lhFG1v --group-directories-first"  ; add ls switches

   dired-ls-F-marks-symlinks t           ; -F marks links with @
   dired-dwim-target t                   ; when in a split windows, use other pane as target
   dired-recursive-copies 'always        ; copy dirs recursively
   dired-recursive-deletes 'top          ; ask before deleting dirs recursively
   delete-by-moving-to-trash t           ; don't delete files outright
   dired-auto-revert-buffer t            ; revert buffers on revisiting
   )

  (setq wdired-allow-to-change-permissions t)  ; allow editing file permissions

  (add-hook 'dired-mode-hook #'toggle-truncate-lines)   ; handle long file names
  (add-hook 'dired-mode-hook 'auto-revert-mode)         ; auto refresh dired when file changes
  )

;; Built into Emacs, it provides chgrp, chown, chmod and other functionalities
(use-package dired-aux
  :ensure nil)
#+END_SRC

*** dired-x

#+BEGIN_SRC emacs-lisp
(use-package dired-x
  :ensure nil
  :bind ("C-x C-j" . dired-jump)
  :config
  (validate-setq
   dired-clean-up-buffers-too t)          ; kill buffer of files/dir that are deleted in dired

  (add-hook 'dired-mode-hook (lambda () (dired-omit-mode)))
  (add-to-list 'dired-omit-extensions ".DS_Store"))
#+END_SRC

*** dired-plus

At some point Melpa has stopped indexing the code present on the Emacs wiki, so ~dired+~ and
a bunch of other packages got lost. It seems that most are being restored somewhere but
that hasn't been the case for ~dired+~ yet.

Of course, I could just copy the [[https://www.emacswiki.org/emacs/dired%2b.el][dired+.el]] file in my local path, but I will wait for now
until it appears somewhere, so I'm leaving it out of the tangling process.

[[https://github.com/zamansky/using-emacs/issues/4][source]]

#+BEGIN_SRC emacs-lisp :tangle no
(use-package dired+
  :ensure nil
  :config
  (validate-setq
   diredp-hide-details-initially-flag t
   diredp-hide-details-propagate-flag t)

  (diredp-toggle-find-file-reuse-dir 1)        ; use single buffer for all dired navigation
  (diredp-make-find-file-keys-reuse-dirs)

  ;; assign h and l to be used on dired mode (evil keys)
  ;; (eval-after-load 'dired
  ;;   '(evil-define-key 'normal dired-mode-map
  ;;      (kbd "h") 'diredp-up-directory-reuse-dir-buffer
  ;;      (kbd "l") 'diredp-find-file-reuse-dir-buffer))

  (customize-set-variable 'diredp-hide-details-initially-flag nil) ; keep showing info
  )
#+END_SRC

*** dired-async

Use async in everything in dired.

#+BEGIN_SRC emacs-lisp
(use-package dired-async
  :ensure nil
  :after async
  :config
  (dired-async-mode t)
  (autoload 'dired-async-mode "dired-async.el" nil t))
#+END_SRC

*** dired-quick-sort

[[https://gitlab.com/xuhdev/dired-quick-sort][dired-quick-sort]] provides persistent quick sorting of Dired buffers in various
ways with hydra.

#+BEGIN_SRC emacs-lisp
(use-package dired-quick-sort
  :config
  (dired-quick-sort-setup))
#+END_SRC

*** dired-hacks

[[https://github.com/Fuco1/dired-hacks][dired-hacks]] is a collection of useful dired additions.

**** dired-narrow

Dired narrowing allows filtering dired results dynamically with a filter. Very
cool.

#+BEGIN_SRC emacs-lisp
(use-package dired-narrow
  :bind (:map dired-mode-map
              ("/" . dired-narrow)))
#+END_SRC

**** dired-rainbow

#+BEGIN_SRC emacs-lisp
(use-package dired-rainbow)
#+END_SRC

*** peep-dired

[[https://github.com/asok/peep-dired][peep-dired]] is a convienent way to look up file contents in other window while
browsing directory in dired.

#+BEGIN_SRC emacs-lisp
(use-package peep-dired
  :bind (:map dired-mode-map
              ("P" . peep-dired))
  :config
  (validate-setq peep-dired-ignored-extensions '("mkv" "iso" "mp4")))
#+END_SRC

*** Icons in Dired buffers (and other buffers)

#+BEGIN_SRC emacs-lisp
(use-package all-the-icons-dired
  :after all-the-icons
  :init
  (add-hook 'dired-mode-hook 'all-the-icons-dired-mode))
#+END_SRC

*** Rename file from space to hyphen/underscore

Here's a command that rename files by replacing space to underscore _ or hyphen -.

In dired, just press a key, then the file under cursor (or marked files) will be
renamed with all space replaced to underscore.

#+BEGIN_SRC emacs-lisp
(defun xah-dired-rename-space-to-underscore ()
  "In dired, rename current or marked files by replacing space to underscore _.
If not in `dired', do nothing.
URL `http://ergoemacs.org/emacs/elisp_dired_rename_space_to_underscore.html'
Version 2017-01-02"
  (interactive)
  (require 'dired-aux)
  (if (equal major-mode 'dired-mode)
      (progn
        (mapc (lambda (x)
                (when (string-match " " x )
                  (dired-rename-file x (replace-regexp-in-string " " "_" x) nil)))
              (dired-get-marked-files ))
        (revert-buffer))
    (user-error "Not in dired.")))

(defun xah-dired-rename-space-to-hyphen ()
  "In dired, rename current or marked files by replacing space to hyphen -.
If not in `dired', do nothing.
URL `http://ergoemacs.org/emacs/elisp_dired_rename_space_to_underscore.html'
Version 2016-12-22"
  (interactive)
  (require 'dired-aux)
  (if (equal major-mode 'dired-mode)
      (progn
        (mapc (lambda (x)
                (when (string-match " " x )
                  (dired-rename-file x (replace-regexp-in-string " " "_" x) nil)))
              (dired-get-marked-files ))
        (revert-buffer))
    (user-error "Not in dired")))
#+END_SRC

*** Calculate size of directory

The title says it all. It is originally from the [[https://www.emacswiki.org/emacs/DiredGetFileSize][Wiki]] but I found it [[https://oremacs.com/2015/01/12/dired-file-size/][here]].

#+BEGIN_SRC emacs-lisp
(defun dired-get-size ()
  (interactive)
  (let ((files (dired-get-marked-files)))
    (with-temp-buffer
      (apply 'call-process "/usr/bin/du" nil t nil "-sch" files)
      (message
       "Size of all marked files: %s"
       (progn
         (re-search-backward "\\(^[ 0-9.,]+[A-Za-z]+\\).*total$")
         (match-string 1))))))
#+END_SRC

** define-word

Display the definition of word at point in Emacs. Another nice package from [[https://github.com/abo-abo/define-word][from abo-abo]].
It leverages the [[https://www.wordnik.com/][Wordnik]] dictionary site to get its definitions, so you have to be online.

#+BEGIN_SRC emacs-lisp
(use-package define-word)
#+END_SRC

** powerthesaurus

[[https://github.com/SavchenkoValeriy/emacs-powerthesaurus][emacs-powerthesaurus]] is a simple plugin to integrate Emacs with amazing[[https://www.powerthesaurus.org/][ powerthesaurus.org]].

#+BEGIN_SRC emacs-lisp
(use-package powerthesaurus)
#+END_SRC

** IRC (Internet Relay Chat)
IRC is a great way to hang out with other Emacs geeks. I use ERC for that and
the configuration here is adapted from [[https://github.com/bbatsov/prelude/blob/master/modules/prelude-erc.el][Prelude]].

#+BEGIN_SRC emacs-lisp
(use-package erc
  :config
  (progn
    (erc-track-mode t)                      ; track activities on chats
    (erc-truncate-mode +1)                  ; truncate long irc buffers
    (erc-spelling-mode 1)                   ; enable spell checking

    (setq erc-interpret-mirc-color t        ; interpret mIRC-style color commands in IRC chats
          erc-kill-buffer-on-part t         ; kill buffer for channels after /part
          erc-kill-queries-on-quit t        ; kill buffer for private queries after quitting the server
          erc-kill-server-buffer-on-quit t  ; kill buffer for server messages after quitting the server
          erc-query-display 'buffer         ; open query buffers in the current window
          erc-save-buffer-on-part t         ; logging

          ;; autoaway setup
          erc-auto-discard-away t
          erc-autoaway-idle-seconds 600
          erc-autoaway-use-emacs-idle t

          erc-server-coding-system '(utf-8 . utf-8) ; utf-8 always and forever

          erc-track-exclude-types '("JOIN" "NICK" "PART" "QUIT" "MODE"
                                    "324" "329" "332" "333" "353" "477") ; exclude these from tracking
          erc-hide-list '("JOIN" "PART" "QUIT" "NICK")  ; doesn't show any of these
          )

  ;; logging
  ;; (setq erc-log-channels-directory "~/.erc/logs/")

  ;; (if (not (file-exists-p erc-log-channels-directory))
  ;;     (mkdir erc-log-channels-directory t))

  (defvar erc-notify-nick-alist nil
    "Alist of nicks and the last time they tried to trigger a
  notification")

  (defvar erc-notify-timeout 10
    "Number of seconds that must elapse between notifications from
  the same person.")

  (defun erc-notify-allowed-p (nick &optional delay)
    "Return non-nil if a notification should be made for NICK.
  If DELAY is specified, it will be the minimum time in seconds
  that can occur between two notifications.  The default is
  `erc-notify-timeout'."
    (unless delay (setq delay erc-notify-timeout))
    (let ((cur-time (time-to-seconds (current-time)))
          (cur-assoc (assoc nick erc-notify-nick-alist))
          (last-time nil))
      (if cur-assoc
          (progn
            (setq last-time (cdr cur-assoc))
            (setcdr cur-assoc cur-time)
            (> (abs (- cur-time last-time)) delay))
        (push (cons nick cur-time) erc-notify-nick-alist)
        t)))

  (defun start-irc ()
    "Connect to IRC."
    (interactive)
    (when (y-or-n-p "Do you want to start IRC? ")
      (erc :server "irc.freenode.net"
           :port 6667
           :nick rubens)))

  ;; (defun erc-start-or-switch ()
  ;;   "Connect to ERC, or switch to last active buffer"
  ;;   (interactive)
  ;;   (if (get-buffer "irc.freenode.net:6667")  ; ERC already active?
  ;;       (erc-track-switch-buffer 1)           ; yes: switch to last active

  ;;     (when (y-or-n-p "Start ERC? ")          ; no: maybe start ERC
  ;;       (erc :server "irc.freenode.net"
  ;;            :port 6667
  ;;            :nick "rsouza"))))

  (defun filter-server-buffers ()
    (delq nil
          (mapcar
           (lambda (x) (and (erc-server-buffer-p x) x))
           (buffer-list))))

  (defun stop-irc ()
    "Disconnects from all irc servers"
    (interactive)
    (dolist (buffer (filter-server-buffers))
      (message "Server buffer: %s" (buffer-name buffer))
      (with-current-buffer buffer
        (erc-quit-server "Asta la vista"))))

  (setq erc-autojoin-channels-alist '(("freenode.net"
                                       "#org-mode"
                                       "#hacklabto"
                                       "#emacs"
                                       "#itpug-soci")))

  (require 'erc-log)
  (require 'erc-notify)
  (require 'erc-spelling)
  (require 'erc-autoaway)
  ))
#+END_SRC

** Spell and grammar checking


Emacs can help you writing better...I know, I know, this is relative, but the
tools here will try to help you with the language, at least ;)

Reading these articles will better explain the idea: [[https://joelkuiper.eu/spellcheck_emacs][Joel Kuiper's spellcheck emacs]]
and [[http://matt.might.net/articles/shell-scripts-for-passive-voice-weasel-words-duplicates/][Matt Might's weasel words]].

*** flyspell

It activates Spell Checking by default. Also uses hunspell instead of ispell as
corrector.

| *Key binding*                | *Command* | *Result*                        |
|----------------------------+---------+-------------------------------|
| flyspell-popup-correct     | =C-;=     | spell-check the word on point |
| flyspell-goto-next-error   | =C-,=     | got to the next error         |
| flyspell-auto-correct-word | =C-M-i=   | auto-correct the word         |
| flyspell-buffer            | =S s b=   | check the whole buffer        |
| flyspell-lazy-check-buffer | =S s z=   | check the whole buffer faster |
| switch-dictionary          | =S s d=   | switch dictionaries (GB-IT)   |

**** hunspell setup

1. Install Hunspell from your distribution package manager or use [[http://hunspell.sourceforge.net/][Hunspell page]]
2. Download the language dictionary extension from [[http://extensions.libreoffice.org/extension-center][Libreoffice]] or  [[http://extensions.openoffice.org/en/project/english-dictionaries-apache-openoffice][Openoffice]]
3. It will download the file ~<language>.oxt~. Rename it to ~<language>.zip~ and unzip
   it into a temporary folder.
4. Copy the ~<language>.dic~ and ~<language>.aff~ files from there to a folder where you save
   dictionary files, usually to =~/usr/local/share/hunspell/= or =~/usr/share/hunspell/=
5. Add that path to shell env variable ~DICPATH~: =setenv DICPATH $MYLOCAL/share/hunspell=
6. Restart emacs so that when hunspell is run by ispell/flyspell, that env variable is effective.

Hunspell will search for a dictionary called ~en_GB~ in the path specified by =$DICPATH=.

#+BEGIN_SRC emacs-lisp
(use-package ispell
  :if
  (and (eq system-type 'darwin)
       (setenv "DICPATH" "/Users/rubens/Library/Spelling")
       (setenv "DICTIONARY" "en_GB")
       (setenv "LANG" "en_GB"))
  :config
  (setq ispell-dictionary "en_GB")
  (setq ispell-program-name (executable-find "hunspell"))
  (setq ispell-extra-args '("-i" "utf-8"))
  (setq ispell-really-hunspell t)
  (setq ispell-check-comments  t)

  (unless ispell-program-name
    (warn "No spell checker available. Please install hunspell.")))

(use-package flyspell
  :defer t
  :hook ((prog-mode     . flyspell-prog-mode)
         (text-mode     . flyspell-mode)
         (org-mode      . flyspell-mode)
         (markdown-mode . flyspell-mode)
         (LaTeX-mode    . flyspell-mode))
  :config
  (progn
    (setq ispell-local-dictionary-alist '(("en_GB"
                                           "[[:alpha:]]"
                                           "[^[:alpha:]]"
                                           "[']" nil
                                           ("-d" "en_GB") nil utf-8)
                                          ("it_IT"
                                           "[[:alpha:]]"
                                           "[^[:alpha:]]"
                                           "[']" nil
                                           ("-d" "it_IT") nil utf-8)
                                          )))

  (setq flyspell-issue-welcome-flag nil  ; turn off flyspell welcome message
        flyspell-issue-message-flag nil) ; turn off flyspell messages when checking words
)

(use-package flyspell-correct-ivy       ; better interface for corrections
  :demand t
  :bind (:map flyspell-mode-map
              ("C-c $" . flyspell-correct-at-point)))
#+END_SRC

**** Switch dictionaries

Switch between the most used dictionaries in my case.

#+BEGIN_SRC emacs-lisp
(defun switch-dictionary ()
  (interactive)
  (let* ((dic ispell-current-dictionary)
         (change (if (string= dic "en_GB") "it_IT" "en_GB")))
    (ispell-change-dictionary change)
    (message "Dictionary switched from %s to %s" dic change)))

(global-set-key (kbd "<f8>") 'switch-dictionary)
#+END_SRC

**** flyspell-lazy

Flyspell usually slows down the responsiveness when writing texts. [[https://github.com/rolandwalker/flyspell-lazy][flyspell-lazy]]
is used to improve *Flyspell* responsiveness using idle timers.

#+BEGIN_SRC emacs-lisp
(use-package flyspell-lazy
  :after flyspell
  :config
  (flyspell-lazy-mode 1))
#+END_SRC

**** flyspell-popup

[[https://github.com/xuchunyang/flyspell-popup][Flyspell-popup]] is used to correct words with Flyspell in popup menus.

#+BEGIN_SRC emacs-lisp
(use-package flyspell-popup
  :after flyspell
  :bind (:map flyspell-mode-map
              ("C-;" . flyspell-popup-correct)))
#+END_SRC

*** languagetool

[[https://www.languagetool.org/][LanguageTool]] is an Open Source proof­reading program for English, French,
German, Polish, and more than 20 other languages.

#+BEGIN_SRC emacs-lisp
(use-package langtool
  :bind (("C-x 4 w" . langtool-check)                   ; check buffer and show warnings
         ("C-x 4 W" . langtool-check-done)              ; finish checking and remove markers
         ("C-x 4 l" . langtool-switch-default-language) ; swicth languages
         ("C-x 4 n" . langtool-goto-next-error)         ; go to the next error
         ("C-x 4 4" . langtool-show-message-at-point)   ; show the warning at point
         ("C-x 4 c" . langtool-correct-buffer)          ; correct markers
         )
  :config
  (cond ((system-is-linux)
         (validate-setq
          langtool-language-tool-jar "/usr/share/java/languagetool/languagetool-commandline.jar"))
        ((system-is-mac)
         (validate-setq
          langtool-language-tool-jar "/usr/local/Cellar/languagetool/3.9/libexec/languagetool-commandline.jar")))

  (validate-setq langtool-java-bin "/usr/bin/java"
                 langtool-mother-tongue "en")

  (setq langtool-disabled-rules '("WHITESPACE_RULE"
                                  "EN_UNPAIRED_BRACKETS"
                                  "COMMA_PARENTHESIS_WHITESPACE"
                                  "EN_QUOTES"))

  ;; show suggestions in a popup
  (defun langtool-autoshow-detail-popup (overlays)
    (when (require 'popup nil t)
      ;; Do not interrupt current popup
      (unless (or popup-instances
                  ;; suppress popup after type `C-g` .
                  (memq last-command '(keyboard-quit)))
        (let ((msg (langtool-details-error-message overlays)))
          (popup-tip msg)))))

  (validate-setq langtool-autoshow-message-function
                 'langtool-autoshow-detail-popup))
#+END_SRC

*** writegood

[[https://github.com/bnbeckwith/writegood-mode][Writegood]] is a minor mode to aid in finding common writing problems. It
highlights text based on a set of weasel-words, passive-voice and duplicate
words. [[http://matt.might.net/articles/shell-scripts-for-passive-voice-weasel-words-duplicates/][Matt Might’s weaselwords scripts]] inspired this mode.

#+BEGIN_SRC emacs-lisp
(use-package writegood-mode
  :disabled t
  :config
  (progn
    (add-hook 'org-mode-hook      'writegood-mode)
    (add-hook 'text-mode-hook     'writegood-mode)
    (add-hook 'markdown-mode-hook 'writegood-mode)))
#+END_SRC

** pdf-tools

[[https://www.reddit.com/r/emacs/comments/44yxsq/pdf_tools/][source]] - [[https://www.reddit.com/r/emacs/comments/7ux1qj/using_auctex_mode_to_sync_latex_documents_and/][sync LaTeX docucmentos when compiling]]

#+BEGIN_SRC emacs-lisp
;; (setq-default TeX-master nil)
;; (setq TeX-parse-self t)
;; (setq TeX-auto-save t)
;; (setq TeX-save-query nil)

;; ;; revert pdf-view after compilation
;;(add-hook 'TeX-after-compilation-finished-functions #'TeX-revert-document-buffer)

;; set PKG_CONFIG_PATH variable in order to compile pdf-tools successfully on MacOS
(when (system-is-mac)
  (setenv "PKG_CONFIG_PATH" "/opt/X11/lib/pkgconfig"))

(use-package pdf-tools
  :config
  (pdf-tools-install)
  (setq TeX-view-program-selection '((output-pdf "pdf-tools"))
        ;;TeX-view-program-selection '((output-pdf "PDF Tools"))
        TeX-view-program-list '(("pdf-tools" "TeX-pdf-tools-sync-view"))
        TeX-source-correlate-start-server t)

  (setq-default pdf-view-display-size 'fit-page)
  (bind-keys :map pdf-view-mode-map
             ("\\" . hydra-pdftools/body)
             ("<s-spc>" .  pdf-view-scroll-down-or-next-page)
             ("g"  . pdf-view-first-page)
             ("G"  . pdf-view-last-page)
             ("l"  . image-forward-hscroll)
             ("h"  . image-backward-hscroll)
             ("j"  . pdf-view-next-page)
             ("k"  . pdf-view-previous-page)
             ("e"  . pdf-view-goto-page)
             ("u"  . pdf-view-revert-buffer)
             ("al" . pdf-annot-list-annotations)
             ("ad" . pdf-annot-delete)
             ("aa" . pdf-annot-attachment-dired)
             ("am" . pdf-annot-add-markup-annotation)
             ("at" . pdf-annot-add-text-annotation)
             ("y"  . pdf-view-kill-ring-save)
             ("i"  . pdf-misc-display-metadata)
             ("s"  . pdf-occur)
             ("b"  . pdf-view-set-slice-from-bounding-box)
             ("r"  . pdf-view-reset-slice)))

(use-package org-pdfview
  :after pdf-tools
  :config
  (add-to-list 'org-file-apps
               '("\\.pdf\\'" . (lambda (file link)
                                 (org-pdfview-open link)))))

;; hydra

(defhydra hydra-pdftools (:color blue :hint nil)
  "
                                                                      ╭───────────┐
       Move  History   Scale/Fit     Annotations  Search/Link    Do   │ PDF Tools │
   ╭──────────────────────────────────────────────────────────────────┴───────────╯
         ^^_g_^^      _B_    ^↧^    _+_    ^ ^     [_al_] list    [_s_] search    [_u_] revert buffer
         ^^^↑^^^      ^↑^    _H_    ^↑^  ↦ _W_ ↤   [_am_] markup  [_o_] outline   [_i_] info
         ^^_p_^^      ^ ^    ^↥^    _0_    ^ ^     [_at_] text    [_F_] link      [_d_] dark mode
         ^^^↑^^^      ^↓^  ╭─^─^─┐  ^↓^  ╭─^ ^─┐   [_ad_] delete  [_f_] search link
    _h_ ←pag_e_→ _l_  _N_  │ _P_ │  _-_    _b_     [_aa_] dired
         ^^^↓^^^      ^ ^  ╰─^─^─╯  ^ ^  ╰─^ ^─╯   [_y_]  yank
         ^^_n_^^      ^ ^  _r_eset slice box
         ^^^↓^^^
         ^^_G_^^
   --------------------------------------------------------------------------------
        "
  ("\\" hydra-master/body "back")
  ("<ESC>" nil "quit")
  ("al" pdf-annot-list-annotations)
  ("ad" pdf-annot-delete)
  ("aa" pdf-annot-attachment-dired)
  ("am" pdf-annot-add-markup-annotation)
  ("at" pdf-annot-add-text-annotation)
  ("y"  pdf-view-kill-ring-save)
  ("+" pdf-view-enlarge :color red)
  ("-" pdf-view-shrink :color red)
  ("0" pdf-view-scale-reset)
  ("H" pdf-view-fit-height-to-window)
  ("W" pdf-view-fit-width-to-window)
  ("P" pdf-view-fit-page-to-window)
  ("n" pdf-view-next-page-command :color red)
  ("p" pdf-view-previous-page-command :color red)
  ("d" pdf-view-dark-minor-mode)
  ("b" pdf-view-set-slice-from-bounding-box)
  ("r" pdf-view-reset-slice)
  ("g" pdf-view-first-page)
  ("G" pdf-view-last-page)
  ("e" pdf-view-goto-page)
  ("o" pdf-outline)
  ("s" pdf-occur)
  ("i" pdf-misc-display-metadata)
  ("u" pdf-view-revert-buffer)
  ("F" pdf-links-action-perfom)
  ("f" pdf-links-isearch-link)
  ("B" pdf-history-backward :color red)
  ("N" pdf-history-forward :color red)
  ("l" image-forward-hscroll :color red)
  ("h" image-backward-hscroll :color red))
#+END_SRC

* Appearance
** Themes
*** main theme

Here is a list of some themes I like. Just enable it on the configuration below;
don't forget the disable the one that is active.

- [[https://github.com/jordonbiondo/ample-theme][ample-themes]]
- [[https://github.com/waymondo/apropospriate-theme][apropospriate-theme]]
- [[https://github.com/hlissner/emacs-doom-theme][doom-theme]]
- [[https://github.com/fniessen/emacs-leuven-theme][leuven-theme]]
- [[https://github.com/cpaulik/emacs-material-theme][material-theme]]
- [[https://github.com/oneKelvinSmith/monokai-emacs][monokai-theme]]
- [[https://github.com/purcell/color-theme-sanityinc-tomorrow][sanityinc-tomorrow]]
- [[https://github.com/bbatsov/solarized-emacs][solarized-theme]]
- [[https://github.com/nashamri/spacemacs-theme][spacemacs-theme]]
- [[https://github.com/bbatsov/zenburn-emacs][zenburn-theme]]
- [[https://gitlab.petton.fr/nico/zerodark-theme][zerodark-theme]]

Some themes, as solarized and material, change the pitch size of org-headers, leaving them
a little too big for someone's taste. Of course, as this is Emacs, they can be adjusted.
Check the changes required for the [[https://gist.github.com/rubensts/a0d8786a633bd2aa8eacd1ea9f52a694][material-theme]] and, also, for the [[https://github.com/bbatsov/solarized-emacs#theme-specific-settings][solarized-theme]].

#+BEGIN_SRC emacs-lisp
(use-package spacemacs-theme
  :disabled t
  :no-require t
  :init
  (load-theme 'spacemacs-light t))

(use-package doom-themes
  :init
  (setq doom-themes-enable-bold t     ; bold is universally enable
        doom-themes-enable-italic t)  ; italics is universally enabled
  (load-theme 'doom-one t)
  :config
  (doom-themes-visual-bell-config)  ; flashes mode-line on errors
  (doom-themes-org-config))         ; corrects (and improves) org-mode's native fontification

(use-package leuven-theme
  :disabled t
  :init
  (load-theme 'leuven t))

(use-package gruvbox-theme
  :disabled t
  :config
  (load-theme 'gruvbox-light-soft t))

(use-package poet-theme
  :disabled t
  :init
  (load-theme 'poet t)
  :config
  (add-to-list 'default-frame-alist '(ns-transparent-titlebar . t))
  (add-to-list 'default-frame-alist '(ns-appearance . light)))
 #+END_SRC

*** [[https://github.com/hlissner/emacs-solaire-mode][solaire-mode]]

#+BEGIN_QUOTE
solaire-mode is an aesthetic plugin that helps visually distinguish file-visiting windows
from other types of windows (like popups or sidebars) by giving them a slightly different
-- often brighter -- background.
#+END_QUOTE

#+BEGIN_SRC emacs-lisp
(use-package solaire-mode
  :hook (((after-change-major-mode after-revert) . turn-on-solaire-mode)
         (ediff-prepare-buffer . solaire-mode)
         (minibuffer-setup . solaire-mode-in-minibuffer))
  :config
  (solaire-mode-swap-bg)
  (advice-add #'persp-load-state-from-file
              :after #'solaire-mode-restore-persp-mode-buffers))
#+END_SRC

** Modeline

#+BEGIN_SRC emacs-lisp
;; (use-package spaceline)

;; (use-package spaceline-config
;;   :ensure nil
;;   :config
;;   (spaceline-spacemacs-theme))

(use-package spaceline
  :disabled t
  :config
  (progn
    (require 'spaceline-config)
    (spaceline-spacemacs-theme)
    (validate-setq powerline-default-separator 'wave)
    (spaceline-toggle-minor-modes-off)
    (spaceline-compile)
    ))

(use-package spaceline-all-the-icons
  :disabled t
  ;; :after spaceline
  :config
  (spaceline-all-the-icons-theme)
  (spaceline-all-the-icons--setup-anzu)      ; enable anzu searching
  (spaceline-all-the-icons--setup-git-ahead) ; enable # of commits ahead of upstream in git
  )

(use-package doom-modeline
  ;; :disabled t
  :hook (after-init . doom-modeline-init))
#+END_SRC

** Fonts
*** Font selection

There are many beautiful fonts that can be selected here. As I prefer to enjoy all the
power of Emacs GUI (we aren't in the 70's anymore, are we? ;)) I keep between ~Source Code
Pro~ and ~Fira Code~.

If you want to try using font ligatures, check [[https://github.com/tonsky/FiraCode/wiki/Setting-up-Emacs][here for Fira Code instructions]].

**** test 1

#+BEGIN_SRC emacs-lisp :tangle no
;; (let* ((variable-tuple
;;         (cond ((x-list-fonts "Source Sans Pro") '(:font "Source Sans Pro"))
;;               ((x-list-fonts "Lucida Grande")   '(:font "Lucida Grande"))
;;               ((x-list-fonts "Verdana")         '(:font "Verdana"))
;;               ((x-family-fonts "Sans Serif")    '(:family "Sans Serif"))
;;               (nil (warn "Cannot find a Sans Serif Font.  Install Source Sans Pro."))))
;;        (base-font-color     (face-foreground 'default nil 'default))
;;        (headline           `(:inherit default :weight bold :foreground ,base-font-color))
;;        )

;;   (custom-theme-set-faces
;;    'user
;;    `(org-level-8 ((t (,@headline ,@variable-tuple))))
;;    `(org-level-7 ((t (,@headline ,@variable-tuple))))
;;    `(org-level-6 ((t (,@headline ,@variable-tuple))))
;;    `(org-level-5 ((t (,@headline ,@variable-tuple))))
;;    `(org-level-4 ((t (,@headline ,@variable-tuple :height 1.0))))
;;    `(org-level-3 ((t (,@headline ,@variable-tuple :height 1.0))))
;;    `(org-level-2 ((t (,@headline ,@variable-tuple :height 1.1))))
;;    `(org-level-1 ((t (,@headline ,@variable-tuple :height 1.25))))
;;   `(org-document-title ((t (,@headline ,@variable-tuple :height 1.25 :underline nil))))))

(custom-theme-set-faces
 'user
 '(variable-pitch ((t (:family "Source Sans Pro"
                               :height 120
                               ;; :weight normal
                               ))))
 '(fixed-pitch ((t (:family "FuraCode Nerd Font"
                            ;;:slant normal
                            ;;:weight normal
                            :height 100
                            ;;:width normal
                            )))))

(add-hook 'org-mode-hook 'variable-pitch-mode)
(add-hook 'org-mode-hook 'visual-line-mode)

(custom-theme-set-faces
 'user
 '(org-block                 ((t (:inherit fixed-pitch))))
 ;;'(org-document-info         ((t (:foreground "dark orange"))))
 '(org-document-info-keyword ((t (:inherit (shadow fixed-pitch)))))
 ;;'(org-link                  ((t (:foreground "royal blue" :underline t))))
 '(org-meta-line             ((t (:inherit (font-lock-comment-face fixed-pitch)))))
 '(org-property-value        ((t (:inherit fixed-pitch))) t)
 '(org-special-keyword       ((t (:inherit (font-lock-comment-face fixed-pitch)))))
 '(org-tag                   ((t (:inherit (shadow fixed-pitch) :weight bold :height 0.8))))
 '(org-verbatim              ((t (:inherit (shadow fixed-pitch))))))

;; (custom-theme-set-variables
;;  gruvbox-light-medium
;;  '(line-spacing 0.1))
#+END_SRC

**** test 2

#+BEGIN_SRC emacs-lisp
(cond ((system-is-linux)
       (set-face-attribute 'default nil
                           ;;:family "Source Code Pro"
                           :family "SauceCodePro Nerd Font"
                           :height 90))
      ((system-is-mac)
       (set-face-attribute 'default nil
                           ;;:family "FuraCode Nerd Font"
                           :family "SauceCodePro Nerd Font"
                           :height 110)

       ;; Enable emoji, and stop the UI from freezing when trying to display them.
       ;;(if (fboundp 'set-fontset-font)
       ;;    (set-fontset-font t 'unicode "Apple Color Emoji" nil 'prepend))
       ))

;; Set a font with great support for Unicode Symbols to fallback in those case
;; where certain Unicode glyphs are missing in the current font.
;; Test range: 🐷 ❤ ⊄ ∫ 𝛼 α 🜚 Ⓚ
;;(set-fontset-font "fontset-default" nil
;;                 (font-spec :size 100 :name "SauceCodePro Nerd"))
#+END_SRC

**** test 3

#+BEGIN_SRC emacs-lisp :tangle no
(set-face-attribute 'default nil :family "FuraCode Nerd Font" :height 100)
(set-face-attribute 'fixed-pitch nil :family "FuraCode Nerd Font")
(set-face-attribute 'variable-pitch nil :family "Source Sans Pro" :height 120)

(add-hook 'text-mode-hook
          (lambda ()
            (variable-pitch-mode 1)))

(add-hook 'text-mode-hook 'variable-pitch-mode)
#+END_SRC

**** test 4

#+BEGIN_SRC emacs-lisp :tangle no
;;; config.el --- rogue Layer config File for Spacemacs
;; Mostly theme configuration

(require 'color)

(defvar r-dark-theme 'doom-molokai)
(defvar r-light-theme 'spacemacs-light)

(defvar r-current-theme r-dark-theme
  "Currently active color scheme")

(defmacro r-set-pair-faces (themes consts faces-alist)
  "Macro for pair setting of custom faces.
THEMES name the pair (theme-one theme-two). CONSTS sets the variables like
  ((sans-font \"Some Sans Font\") ...). FACES-ALIST has the actual faces
like:
  ((face1 theme-one-attr theme-two-atrr)
   (face2 theme-one-attr nil           )
   (face3 nil            theme-two-attr)
   ...)"
  (defmacro r--get-proper-faces ()
    `(let* (,@consts)
       (backquote ,faces-alist)))

  `(setq theming-modifications
         ',(mapcar (lambda (theme)
                     `(,theme ,@(cl-remove-if
                                 (lambda (x) (equal x "NA"))
                                 (mapcar (lambda (face)
                                           (let ((face-name (car face))
                                                 (face-attrs (nth (cl-position theme themes) (cdr face))))
                                             (if face-attrs
                                                 `(,face-name ,@face-attrs)
                                               "NA"))) (r--get-proper-faces)))))
                   themes)))

(r-set-pair-faces
 ;; Themes to cycle in
 (doom-molokai spacemacs-light)

 ;; Variables
 (;; Palette from desktop color scheme
  (dark-1             "#2E3440")
  (dark-2             "#3B4252")
  (dark-3             "#434C5E")
  (dark-4             "#4C566A")
  (light-1            "#D8DEE9")
  (light-2            "#E5E9F0")
  (light-3            "#ECEFF4")
  (accent-dark        "#1C2028")
  (accent-dark-gray   (color-darken-name accent-dark 1))
  (accent-light       "#8a9899")
  (accent-shade-1     "#8FBCBB")
  (accent-shade-2     "#88C0D0")
  (accent-shade-3     "#81A1C1")
  (accent-shade-4     "#5E81AC")
  (colors-blue        accent-shade-4)
  (colors-red         "#BF616A")
  (colors-orange      "#D08770")
  (colors-yellow      "#EBCB8B")
  (colors-green       "#A3BE8C")
  (colors-purple      "#B48EAD")

  ;; For use in levelified faces set
  (level-1            colors-blue)
  (level-2            colors-red)
  (level-3            colors-purple)
  (level-4            colors-orange)
  (level-5            accent-shade-3)
  (level-6            colors-green)
  (level-7            accent-shade-2)
  (level-8            colors-yellow)
  (level-9            accent-shade-1)

  ;; Base gray shades
  (bg-white           "#FEFFF9")
  (bg-dark            accent-dark-gray)
  (bg-darker          accent-dark)
  (bg-dark-solaire    (color-lighten-name accent-dark 2))
  (fg-white           light-3)
  (shade-white        (color-lighten-name light-1 10))
  (highlight          (color-lighten-name accent-dark 4))
  (region-dark        (color-lighten-name accent-dark 2))
  (region             dark-3)
  (slate              accent-shade-3)
  (gray               (color-lighten-name dark-4 20))

  ;; Programming
  (comment            (color-lighten-name dark-4 2))
  (doc                (color-lighten-name dark-4 20))
  (keyword            colors-red)
  (builtin            colors-orange)
  (variable-name      colors-yellow)
  (function-name      accent-shade-2)
  (constant           colors-purple)
  (type               accent-shade-1)
  (string             colors-green)

  ;; Fonts
  (sans-font          "Iosevka")
  (et-font            "EtBembo")
  (mono-font          "Iosevka"))

 ;; Settings
 ((cfw:face-annotation
   (:foreground ,doc)
   nil)
  (cfw:face-day-title
   (:foreground ,doc)
   nil)
  (cfw:face-default-content
   (:foreground ,colors-blue)
   nil)
  (cfw:face-default-day
   (:foreground ,fg-white)
   nil)
  (cfw:face-disable
   (:foreground ,doc)
   nil)
  (cfw:face-grid
   (:foreground ,comment)
   nil)
  (cfw:face-header
   (:foreground ,keyword
                :weight bold)
   nil)
  (cfw:face-holiday
   (:foreground ,builtin)
   nil)
  (cfw:face-periods
   (:foreground ,colors-blue)
   nil)
  (cfw:face-saturday
   (:foreground ,doc
                :weight bold)
   nil)
  (cfw:face-select
   (:background ,region)
   nil)
  (cfw:face-sunday
   (:foreground ,doc)
   nil)
  (cfw:face-title
   (:height 2.0
            :inherit variable-pitch
            :weight bold
            :foreground ,doc)
   nil)
  (cfw:face-today
   (:background ,region
                :weight bold)
   nil)
  (cfw:face-today-title
   (:background ,keyword
                :foreground ,fg-white)
   nil)
  (cfw:face-toolbar
   (:inherit default)
   nil)
  (cfw:face-toolbar-button-off
   (:foreground ,doc)
   nil)
  (cfw:face-toolbar-button-on
   (:foreground ,type
                :weight bold)
   nil)
  (company-scrollbar-bg
   (:background ,bg-darker)
   nil)
  (company-scrollbar-fg
   (:background ,comment)
   nil)
  (company-tooltip
   (:background ,bg-darker
                :foreground ,doc)
   nil)
  (company-tooltip-common
   (:foreground ,keyword)
   nil)
  (company-tooltip-mouse
   (:background ,accent-shade-3)
   nil)
  (company-tooltip-selection
   (:background ,highlight)
   nil)
  (company-tootip-annotation
   (:foreground ,type)
   nil)
  (coq-cheat-face
   (:inherit font-lock-warning-face)
   (:inherit font-lock-warning-face))
  (coq-context-qualifier-face
   (:inherit font-lock-keyword-face)
   (:inherit font-lock-keyword-face))
  (coq-question-mark-face
   (:inherit font-lock-warning-face)
   (:inherit font-lock-warning-face))
  (coq-solve-tactics-face
   (:inherit font-lock-function-name-face)
   (:inherit font-lock-function-name-face))
  (coq-symbol-binder-face
   (:inherit font-lock-type-face)
   (:inherit font-lock-type-face))
  (coq-symbol-face
   (:inherit font-lock-builtin-face)
   (:inherit font-lock-builtin-face))
  (cursor
   (:background ,colors-red)
   nil)
  (default
    (:background ,bg-dark)
    (:background ,bg-white))
  (dired-subtree-depth-1-face
   (:background nil)
   nil)
  (dired-subtree-depth-2-face
   (:background nil)
   nil)
  (dired-subtree-depth-3-face
   (:background nil)
   nil)
  (dired-subtree-depth-4-face
   (:background nil)
   nil)
  (dired-subtree-depth-5-face
   (:background nil)
   nil)
  (dired-subtree-depth-6-face
   (:background nil)
   nil)
  (doom-neotree-data-file-face
   (:height 1.0
            :foreground ,doc)
   (:family ,sans-font
            :height 1.0
            :foreground ,doc))
  (doom-neotree-dir-face
   (:foreground ,keyword
                :height 1.0)
   (:family ,sans-font
            :height 1.0))
  (doom-neotree-file-face
   (:height 1.0)
   (:family ,sans-font
            :height 1.0))
  (doom-neotree-hidden-file-face
   (:height 1.0
            :foreground ,comment)
   (:family ,sans-font
            :height 1.0
            :foreground ,comment))
  (doom-neotree-media-file-face
   (:height 1.0
            :foreground ,type)
   (:family ,sans-font
            :height 1.0
            :foreground ,type))
  (doom-neotree-text-file-face
   (:height 1.0)
   (:family ,sans-font
            :height 1.0))
  (eval-sexp-fu-flash
   (:background ,colors-blue
                :foreground ,fg-white)
   nil)
  (eval-sexp-fu-flash-error
   (:background ,keyword
                :foreground ,fg-white)
   nil)
  (fixed-pitch
   (:family ,mono-font)
   (:family ,mono-font))
  (flycheck-error
   (:background nil)
   nil)
  (flycheck-warning
   (:background nil)
   nil)
  (font-latex-sectioning-0-face
   (:foreground ,type
                :height 1.2)
   nil)
  (font-latex-sectioning-1-face
   (:foreground ,type
                :height 1.1)
   nil)
  (font-latex-sectioning-2-face
   (:foreground ,type
                :height 1.1)
   nil)
  (font-latex-sectioning-3-face
   (:foreground ,type
                :height 1.0)
   nil)
  (font-latex-sectioning-4-face
   (:foreground ,type
                :height 1.0)
   nil)
  (font-latex-sectioning-5-face
   (:foreground ,type
                :height 1.0)
   nil)
  (font-latex-verbatim-face
   (:foreground ,builtin)
   nil)
  (font-lock-builtin-face
   (:foreground ,builtin)
   nil)
  (font-lock-comment-face
   (:foreground ,doc
                :slant italic)
   (:background nil
                :foreground ,doc
                :slant italic))
  (font-lock-constant-face
   (:foreground ,constant)
   nil)
  (font-lock-doc-face
   (:foreground ,doc)
   nil)
  (font-lock-function-name-face
   (:foreground ,function-name)
   nil)
  (font-lock-keyword-face
   (:foreground ,keyword)
   nil)
  (font-lock-string-face
   (:foreground ,string)
   nil)
  (font-lock-type-face
   (:foreground ,type)
   nil)
  (font-lock-variable-name-face
   (:foreground ,variable-name)
   nil)
  (git-gutter-fr:added
   (:foreground ,string)
   nil)
  (git-gutter-fr:modified
   (:foreground ,colors-blue)
   nil)
  (hackernews-comment-count
   (:foreground ,string)
   nil)
  (hackernews-link
   (:foreground ,slate)
   nil)
  (header-line
   (:background nil :inherit nil)
   (:background nil :inherit nil))
  (helm-M-x-key
   (:foreground ,builtin)
   nil)
  (helm-buffer-file
   (:background nil)
   (:background ,bg-white))
  (helm-ff-directory
   (:foreground ,builtin)
   (:background ,bg-white))
  (helm-ff-dotted-symlink-directory
   (:background nil)
   nil)
  (helm-ff-file
   (:background nil)
   (:background ,bg-white))
  (helm-ff-prefix
   (:foreground ,keyword)
   nil)
  (helm-ff-symlink
   (:foreground ,slate)
   nil)
  (helm-grep-match
   (:foreground ,constant)
   nil)
  (helm-match
   (:foreground ,keyword)
   nil)
  (helm-selection
   (:background ,highlight)
   nil)
  (helm-separator
   (:foreground ,keyword)
   nil)
  (highlight
   (:background ,highlight
                :foreground ,fg-white)
   (:background ,shade-white))
  (highlight-numbers-number
   (:foreground ,constant)
   nil)
  (hl-line
   (:background ,region-dark)
   nil)
  (ido-first-match
   (:foreground ,constant)
   nil)
  (js2-error
   (:foreground nil :inherit font-lock-keyword-face)
   (:foreground nil :inherit font-lock-keyword-face))
  (js2-external-variable
   (:foreground nil :inherit font-lock-variable-name-face)
   (:foreground nil :inherit font-lock-variable-name-face))
  (js2-function-call
   (:foreground nil :inherit font-lock-function-name-face)
   (:foreground nil :inherit font-lock-function-name-face))
  (js2-function-param
   (:foreground nil :inherit font-lock-constant-face)
   (:foreground nil :inherit font-lock-constant-face))
  (js2-instance-member
   (:foreground nil :inherit font-lock-variable-face)
   (:foreground nil :inherit font-lock-variable-face))
  (js2-jsdoc-html-tag-name
   (:foreground nil :inherit font-lock-string-face)
   (:foreground nil :inherit font-lock-string-face))
  (js2-jsdoc-html-tag-delimiter
   (:foreground nil :inherit font-lock-type-face)
   (:foreground nil :inherit font-lock-type-face))
  (js2-jsdoc-tag
   (:foreground nil :inherit font-lock-comment-face)
   (:foreground nil :inherit font-lock-comment-face))
  (js2-jsdoc-type
   (:foreground nil :inherit font-lock-type-face)
   (:foreground nil :inherit font-lock-type-face))
  (js2-jsdoc-value
   (:foreground nil :inherit font-lock-doc-face)
   (:foreground nil :inherit font-lock-doc-face))
  (js2-object-property
   (:foreground nil :inherit font-lock-type-face)
   (:foreground nil :inherit font-lock-type-face))
  (js2-object-property-access
   (:foreground nil :inherit font-lock-type-face)
   (:foreground nil :inherit font-lock-type-face))
  (js2-private-function-call
   (:foreground nil :inherit font-lock-function-name-face)
   (:foreground nil :inherit font-lock-function-name-face))
  (js2-private-member
   (:foreground nil :inherit font-lock-builtin-face)
   (:foreground nil :inherit font-lock-builtin-face))
  (line-number-current-line
   (:foreground ,builtin)
   (:foreground ,bg-dark))
  (link
   (:foreground ,slate)
   nil)
  (linum
   (:background nil)
   (:background ,bg-white))
  (lsp-face-highlight-read
   (:background nil
                :foreground nil
                :underline ,colors-blue)
   nil)
  (lsp-face-highlight-textual
   (:background nil
                :foreground nil
                :underline ,colors-blue)
   nil)
  (lsp-face-highlight-write
   (:background nil
                :foreground nil
                :underline ,colors-blue)
   nil)
  (magit-branch-current
   (:foreground ,colors-purple)
   nil)
  (magit-branch-local
   (:foreground ,colors-blue)
   nil)
  (magit-branch-remote
   (:foreground ,colors-green)
   nil)
  (magit-diff-added
   (:background ,(color-darken-name (color-desaturate-name colors-green 20) 50)
                :foreground ,(color-darken-name colors-green 10))
   nil)
  (magit-diff-added-highlight
   (:background ,(color-darken-name (color-desaturate-name colors-green 20) 45)
                :foreground ,colors-green)
   nil)
  (magit-diff-file-heading-selection
   (:background ,region
                :foreground ,fg-white)
   nil)
  (magit-diff-hunk-heading
   (:background ,region
                :foreground ,gray)
   nil)
  (magit-diff-hunk-heading-highlight
   (:background ,region
                :foreground ,fg-white)
   nil)
  (magit-diff-lines-heading
   (:background ,colors-orange
                :weight bold
                :foreground ,bg-dark)
   nil)
  (magit-diff-removed
   (:background ,(color-darken-name (color-desaturate-name colors-red 40) 40)
                :foreground ,(color-darken-name colors-red 10))
   nil)
  (magit-diff-removed-highlight
   (:background ,(color-darken-name (color-desaturate-name colors-red 40) 35)
                :foreground ,colors-red)
   nil)
  (magit-header-line
   (:background nil
                :foreground ,bg-dark
                :box nil)
   (:background nil
                :foreground ,bg-white
                :box nil))
  (magit-log-author
   (:foreground ,colors-orange)
   nil)
  (magit-log-date
   (:foreground ,colors-blue)
   nil)
  (magit-section-heading
   (:foreground ,colors-red)
   nil)
  (magit-section-heading-selection
   (:foreground ,colors-yellow)
   nil)
  (markdown-blockquote-face
   (:inherit org-quote :foreground nil)
   (:inherit org-quote :foreground nil))
  (markdown-bold-face
   (:inherit bold :foreground nil)
   (:inherit bold :foreground nil))
  (markdown-code-face
   (:inherit org-code :foreground nil)
   (:inherit org-code :foreground nil))
  (markdown-header-delimiter-face
   (:inherit org-level-1 :foreground ,gray)
   (:inherit org-level-1 :foreground nil))
  (markdown-header-face
   (:inherit org-level-1 :foreground nil)
   (:inherit org-level-1 :foreground nil))
  (markdown-header-face-1
   (:inherit org-level-1 :foreground nil)
   (:inherit org-level-1 :foreground nil))
  (markdown-header-face-2
   (:inherit org-level-2 :foreground nil)
   (:inherit org-level-2 :foreground nil))
  (markdown-header-face-3
   (:inherit org-level-3 :foreground nil)
   (:inherit org-level-3 :foreground nil))
  (markdown-header-face-4
   (:inherit org-level-4 :foreground nil)
   (:inherit org-level-4 :foreground nil))
  (markdown-header-face-5
   (:inherit org-level-5 :foreground nil)
   (:inherit org-level-5 :foreground nil))
  (markdown-header-face-6
   (:inherit org-level-6 :foreground nil)
   (:inherit org-level-6 :foreground nil))
  (markdown-inline-code-face
   (:inherit org-code)
   (:inherit org-code))
  (markdown-italic-face
   (:inherit italic :foreground nil)
   (:inherit italic :foreground nil))
  (markdown-link-face
   (:inherit org-link :foreground nil)
   (:inherit org-link :foreground nil))
  (markdown-list-face
   (:inherit org-list-dt :foreground nil)
   (:inherit org-list-dt :foreground nil))
  (markdown-metadata-key-face
   (:inherit font-lock-keyword-face :foreground nil)
   (:inherit font-lock-keyword-face :foreground nil))
  (markdown-pre-face
   (:inherit org-block :foreground nil)
   (:inherit org-block :foreground nil))
  (markdown-url-face
   (:inherit org-link :foreground nil)
   (:inherit org-link :foreground nil))
  (match
   (:foreground nil
                :background nil
                :underline ,colors-red)
   nil)
  (minibuffer-prompt
   (:foreground ,keyword)
   nil)
  (mmm-default-submode-face
   (:background ,bg-dark-solaire)
   nil)
  (mode-line
   (:background ,bg-darker)
   (:background ,bg-white
                :box nil))
  (mode-line-inactive
   (:background ,bg-dark)
   (:box nil))
  (mu4e-header-highlight-face
   (:underline nil
               :background ,highlight)
   nil)
  (mu4e-header-key-face
   (:foreground ,gray)
   nil)
  (mu4e-header-value-face
   (:foreground ,slate)
   nil)
  (neo-root-dir-face
   (:foreground ,fg-white
                :background ,region-dark
                :box (:line-width 6 :color ,region-dark))
   nil)
  (org-agenda-current-time
   (:foreground ,slate)
   nil)
  (org-agenda-date
   (:foreground ,doc
                :inherit variable-pitch
                :height 1.2)
   (:inherit nil))
  (org-agenda-date-today
   (:height 1.4
            :foreground ,keyword
            :inherit variable-pitch)
   nil)
  (org-agenda-date-weekend
   (:inherit org-agenda-date
             :height 1.0
             :foreground ,comment)
   nil)
  (org-agenda-done
   (:inherit nil
             :strike-through t
             :foreground ,doc)
   (:height 1.0
            :strike-through t
            :foreground ,doc))
  (org-agenda-structure
   (:height 1.3
            :foreground ,doc
            :weight normal
            :inherit variable-pitch)
   nil)
  (org-block
   (:background ,bg-dark)
   (:background nil
                :foreground ,bg-dark))
  (org-block-begin-line
   (:background ,bg-dark)
   (:background nil
                :height 0.8
                :foreground ,slate))
  (org-block-end-line
   (:background ,bg-dark)
   (:background nil
                :height 0.8
                :foreground ,slate))
  (org-code
   (:foreground ,builtin)
   (:inherit nil
             :foreground ,comment))
  (org-date
   (:foreground ,doc)
   (:height 0.8))
  (org-document-info
   (:foreground ,gray
                :slant italic)
   (:height 1.2
            :slant italic))
  (org-document-info-keyword
   (:foreground ,comment)
   (:height 0.8
            :foreground ,gray))
  (org-document-title
   (:inherit variable-pitch
             :height 1.3
             :weight normal
             :foreground ,gray)
   (:inherit nil
             :family ,et-font
             :height 1.4
             :foreground ,bg-dark
             :underline nil))
  (org-done
   (:inherit variable-pitch
             :foreground ,colors-blue
             :background ,bg-dark)
   (:strike-through t
                    :family ,et-font))
  (org-ellipsis
   (:underline nil
               :background ,accent-dark-gray
               :foreground ,doc)
   (:underline nil
               :foreground ,comment))
  (org-formula
   (:foreground ,type)
   nil)
  (org-headline-done
   (:strike-through t)
   (:family ,et-font
            :strike-through t))
  (org-hide
   nil
   (:foreground ,bg-white))
  (org-indent
   (:inherit org-hide)
   (:inherit (org-hide fixed-pitch)))
  (org-level-1
   (:inherit variable-pitch
             :height 1.1
             :weight bold
             :foreground ,keyword
             :background ,bg-dark)
   (:inherit nil
             :family ,et-font
             :height 1.4
             :weight normal
             :slant normal
             :foreground ,bg-dark))
  (org-level-2
   (:inherit variable-pitch
             :weight bold
             :height 1.1
             :foreground ,accent-light
             :background ,bg-dark)
   (:inherit nil
             :family ,et-font
             :weight normal
             :height 1.3
             :slant italic
             :foreground ,bg-dark))
  (org-level-3
   (:inherit variable-pitch
             :weight bold
             :height 1.1
             :foreground ,gray
             :background ,bg-dark)
   (:inherit nil
             :family ,et-font
             :weight normal
             :slant italic
             :height 1.2
             :foreground ,bg-dark))
  (org-level-4
   (:inherit variable-pitch
             :weight bold
             :height 1.0
             :foreground ,gray
             :background ,bg-dark)
   (:inherit nil
             :family ,et-font
             :weight normal
             :slant italic
             :height 1.2
             :foreground ,bg-dark))
  (org-level-5
   (:inherit variable-pitch
             :weight bold
             :height 1.0
             :foreground ,gray
             :background ,bg-dark)
   (:inherit nil
             :family ,et-font
             :weight normal
             :slant italic
             :height 1.2
             :foreground ,bg-dark))
  (org-level-6
   (:inherit variable-pitch
             :weight bold
             :height 1.0
             :foreground ,gray
             :background ,bg-dark)
   (:inherit nil
             :family ,et-font
             :weight normal
             :slant italic
             :height 1.2
             :foreground ,bg-dark))
  (org-level-7
   (:inherit variable-pitch
             :weight bold
             :height 1.0
             :foreground ,gray
             :background ,bg-dark)
   (:inherit nil
             :family ,et-font
             :weight normal
             :slant italic
             :height 1.2
             :foreground ,bg-dark))
  (org-level-8
   (:inherit variable-pitch
             :weight bold
             :height 1.0
             :foreground ,gray
             :background ,bg-dark)
   (:inherit nil
             :family ,et-font
             :weight normal
             :slant italic
             :height 1.2
             :foreground ,bg-dark))
  (org-link
   (:underline nil
               :weight normal
               :foreground ,slate)
   (:foreground ,bg-dark))
  (org-list-dt
   (:foreground ,function-name)
   nil)
  (org-quote
   (:background ,bg-dark)
   nil)
  (org-ref-cite-face
   (:foreground ,builtin)
   (:foreground ,builtin))
  (org-ref-ref-face
   (:foreground nil :inherit org-link)
   (:foreground nil :inherit org-link))
  (org-scheduled
   (:foreground ,gray)
   nil)
  (org-scheduled-previously
   (:foreground ,slate)
   nil)
  (org-scheduled-today
   (:foreground ,fg-white)
   nil)
  (org-special-keyword
   (:height 0.9
            :foreground ,comment)
   (:height 0.8))
  (org-table
   (:inherit fixed-pitch
             :background nil
             :foreground ,doc)
   (:inherit fixed-pitch
             :height 0.9
             :background ,bg-white))
  (org-tag
   (:foreground ,doc)
   (:foreground ,doc))
  (org-time-grid
   (:foreground ,comment)
   nil)
  (org-todo
   (:foreground ,builtin
                :background ,bg-dark)
   nil)
  (org-upcoming-deadline
   (:foreground ,keyword)
   nil)
  (org-verbatim
   (:foreground ,type)
   nil)
  (org-warning
   (:foreground ,builtin)
   nil)
  (outline-1
   (:background ,bg-dark-solaire)
   nil)
  (outline-2
   (:background ,bg-dark-solaire)
   nil)
  (outline-3
   (:background ,bg-dark-solaire)
   nil)
  (outline-4
   (:background ,bg-dark-solaire)
   nil)
  (outline-5
   (:background ,bg-dark-solaire)
   nil)
  (outline-6
   (:background ,bg-dark-solaire)
   nil)
  (outline-7
   (:background ,bg-dark-solaire)
   nil)
  (outline-8
   (:background ,bg-dark-solaire)
   nil)
  (powerline-active1
   nil
   (:background ,bg-white))
  (powerline-active2
   nil
   (:background ,bg-white))
  (powerline-inactive1
   nil
   (:background ,bg-white))
  (powerline-inactive2
   nil
   (:background ,bg-white))
  (proof-tactics-name-face
   (:inherit font-lock-constant-face)
   (:inherit font-lock-constant-face))
  (proof-tacticals-name-face
   (:inherit font-lock-variable-face)
   (:inherit font-lock-variable-face))
  (rainbow-delimiters-depth-1-face
   (:foreground ,level-1)
   nil)
  (rainbow-delimiters-depth-2-face
   (:foreground ,level-2)
   nil)
  (rainbow-delimiters-depth-3-face
   (:foreground ,level-3)
   nil)
  (rainbow-delimiters-depth-4-face
   (:foreground ,level-4)
   nil)
  (rainbow-delimiters-depth-5-face
   (:foreground ,level-5)
   nil)
  (rainbow-delimiters-depth-6-face
   (:foreground ,level-6)
   nil)
  (rainbow-delimiters-depth-7-face
   (:foreground ,level-7)
   nil)
  (rainbow-delimiters-depth-8-face
   (:foreground ,level-8)
   nil)
  (rainbow-delimiters-depth-9-face
   (:foreground ,level-9)
   nil)
  (region
   (:background ,region)
   nil)
  (show-paren-match
   (:background ,keyword
                :foreground ,bg-dark)
   nil)
  (sldb-restartable-frame-line-face
   (:foreground ,colors-green)
   nil)
  (slime-repl-inputed-output-face
   (:foreground ,keyword)
   nil)
  (solaire-default-face
   (:background ,bg-dark-solaire)
   nil)
  (solaire-hl-line-face
   (:background ,region-dark)
   nil)
  (sp-pair-overlay-face
   (:background ,bg-dark-solaire)
   nil)
  (sp-show-pair-match-face
   (:background ,comment
                :foreground ,colors-yellow)
   nil)
  (sp-wrap-overlay-face
   (:background ,bg-dark-solaire)
   nil)
  (spacemacs-emacs-face
   (:background ,bg-dark
                :foreground ,fg-white)
   nil)
  (spacemacs-evilified-face
   (:background ,bg-dark
                :foreground ,fg-white)
   nil)
  (spacemacs-hybrid-face
   (:background ,bg-dark
                :foreground ,fg-white)
   nil)
  (spacemacs-lisp-face
   (:background ,bg-dark
                :foreground ,fg-white)
   nil)
  (spacemacs-motion-face
   (:background ,bg-dark
                :foreground ,fg-white)
   nil)
  (spacemacs-normal-face
   (:background ,bg-dark
                :foreground ,fg-white)
   nil)
  (spacemacs-visual-face
   (:background ,bg-dark
                :foreground ,fg-white)
   nil)
  (swiper-line-face
   (:background ,dark-3
                :foreground ,fg-white)
   nil)
  (swiper-match-face-2
   (:background ,builtin)
   nil)
  (tooltip
   (:foreground ,gray
                :background ,bg-darker)
   nil)
  (variable-pitch
   (:family ,sans-font)
   (:family ,et-font
            :background nil
            :foreground ,bg-dark
            :height 1.0))
  (vertical-border
   (:background ,region
                :foreground ,region)
   nil)
  (which-key-command-description-face
   (:foreground ,type)
   nil)
  (which-key-key-face
   (:foreground ,string)
   nil)))

(with-eval-after-load 'highlight-parentheses
  ;; Parentheses colors
  (setq hl-paren-colors '("#88C0D0" "#D08770" "#A3BE8C" "#EBCB8B")))
#+END_SRC

**** org-mode config

#+BEGIN_SRC emacs-lisp :tangle no
(setq org-startup-indented t
      org-bullets-bullet-list '(" ") ;; no bullets, needs org-bullets package
      org-ellipsis "  " ;; folding symbol
      org-pretty-entities t
      org-hide-emphasis-markers t
      ;; show actually italicized text instead of /italicized text/
      org-agenda-block-separator ""
      org-fontify-whole-heading-line t
      org-fontify-done-headline t
      org-fontify-quote-and-verse-blocks t)
#+END_SRC

**** test 5

#+BEGIN_SRC emacs-lisp :tangle no
(set-frame-font (font-spec :name "Hack" :size 12) t t)
(custom-theme-set-faces 'user '(fixed-pitch ((t
                                              :family "Hack"
                                              :height 1.0))))  ;; was Luxi Mono
(custom-theme-set-faces 'user '(variable-pitch ((t
                                                 :family "EtBembo"
                                                 :height 1.2))))
(add-to-list 'initial-frame-alist '(line-spacing . 1))
(add-to-list 'default-frame-alist '(line-spacing . 1))

;; Replace the default line-extends-beyond-window symbol
(set-display-table-slot standard-display-table 0 ?›)

(when (require 'face-remap nil 'noerror)
  ;; Make available smaller changes in text size
  (setq-default text-scale-mode-step 1.05)

  ;; Set fixed-width fonts where needed
  (setq-default buffer-face-mode-face '(:inherit fixed-pitch))
  (add-hook 'calendar-mode-hook #'buffer-face-mode)
  (add-hook 'notmuch-tree-mode-hook #'buffer-face-mode))
#+END_SRC

*** all-the-icons

[[https://github.com/domtronn/all-the-icons.el][all-the-icons]] is a utility package to collect various Icon Fonts and propertize them
within Emacs.

#+BEGIN_SRC emacs-lisp
(use-package all-the-icons)
#+END_SRC

*** fontawesome

Insert fontawesome icons.

#+BEGIN_SRC emacs-lisp
(use-package fontawesome)
#+END_SRC

*** emojify

#+BEGIN_QUOTE
[[https://github.com/iqbalansari/emacs-emojify][Emojify]] is an Emacs extension to display emojis. It can display github style emojis like
:smile: or plain ascii ones like :). It tries to be as efficient as possible, while also
providing a lot of flexibility.
#+END_QUOTE

#+begin_src emacs-lisp :tangle no
(use-package emojify
  :hook ((after-init . global-emojify-mode)
         (after-init . global-emojify-mode-line-mode)))
#+end_src

* Enhancements

General improvements brought by some extensions to Emacs.

** beacon
Never lose your cursor again. Whenever the window scrolls a light will shine on
top of your cursor so you know where it is.

#+BEGIN_SRC emacs-lisp
(use-package beacon
  :config
  (beacon-mode t)
  (setq beacon-push-mark 35
        beacon-color "#666600"))
#+END_SRC

** crux

[[https://github.com/bbatsov/crux][crux]] is a Collection of Ridiculously Useful eXtensions for Emacs. crux bundles a
few useful interactive commands to enhance your overall Emacs experience.

#+BEGIN_SRC emacs-lisp
(use-package crux
  :general (("C-a"   . crux-move-beginning-of-line)
            ("C-c o" . crux-open-with)
            ("C-^"   . crux-top-join-line)
            ("S-<return>"   . crux-smart-open-line)
            ("C-S-<return>" . crux-smart-open-line-above)
            ;; ([(control shift up)]     . crux-move-line-up)
            ;; ([(control shift down)]   . crux-move-line-down)
            ([remap kill-whole-line]  . crux-kill-whole-line)
            ))
#+END_SRC

** expand-region

[[https://github.com/magnars/expand-region.el][expand-region]] increases the selected region by semantic units. Just keep pressing =C-==
until it selects what you want.

#+BEGIN_SRC emacs-lisp
(use-package expand-region
  :commands (er/mark-word
             er/mark-defun
             er/mark-sentence)
  :bind ("C-=" . er/expand-region))
#+END_SRC

** multiple-cursors

[[https://github.com/magnars/multiple-cursors.el][multiple-cursors]] for Emacs.

#+begin_src emacs-lisp
(use-package multiple-cursors
  :general
  ("M-s-s" 'mc/mark-previous-like-this
   "M-s-t" 'mc/mark-next-like-this
   "M-s-S" 'mc/unmark-next-like-this
   "M-s-T" 'mc/unmark-previous-like-this
   "H-m" 'hydra-mc/body)
  :commands
  (hydra-mc/mc/mark-previous-like-this
   hydra-mc/mc/mark-next-like-this)
  :config

  ;; from https://github.com/abo-abo/hydra/wiki/multiple-cursors
  (defhydra hydra-mc (:hint nil)
    "
     ^Up^            ^Down^        ^Other^
----------------------------------------------
[_p_]   Previous  [_n_]   Next    [_l_] Edit lines
[_P_]   Skip      [_N_]   Skip    [_a_] Mark all
[_M-p_] Unmark    [_M-n_] Unmark  [_r_] Mark by regexp
^ ^               ^ ^             [_q_] Quit
"
  ("l" mc/edit-lines :exit t)
  ("a" mc/mark-all-like-this :exit t)
  ("n" mc/mark-next-like-this)
  ("N" mc/skip-to-next-like-this)
  ("M-n" mc/unmark-next-like-this)
  ("p" mc/mark-previous-like-this)
  ("P" mc/skip-to-previous-like-this)
  ("M-p" mc/unmark-previous-like-this)
  ("r" mc/mark-all-in-region-regexp :exit t)
  ("q" nil :color blue)
  (" " nil "quit" :color blue)))
#+end_src

** zop-to-char

[[https://github.com/thierryvolpiatto/zop-to-char][zop-to-char]] is an improvement to the built-in ~zap-to-char~.

#+begin_src emacs-lisp
(use-package zop-to-char
  :bind ([remap zap-to-char] . zop-up-to-char))
#+end_src
