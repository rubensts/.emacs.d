#+TITLE:     My Emacs Configuration
#+AUTHOR:    Rubens.TS
#+EMAIL:     rubensts@gmail.com
#+DATE:      2017-04-13
#+LANGUAGE:  en
#+PROPERTY: header-args :tangle init.el :comments org
#+OPTIONS: author:nil date:nil toc:2 title:nil e:nil
#+LaTeX_HEADER: \pagenumbering{gobble}
#+LaTeX_HEADER: \usepackage[T1]{fontenc}
#+LaTeX_HEADER: \usepackage{fontspec}
#+LaTeX_HEADER: \setmonofont[Scale=0.7]{DejaVu Sans Mono}
#+LaTeX_HEADER: \usepackage{mathpazo}
#+LaTeX_HEADER: \usepackage{geometry}
#+LaTeX_HEADER: \geometry{a4paper, margin=20mm}
#+LaTeX_HEADER: \usepackage{minted}
#+LaTeX_HEADER: \setminted{breaklines}

#+ATTR_LATEX: :width 5cm :align center :float t
#+ATTR_HTML: :width 110px
[[./img/emacs_icon.png]][fn:1]

[[id:50f37a2f-42cc-4628-b7fa-30fb85c0ffbc][About]] | [[Packages Setup]] | [[Built-in Capabilities]]

* About
:PROPERTIES:
:ID:       50f37a2f-42cc-4628-b7fa-30fb85c0ffbc
:END:

*ATTENTION:* This is a work in progress

*ATTENTION:* This configuration has been tested on Emacs 25.

** Emacs Configuration using Org-Babel

This repository contains the setup I use to customize Emacs. It is implemented
trying to follow the concept of [[http://orgmode.org/worg/org-contrib/babel/intro.html#literate-programming][Literate Programming]] through the use of [[http://orgmode.org/][Org-mode]]
and [[http://orgmode.org/worg/org-contrib/babel/][Org-Babel]] to manage all the settings in a unique Org mode file.

** Dependencies

This is a list of applications that need to be installed previously in order to
enjoy all the goodies of this configuration. Of course, you can install only the
ones you will really use and/or adapt it to the ones you prefer.

- rg ("ripgrep") or  Ag (“The Silver Searcher”)
- git
- notmuch (also a tool to fetch mail like mbsync or OfflineImap)
- GnuPG
- LaTeX and Pygments to PDF export with syntax highlighting
- MuPDF for DocView, poppler for pdf-tools
- pandoc for ox-pandoc
- pass
- Zeal
  After installing Zeal, you need to download docsets. Go to
  File->Options->Docsets, select the ones you want, and click the Download
  button.
- ImageMagick or GraphicsMagick
- gzip

** Source of Ideas

The inspiration for handling the Emacs configuration through [[http://orgmode.org/worg/org-contrib/babel/intro.html#literate-programming][Literate
Programming]] came from [[http://eschulte.github.io/emacs24-starter-kit/][Eric Schulte's emacs24-starter-kit]]. It is a really clever
concept that, among other things, keeps your Emacs configuration tidy and well
organized.

The first time I saw it being handled by a single org-mode file was on [[https://github.com/sachac/.emacs.d/blob/gh-pages/Sacha.org][Sacha
Chua's config.]] Then I came across [[https://github.com/joedicastro/dotfiles/tree/master/emacs/.emacs.d][joe di castro's emacs.d on github]], where he
automatically generates the =~/.emacs.d/init.el= directly from his =readme.org=
file. This is the solution I'm using here.

A list of Emacs Jedis, from whon I took most of the solutions applied here.
Their ~github~ pages have many interesting/clever ideas to inspire you. Also
make sure to check their blogs as well...cool stuff:

- [[https://github.com/sachac/.emacs.d/blob/gh-pages/Sacha.org][Sacha Chua]]
- [[https://github.com/joedicastro/dotfiles/tree/master/emacs][joedicastro]]
- [[https://github.com/lunaryorn/.emacs.d][lunaryorn]]
- [[https://github.com/abo-abo/oremacs][oremacs (abo-abo)]]
- [[https://github.com/angrybacon/dotemacs][angrybacon]]
- [[https://github.com/emacs-tw/awesome-emacs#interface-enhancement][awesome-emacs]]

** If using it on Mac

For installing Emacs on Mac, check these:

- [[http://emacs.stackexchange.com/questions/271/what-is-the-difference-between-aquamacs-and-other-mac-versions-of-emacs][Stackexchange - Difference between Emacs versions on mac]]
- [[http://www.reddit.com/r/emacs/comments/195163/hey_mac_users/][reddit - emacs-mac-port]]

** How it works

The file =~/.emacs.d/init.el= is one of the first standard init files read by
Emacs in order to load all its configuration. The idea here is to create
=~/.emacs.d/init.el= exporting all the code blocks contained in this current
=readme.org= file to it. This is done by [[http://orgmode.org/worg/org-contrib/babel/][Org-Babel]] through a process called
_tangling_. If a code block is marked with =:tangle no= it will be skipped.

The cool thing about this setup is that you can export the same file as
documentation to HTML, PDF, or LaTeX quite easily, e.g. to do it from Org mode
directly press =C-c C-e=, choose =h= or =l= and then one of the options to
produce the desired output. At the same time it makes the configuration
management a delight, been pretty easy to find any setting and organize them.

** Installation

Firstly, rename your current =~/.emacs.d= directory, so you can keep it safe in
case you want to get back to it:

#+BEGIN_SRC sh :tangle no
$ mv ~/.emacs.d ~/.emacs.d.disabled
#+END_SRC

Then clone this repository. It will create your new =~/.emacs.d= directory:

#+BEGIN_SRC sh :tangle no
$ git clone https://github.com/rubensts/.emacs.d.git
#+END_SRC

Code blocks on org mode can be tangled with =C-c C-v t=. This is not necessary
on this =readme.org= file as the tangling is done automatically.

The code block below is the responsable for creating the hook that will tangle a
new =~/.emacs.d/init.el= every time that this =readme.org= is saved. This also
means that alterations on the configuration have to be done on =readme.org=. Any
changes made on =~/.emacs.d/init.el= will be overwritten when =readme.org= is
saved.

#+BEGIN_SRC emacs-lisp
  ;; originaly seen at
  ;; https://github.com/larstvei/dot-emacs/blob/master/init.org
  (defun tangle-init ()
    "If the current buffer is 'readme.org' the code-blocks are
  tangled, and the tangled file is compiled."
    (when (equal (buffer-file-name)
                 (expand-file-name (concat user-emacs-directory "readme.org")))
      (call-process-shell-command
       "emacs ~/.emacs.d/readme.org --batch --eval='(org-babel-tangle)' && notify-send -a 'Emacs' 'init file tangled'" nil 0)))
  ;;(byte-compile-file (concat user-emacs-directory "init.el")))

  (add-hook 'after-save-hook 'tangle-init)
#+END_SRC

*** How to generate the first init.el file

You can notice that there isn't an =init.el= file present in this
repository. To generate it the first time you just have to run the
following command:

#+BEGIN_EXAMPLE bash
$ /usr/bin/emacs ~/.emacs.d/readme.org --batch --eval='(org-babel-tangle)'
#+END_EXAMPLE

This will generate a =~/.emacs.d/init.el= file from this current
=readme.org= file. Remember that you just have to run the above
command once right after you have cloned this repo. After that the
=~/.emacs.d/init.el= will be recreated every time this =readme.org=
file is saved.

Because of that, there is no reason to track the =~/.emacs.d/init.el=
that is generated; by running the following command =git= will not
bother tracking it:

#+BEGIN_EXAMPLE bash
git update-index --assume-unchanged init.el
#+END_EXAMPLE

* Packages Setup

To automatized package intallation I've started using ~use-package~, which gives a
concise and powerful way to organize Emacs configuration avoiding the terrible
"config bankrupcy".

** Debugging

#+BEGIN_SRC emacs-lisp
  (setq message-log-max 10000)
#+END_SRC

** Package management

#+BEGIN_SRC emacs-lisp
;; Avoid accidentally using outdated compiled files
(setq load-prefer-newer t)

;; Load package here allows to add the new repositories listed below
(require 'package)

;; Assures package-initialize is not called again after init.el.
(setq package-enable-at-startup nil)

;; Sets the ELPA repositories from where packages are fetched
(add-to-list 'package-archives
             '("melpa" . "https://melpa.org/packages/")
             '("org" . "http://orgmode.org/elpa/"))

;; By default package-initialize is called after init.el.
;; Calling it here because some packages listed depend on it.
(package-initialize)

;; Automatically compile Emacs Lisp libraries
;;(require 'auto-compile)
;;(auto-compile-on-load-mode)
;;(auto-compile-on-save-mode)

;; Bootstrap `use-package'
(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))

(eval-when-compile
  (require 'use-package)
  (setq-default use-package-always-defer t
                use-package-always-ensure t))

(require 'subr-x)
(require 'time-date)

;; Help keeping ~/.emacs.d clean
(use-package no-littering :demand t)

(use-package validate :demand t)

;; load libraries
(use-package s)
(use-package f)
#+END_SRC

** Initialization

#+BEGIN_SRC emacs-lisp
  (when (version< emacs-version "25")
    (warn "This configuration needs Emacs 25, but this is %s!" emacs-version))

  ;; Disables calling default.el (default settings) after init.el
  (setq inhibit-default-init t)
#+END_SRC

** Emacs server

Loads Emacs as a server, allowing it to answer to client calls coming from
~emacsclient~.

#+BEGIN_SRC emacs-lisp
  (use-package server
    :init (server-mode))
#+END_SRC

* Built-in Capabilities
** OS compatibility

Check which OS for keeping compatibility.
The functions ~system-is-mac~ and ~system-is-linux~ is called throughout this org
file.

#+BEGIN_SRC emacs-lisp
(defun system-is-mac ()
  (interactive)
  (string-equal system-type "darwin"))

(defun system-is-linux ()
  (interactive)
  (string-equal system-type "gnu/linux"))
#+END_SRC

** sensible-defaults.el

Use [[https://github.com/hrs/sensible-defaults.el][sensible-defaults.el]] for some basic settings.

#+BEGIN_SRC emacs-lisp
  (load-file "~/git/sensible-defaults.el/sensible-defaults.el")
  (sensible-defaults/use-all-settings)
  (sensible-defaults/use-all-keybindings)
#+END_SRC

** Better Defaults

Other personal preferences not covered by [[https://github.com/hrs/sensible-defaults.el][sensible-defaults.el]].

#+BEGIN_SRC emacs-lisp
;; Fullscreen
(cond ((system-is-mac) (toggle-frame-fullscreen))
      ((system-is-linux) (add-to-list 'default-frame-alist
                                      '(fullscreen . maximized))))

;; disable menu, tool-bar and scroll-bar
(when (window-system)
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (scroll-bar-mode -1))

(setq apropos-do-all t                        ; apropos commands perform more extensive searches than default
      x-select-enable-clipboard t             ; allows pasting selection outside of Emacs
      echo-keystrokes 0.1                     ; shows keystrokes in progress
      use-dialog-box nil                      ; don't use dialog when using mouse click
      line-spacing '0.10                      ; line height
      )

(blink-cursor-mode -1)                        ; turn of the blinking cursor
;;(fringe-mode '(1 . 1))                      ; thinner window divisions
(defalias 'list-buffers 'ibuffer)             ; use ibuffer by default
(global-hl-line-mode 1)                       ; highlight the current line
(global-visual-line-mode t)                   ; break long line of text
(global-prettify-symbols-mode 1)              ; prettify symbols (lambdas, etc)

;;(save-place-mode 1)                           ; save cursor position for opened files
;;(setq save-place-file
;;      (concat tmp-directory "places"))

(setq-default indicate-empty-lines t)         ; show empty lines at bottom of buffer
(when (not indicate-empty-lines)
  (toggle-indicate-empty-lines))

(setq-default indent-tabs-mode  nil           ; always indent with spaces
              default-tab-width 4
              c-basic-offset 4)

(set-terminal-coding-system  'utf-8)          ; make sure that UTF-8 is used everywhere
(set-keyboard-coding-system  'utf-8)
(set-language-environment    'utf-8)
(set-selection-coding-system 'utf-8)
(setq locale-coding-system   'utf-8)
(prefer-coding-system        'utf-8)
(set-input-method nil)

;; settings for the modeline
(column-number-mode t)                        ; shows column number on the modeline
(setq size-indication-mode t)
;;(which-function-mode 1)

;; silence the beep sound, and shows the alarm bell visually on the modeline
(setq ring-bell-function (lambda ()
                           (invert-face 'mode-line)
                           (run-with-timer 0.1 nil
                                           'invert-face 'mode-line)))

;; text wrapping at 80 columns by default (only text)
;; (add-hook 'text-mode-hook 'turn-on-auto-fill)
;; (add-hook 'text-mode-hook
;;           '(lambda() (set-fill-column 80)))

;; browser settings
(setq browse-url-browser-function 'browse-url-generic
      browse-url-generic-program "firefox")
#+END_SRC

* Main packages
** evil

Evil configuration taken from https://ilikewhenit.works/blog/6

#+BEGIN_SRC emacs-lisp
(use-package evil
  :demand t
  :config
  (evil-mode 1)

  (with-eval-after-load 'evil-maps
    ;;(define-key evil-motion-state-map (kbd "SPC") nil)
    (define-key evil-motion-state-map (kbd "RET") nil)
    (define-key evil-motion-state-map (kbd "TAB") nil))
  )

(use-package evil-leader
  :after evil
  :config
  (global-evil-leader-mode)
  (evil-leader/set-leader "<SPC>")
  (evil-leader/set-key
    "e" 'find-file
    "bb" 'switch-to-buffer
    "bd" 'kill-buffer-and-window
    "by" 'copy-whole-buffer
    "cy" 'clipboard-kill-ring-save
    "cp" 'clipboard-yank
    "fs" 'save-buffer
    "gs" 'magit-status
    "hs" 'split-window-horizontally
    "iu" 'insert-char
    "lf" 'load-file
    "ne" 'flycheck-next-error
    "pe" 'flycheck-previous-error
    "rm" 'notmuch
    "sm" 'message-send-and-exit
    "si" 'whitespace-mode
    "tn" 'linum-mode
    "w1" 'delete-other-windows
    "wk" 'windmove-left
    "wj" 'windmove-right
    "qq" 'save-buffers-kill-emacs
    "zp" 'zeal-at-point
    ))

(use-package evil-surround
  :after evil
  :config
  (global-evil-surround-mode))

(use-package evil-indent-plus
  :after evil
  :config
  (evil-indent-plus-default-bindings))
#+END_SRC

** org

[[http://orgmode.org/][Org mode]] is for keeping notes, maintaining TODO lists, planning projects, and
authoring documents with a fast and effective plain-text system...bu not only :)

Actually, org-mode is the solely reason why many people recently have decided to
try Emacs, then they are hooked ;)

| Keys        | Command | Results                    |
|-------------+---------+----------------------------|
| C-c C-x C-l |         | Show latex fragments       |
| C-c C-c     |         | Get rid of latex fragments |

*** general settings

#+BEGIN_SRC emacs-lisp
(use-package org
  :ensure org-plus-contrib
  :bind  (("C-c a" . org-agenda-list)
          ("C-c c" . org-capture)
          ("C-c l" . org-store-link)
          ;;("C-c f" . org-cycle-agenda-files)
          ;;("C-c s" . org-search-view)
          ("C-c t" . org-todo-list))
  :config
  (validate-setq
   org-tags-column 90                      ; column to which the tags have to be indented
   org-ellipsis "⤵"                        ; ⬎, ⤷, ⤵, ⚡
   org-fontify-whole-heading-line t        ; fontify the whole line for headings
   org-fontify-done-headline t
   org-fontify-quote-and-verse-blocks t
   org-startup-indented t
   org-hide-emphasis-markers t             ; hide markup elements, e.g. * *, / /, _ _
   org-cycle-include-plain-lists t
   org-list-allow-alphabetical t
   org-latex-create-formula-image-program 'imagemagick   ; preview latex fragments

   ;; Code blocks to play nicelly on org-babel
   org-edit-src-content-indentation 0      ; number of whitespaces added to the code block indentation (after #begin)
   org-src-tab-acts-natively t             ; TAB acts natively as it was in the language major mode
   org-src-preserve-indentation t          ; preserve indentation when exporting blocks
   org-src-fontify-natively t              ; highlights code-blocks natively
   org-src-window-setup 'current-window    ; open code-blocks in the current window
   org-confirm-babel-evaluate nil          ; don't ask for confirmation when compiling code-blocks

   ;; Files location
   org-directory "~/org"
   org-default-notes-file (concat org-directory "/notes.org")
   org-agenda-files (list "~/org/todo.org"
                          "~/org/clockin.org"))

  ;; TODO workflow states
  org-todo-keywords
  '("☛ TODO(t)" "⚑ WAIT(w@)" "|" "✔ DONE(d)" "✘ CANCEL(c@)")

  ;; TODO fontification
  org-todo-keyword-faces
  '(("☛ TODO"   . (:foreground "#ff4500" :weight bold))
    ("✔ DONE"   . (:foreground "#00ff7f" :weight bold))
    ("⚑ WAIT"   . (:foreground "#ffff00" :weight bold))
    ("✘ CANCEL" . (:foreground "#00bfff" :weight bold)))
  )
#+END_SRC

*** org-clock

#+BEGIN_SRC emacs-lisp
(use-package org-clock
  :ensure org-plus-contrib
  :demand t
  :config
  (org-clock-persistence-insinuate)           ; resume clocking task when emacs is restarted
  (validate-setq
   org-clock-persist t                        ; save all clock history when exiting Emacs, load it on startup
   org-clock-persist-query-resume nil         ; do not prompt to resume an active clock
   org-clock-history-length 10                ; show lot of clocking history from where choose items
   org-clock-in-resume t                      ; resume clocking task on clock-in if the clock is open
   org-clock-into-drawer "CLOCKING"           ; clocking goes into specfic drawer
   org-clock-report-include-clocking-task t)) ; include current clocking task in clock reports
#+END_SRC

*** org-capture-templates

#+BEGIN_SRC emacs-lisp
  (use-package org-protocol
    :ensure org-plus-contrib
    :demand t
    :config
    ;; Define capture templates
    (setq org-capture-templates
          '(("w" "Web bookmarks" entry
             (file+headline (concat org-directory "/www.org") "Bookmarks")
             "* %?%c %^g\n:PROPERTIES:\n:CREATED: %U\n:END:\n%i\n"
             :empty-lines 1
             :immediate-finish)

            ("t" "Tasks" entry
             (file+headline (concat org-directory "/tasks.org") "Tasks")
             "* ☛ TODO %^{Task} %^g\n:PROPERTIES:\n:CREATED: %U\n:END:\n%?%i"
             :empty-lines 1)

            ("n" "Notes" entry
             (file+headline (concat org-directory "/notes.org") "Notes")
             "* %^{Header} %^G\n %u\n %?")

            ("j" "Journal" entry
             (file+datetree (concat org-directory "/journal.org"))
             "* %U %^{Title}\n %?%i\n %a")

            ("a" "Articles" entry
             (file+headline (concat org-directory "/articles.org") "Articles")
             "* %^{Title} %^g\n:PROPERTIES:\n:CREATED: %U\n:END:\n%?%i\n"
             :empty-lines 1
             :immediate-finish)

            ("r" "Redmine" entry
             (file+datetree (concat org-directory "/clockin.org"))
             "* [[https://redmine.2ndquadrant.it/issues/%^{Ticket}][%^{Description}]] :redmine:%^g\n%?"
             :clock-in t
             :clock-keep t
             :empty-lines 1)

            ("s" "RT - Support" entry
             (file+datetree (concat org-directory "/clockin.org"))
             "* [[https://support.2ndquadrant.com/rt/Ticket/Display.html?id=%^{Ticket}][%^{Description}]] :support:%^g\n%?"
             :clock-in t
             :clock-keep t
             :empty-lines 1)

            ("b" "RT - RDBA" entry
             (file+datetree (concat org-directory "/clockin.org"))
             "* [[https://support.2ndquadrant.com/rt/Ticket/Display.html?id=%^{Ticket}][%^{Description}]] :rdba:%^g\n%?"
             :clock-in t
             :clock-keep t
             :empty-lines 1)
            )))
#+END_SRC

*** org-bullets

#+BEGIN_SRC emacs-lisp
  (use-package org-bullets
    :demand t
    :after org-plug-contrib
    :config
    ;;(setq org-bullets-bullet-list '("☯" "☰" "☱" "☲" "☳" "☴" "☵" "☶" "☷"))
    ;;(setq org-bullets-bullet-list '("♣" "♥" "♠" "♦" "♧" "♡" "♤" "♢"))
    (validate-setq org-bullets-bullet-list '("☯" "☉" "∞" "◉" "⊚" "☀" "☾" "☥"))
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode t)))

    ;; make available "org-bullet-face" such that I can control the font size individually
    (validate-setq org-bullets-face-name (quote org-bullet-face))
    (custom-set-faces '(org-bullet-face
                        ((t (:foreground "burlywood"
                                         :weight normal
                                         :height 1.6))))
                      ))
#+END_SRC

*** ox.el

#+BEGIN_SRC emacs-lisp
  (use-package ox
    :ensure org-plus-contrib
    :config
    (validate-setq org-export-with-smart-quotes t))
#+END_SRC

*** ox-pandoc

I’m using ox-pandoc to export org files to all formats Pandoc works with. It
only exports org files, in opposite of pandoc-mode, which exports from any
source format. The problem is that ox-pandoc needs considerably less
configuration and as I usually write everything in org-mode, no need to worry.
https://github.com/kawabata/ox-pandoc
http://www.rousette.org.uk/blog/archives/org-mode-and-pandoc/ Keeping a lab book
with org-mode http://informatica.boccaperta.com/m-x-emacs-ox-pandoc/

#+BEGIN_SRC emacs-lisp
  (use-package ox-pandoc
    :after org-plus-contrib
    :config
    (validate-setq org-pandoc-options '((standalone . t))            ; default options for all output formats
                   org-pandoc-options-for-docx '((standalone . nil)) ; cancel above settings only for 'docx' format
                   org-pandoc-options-for-beamer-pdf                 ; special settings for beamer-pdf
                   '((latex-engine . "lualatex"))
                   org-pandoc-options-for-latex-pdf                  ; and for latex-pdf exporters
                   '((latex-engine . "lualatex"))

                   ;; Use external css for html5
                   ;; (let ((stylesheet (expand-file-name
                   ;;                    (locate-user-emacs-file "etc/pandoc.css"))))
                   ;;   (setq org-pandoc-options-for-html5
                   ;;         `((css . ,(concat "file://" stylesheet)))))
                   )
    )
#+END_SRC

*** org-babel

Babel is Org-mode’s ability to execute source code within Org-mode documents.

#+BEGIN_SRC emacs-lisp
(use-package ob
  :ensure org-plus-contrib
  :config
  (org-babel-do-load-languages
   (quote org-babel-load-languages)
   (quote ((calc . t)
           (clojure . t)
           (ditaa . t)
           (dot . t)
           (emacs-lisp . t)
           (gnuplot . t)
           (latex . t)
           (ledger . t)
           (octave . t)
           (org . t)
           (makefile . t)
           (plantuml . t)
           (python . t)
           (R . t)
           (ruby . t)
           (sh . t)
           (sqlite . t)
           (sql . t)
           ))))
#+END_SRC

* Indent

#+BEGIN_SRC emacs-lisp
(use-package aggressive-indent
 :demand t
  :config
  (global-aggressive-indent-mode 1)
  (add-to-list 'aggressive-indent-excluded-modes 'html-mode)
  )
#+END_SRC

* Appearance
** Themes

Here is a list of some themes I like. Just enable it on the configuration below;
don't forget the disable the one that is active.

- [[https://github.com/jordonbiondo/ample-theme][ample-themes]]
- [[https://github.com/waymondo/apropospriate-theme][apropospriate-theme]]
- [[https://github.com/cpaulik/emacs-material-theme][material-theme]]
- [[https://github.com/oneKelvinSmith/monokai-emacs][monokai-theme]]
- [[https://github.com/purcell/color-theme-sanityinc-tomorrow][sanityinc-tomorrow]]
- [[https://github.com/bbatsov/solarized-emacs][solarized-theme]]
- [[https://github.com/fniessen/emacs-leuven-theme][leuven-theme]]
- [[https://github.com/bbatsov/zenburn-emacs][zenburn-theme]]
- [[https://github.com/nashamri/spacemacs-theme][spacemacs-theme]]

Some themes, as solarized and material, change the pitch size of org-headers,
leaving them a little too big for my taste, so I adjust them. I'm adjusting the
~material-theme~ below. If you want to change the ~solarized-theme~ instead, check
[[https://github.com/bbatsov/solarized-emacs#theme-specific-settings][here]].

#+BEGIN_SRC emacs-lisp
(use-package leuven-theme
  :disabled t
  :init
  (load-theme 'leuven t)
  (setq leuven-scale-outline-headlines nil))

(use-package doom-themes
  :disabled t
  :init
  ;; Settings (defaults)
  (setq doom-enable-bold t    ; if nil, bolding are universally disabled
        doom-enable-italic t  ; if nil, italics are universally disabled

        ;; doom-one specific settings
        doom-one-brighter-modeline nil
        doom-one-brighter-comments nil)

  ;; Load the theme (doom-one, doom-dark, etc.)
  (load-theme 'doom-one t)

  ;; OPTIONAL
  ;; brighter source buffers (that represent files)
  (add-hook 'find-file-hook 'doom-buffer-mode-maybe)
  ;; if you use auto-revert-mode
  (add-hook 'after-revert-hook 'doom-buffer-mode-maybe)
  ;; you can brighten other buffers (unconditionally) with:
  (add-hook 'ediff-prepare-buffer-hook 'doom-buffer-mode)

  ;; brighter minibuffer when active
  (add-hook 'minibuffer-setup-hook 'doom-brighten-minibuffer)

  ;; Enable custom neotree theme
  (require 'doom-neotree)    ; all-the-icons fonts must be installed!

  ;; Enable nlinum line highlighting
  (require 'doom-nlinum)     ; requires nlinum and hl-line-mode
  )

(use-package zerodark-theme
  :disabled t
  :init
  (load-theme 'zerodark t)
  (zerodark-setup-modeline-format))

(use-package material-theme
  :demand t
  :init
  (load-theme 'material t)
  :config
  (custom-theme-set-faces
   'material
   `(org-level-1 ((t (:inherit outline-1
                               :background ,"#455A64"
                               :weight bold
                               :box (:style released-button)
                               :height 1.1))))
   `(org-level-2 ((t (:inherit outline-2
                               :background ,"#35575b"
                               :box (:style released-button)
                               :height 1.0))))
   `(org-level-3 ((t (:inherit outline-3 :height 1.0))))
   `(org-level-4 ((t (:inherit outline-4 :height 1.0))))
   `(org-level-5 ((t (:inherit outline-5 ))))
   `(org-level-6 ((t (:inherit outline-6 ))))
   `(org-level-7 ((t (:inherit outline-7 ))))
   `(org-level-8 ((t (:inherit outline-8 ))))
   `(org-level-9 ((t (:inherit outline-9 ))))
   ))
 #+END_SRC

** Fonts

#+BEGIN_SRC emacs-lisp
  (cond ((eq system-type 'gnu/linux)
         (set-face-attribute 'default nil
                             :family "Source Code Pro"
                             :height 90)
         (set-face-attribute 'variable-pitch nil
                             :family "Fira Sans"
                             :height 100
                             :weight 'regular))

        ((eq system-type 'darwin)
         (set-face-attribute 'default nil
                             :family "Source Code Pro"
                             :height 100)))

;; Set a smaller font for the mode line
;; (set-face-attribute 'mode-line nil
;;                     :family "Source Code Pro"
;;                     :height 90)

    ;; Set a font with great support for Unicode Symbols to fallback in
    ;; those case where certain Unicode glyphs are missing in the
    ;; current font. Test range: 🐷 ❤ ⊄ ∫ 𝛼 α 🜚 Ⓚ
    ;; (set-fontset-font "fontset-default" nil
    ;;                   (font-spec :size 20 :name "Symbola"))

    ;;  (set-fontset-font "fontset-default" 'unicode "Dejavu Sans Mono")


    ;; Font setup
    (defun my-configure-fonts (frame)
      "Set up fonts for FRAME.
    Set the default font, and configure various overrides for
    symbols, emojis, greek letters, as well as fall backs for."
      ;; Additional fonts for special characters and fallbacks
      ;; Test range: 🐷 ❤ ⊄ ∫ 𝛼 α 🜚 Ⓚ
      (dolist (script '(symbol mathematical))
        (set-fontset-font t script (font-spec :family "XITS Math")
                          frame 'prepend))

      ;; Define a font set stack for symbols, greek and math characters
      (dolist (script '(symbol greek mathematical))
        (set-fontset-font t script (font-spec :family "Arial Unicode MS")
                          frame 'prepend)
        (set-fontset-font t script (font-spec :family "Menlo")
                          frame 'prepend)
        (set-fontset-font t script (font-spec :family "DejaVu Sans Mono")
                          frame 'prepend))

      (when (eq system-type 'darwin)
        ;; Colored Emoji on OS X, prefer over everything else!
        (set-fontset-font t nil (font-spec :family "Apple Color Emoji")
                          frame 'prepend))

      ;; Fallbacks for math and generic symbols
      (set-fontset-font t nil (font-spec :family "Apple Symbols")
                        frame 'append))

    (when-let (frame (selected-frame))
      (my-configure-fonts frame))
    (add-hook 'after-make-frame-functions #'my-configure-fonts)
#+END_SRC

** Modeline
*** all-the-icons

[[https://github.com/domtronn/all-the-icons.el][all-the-icons]] is a utility package to collect various Icon Fonts and propertize
them within Emacs.

#+BEGIN_SRC emacs-lisp
(use-package all-the-icons :demand t)
#+END_SRC

*** delight

Delight enables you to easily customise how major and minor modes appear in the
ModeLine.

It is similar in purpose to DiminishedModes but it accounts for major modes as
well as minor modes, and also incorporates the necessary ‘eval-after-load’ call
for minor modes, which makes the configuration simpler.

#+BEGIN_SRC emacs-lisp
(use-package delight
  :demand t
  :config
  (delight '((company-mode " Ⓐ" company)
             (hs-minor-mode " ⓗ" hideshow)
             (outline-minor-mode " Ⓞ" outline)
             (outline-mode " Ⓞ" :major)
             (git-gutter-mode " Ⓖ" git-gutter)
             (flyspell-mode " Ⓕ" flyspell)
             (smartparens-mode " Ⓢ" smartparens)
             (elisp-slime-nav-mode nil elisp-slime-nav)
             (emacs-lisp-mode "Elisp" :major)
             (lisp-interaction-mode "LispI" :major)
             (ess-noweb-font-lock-mode nil ess)
             (reftex-mode " Ⓡ" reftex)
             (visual-line-mode " Ⓦ" simple)
             (ess-noweb-mode " Ⓝ" ess)
             (anzu-mode " Ⓩ" anzu)
             (abbrev-mode " ⓐ" abbrev)
             (helm-mode " Ⓗ" helm)
             (rainbow-mode)
             (org-indent-mode nil org-indent)
             (which-key-mode nil which-key)
             (counsel-mode nil counsel)
             (ivy-mode nil ivy)
             (fixmee-mode nil fixmee)
             (button-lock-mode nil button-lock)
             (beacon-mode nil beacon)
             (page-break-lines-mode nil page-break-lines)
             (auto-revert-mode nil autorevert)
             (undo-tree-mode nil undo-tree)
             ;;(server-buffer-clients . " ⓒ")
             )))
#+END_SRC

*** spaceline

#+BEGIN_SRC emacs-lisp
(use-package spaceline
  :demand t
  :config
  (setq powerline-default-separator 'wave
        spaceline-window-numbers-unicode t
        spaceline-workspace-numbers-unicode t))

(use-package spaceline-config
  :demand t
  :ensure nil
  :config
  (spaceline-spacemacs-theme))
#+END_SRC

** Other details

Better looking break lines.

#+BEGIN_SRC emacs-lisp
  (use-package page-break-lines
    :init (global-page-break-lines-mode))
#+END_SRC
